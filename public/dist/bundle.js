!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=157)}([function(e,t,n){var r=n(4),i=n(25),o=n(15),a=n(16),s=n(26),u=function(e,t,n){var c,l,f,h,p=e&u.F,d=e&u.G,v=e&u.S,y=e&u.P,g=e&u.B,m=d?r:v?r[t]||(r[t]={}):(r[t]||{}).prototype,b=d?i:i[t]||(i[t]={}),_=b.prototype||(b.prototype={});for(c in d&&(n=t),n)f=((l=!p&&m&&void 0!==m[c])?m:n)[c],h=g&&l?s(f,r):y&&"function"==typeof f?s(Function.call,f):f,m&&a(m,c,f,e&u.U),b[c]!=f&&o(b,c,h),y&&_[c]!=f&&(_[c]=f)};r.core=i,u.F=1,u.G=2,u.S=4,u.P=8,u.B=16,u.W=32,u.U=64,u.R=128,e.exports=u},function(e,t,n){"use strict";e.exports=n(361)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i,o=n(78),a=n(110),s=n(153),u=n(154),c=((r={})["no-app"]="No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()",r["bad-app-name"]="Illegal App name: '{$appName}",r["duplicate-app"]="Firebase App named '{$appName}' already exists",r["app-deleted"]="Firebase App named '{$appName}' already deleted",r["invalid-app-argument"]="firebase.{$appName}() takes either no argument or a Firebase App instance.",r),l=new a.ErrorFactory("app","Firebase",c),f="@firebase/app",h=((i={})[f]="fire-core",i["@firebase/analytics"]="fire-analytics",i["@firebase/auth"]="fire-auth",i["@firebase/database"]="fire-rtdb",i["@firebase/functions"]="fire-fn",i["@firebase/installations"]="fire-iid",i["@firebase/messaging"]="fire-fcm",i["@firebase/performance"]="fire-perf",i["@firebase/remote-config"]="fire-rc",i["@firebase/storage"]="fire-gcs",i["@firebase/firestore"]="fire-fst",i["fire-js"]="fire-js",i["firebase-wrapper"]="fire-js-all",i),p=new u.Logger("@firebase/app"),d=function(){function e(e,t,n){var r,i,u=this;this.firebase_=n,this.isDeleted_=!1,this.name_=t.name,this.automaticDataCollectionEnabled_=t.automaticDataCollectionEnabled||!1,this.options_=a.deepCopy(e),this.container=new s.ComponentContainer(t.name),this._addComponent(new s.Component("app",(function(){return u}),"PUBLIC"));try{for(var c=o.__values(this.firebase_.INTERNAL.components.values()),l=c.next();!l.done;l=c.next()){var f=l.value;this._addComponent(f)}}catch(e){r={error:e}}finally{try{l&&!l.done&&(i=c.return)&&i.call(c)}finally{if(r)throw r.error}}}return Object.defineProperty(e.prototype,"automaticDataCollectionEnabled",{get:function(){return this.checkDestroyed_(),this.automaticDataCollectionEnabled_},set:function(e){this.checkDestroyed_(),this.automaticDataCollectionEnabled_=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this.checkDestroyed_(),this.name_},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"options",{get:function(){return this.checkDestroyed_(),this.options_},enumerable:!0,configurable:!0}),e.prototype.delete=function(){var e=this;return new Promise((function(t){e.checkDestroyed_(),t()})).then((function(){return e.firebase_.INTERNAL.removeApp(e.name_),Promise.all(e.container.getProviders().map((function(e){return e.delete()})))})).then((function(){e.isDeleted_=!0}))},e.prototype._getService=function(e,t){return void 0===t&&(t="[DEFAULT]"),this.checkDestroyed_(),this.container.getProvider(e).getImmediate({identifier:t})},e.prototype._removeServiceInstance=function(e,t){void 0===t&&(t="[DEFAULT]"),this.container.getProvider(e).clearInstance(t)},e.prototype._addComponent=function(e){try{this.container.addComponent(e)}catch(t){p.debug("Component "+e.name+" failed to register with FirebaseApp "+this.name,t)}},e.prototype._addOrOverwriteComponent=function(e){this.container.addOrOverwriteComponent(e)},e.prototype.checkDestroyed_=function(){if(this.isDeleted_)throw l.create("app-deleted",{appName:this.name_})},e}();d.prototype.name&&d.prototype.options||d.prototype.delete||console.log("dc");var v=
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function e(){var t=
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){var t={},n=new Map,r={__esModule:!0,initializeApp:function(n,i){void 0===i&&(i={});if("object"!=typeof i||null===i){i={name:i}}var o=i;void 0===o.name&&(o.name="[DEFAULT]");var s=o.name;if("string"!=typeof s||!s)throw l.create("bad-app-name",{appName:String(s)});if(a.contains(t,s))throw l.create("duplicate-app",{appName:s});var u=new e(n,o,r);return t[s]=u,u},app:i,registerVersion:function(e,t,n){var r,i=null!==(r=h[e])&&void 0!==r?r:e;n&&(i+="-"+n);var o=i.match(/\s|\//),a=t.match(/\s|\//);if(o||a){var c=['Unable to register library "'+i+'" with version "'+t+'":'];return o&&c.push('library name "'+i+'" contains illegal characters (whitespace or "/")'),o&&a&&c.push("and"),a&&c.push('version name "'+t+'" contains illegal characters (whitespace or "/")'),void p.warn(c.join(" "))}u(new s.Component(i+"-version",(function(){return{library:i,version:t}}),"VERSION"))},apps:null,SDK_VERSION:"7.6.2",INTERNAL:{registerComponent:u,removeApp:function(e){delete t[e]},components:n,useAsService:function(e,t){if("serverAuth"===t)return null;return t}}};function i(e){if(e=e||"[DEFAULT]",!a.contains(t,e))throw l.create("no-app",{appName:e});return t[e]}function u(s){var u,c,f=s.name;if(n.has(f))return p.debug("There were multiple attempts to register component "+f+"."),"PUBLIC"===s.type?r[f]:null;if(n.set(f,s),"PUBLIC"===s.type){var h=function(e){if(void 0===e&&(e=i()),"function"!=typeof e[f])throw l.create("invalid-app-argument",{appName:f});return e[f]()};void 0!==s.serviceProps&&a.deepExtend(h,s.serviceProps),r[f]=h,e.prototype[f]=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=this._getService.bind(this,f);return n.apply(this,s.multipleInstances?e:[])}}try{for(var d=o.__values(Object.keys(t)),v=d.next();!v.done;v=d.next()){var y=v.value;t[y]._addComponent(s)}}catch(e){u={error:e}}finally{try{v&&!v.done&&(c=d.return)&&c.call(d)}finally{if(u)throw u.error}}return"PUBLIC"===s.type?r[f]:null}return(r.default=r,Object.defineProperty(r,"apps",{get:function(){return Object.keys(t).map((function(e){return t[e]}))}}),i.App=e,r)}(d);return t.INTERNAL=o.__assign(o.__assign({},t.INTERNAL),{createFirebaseNamespace:e,extendNamespace:function(e){a.deepExtend(t,e)},createSubscribe:a.createSubscribe,ErrorFactory:a.ErrorFactory,deepExtend:a.deepExtend}),t}(),y=function(){function e(e){this.container=e}return e.prototype.getPlatformInfoString=function(){return this.container.getProviders().map((function(e){if(function(e){var t,n=e.getComponent();return"VERSION"===(null===(t=n)||void 0===t?void 0:t.type)}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e)){var t=e.getImmediate();return t.library+"/"+t.version}return null})).filter((function(e){return e})).join(" ")},e}();
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
if(a.isBrowser()&&void 0!==self.firebase){p.warn("\n    Warning: Firebase is already defined in the global scope. Please make sure\n    Firebase library is only loaded once.\n  ");var g=self.firebase.SDK_VERSION;g&&g.indexOf("LITE")>=0&&p.warn("\n    Warning: You are trying to load Firebase while using Firebase Performance standalone script.\n    You should load Firebase Performance with this instance of Firebase to avoid loading duplicate code.\n    ")}var m=v.initializeApp;v.initializeApp=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a.isNode()&&p.warn('\n      Warning: This is a browser-targeted Firebase bundle but it appears it is being\n      run in a Node environment.  If running in a Node environment, make sure you\n      are using the bundle specified by the "main" field in package.json.\n      \n      If you are using Webpack, you can specify "main" as the first item in\n      "resolve.mainFields":\n      https://webpack.js.org/configuration/resolve/#resolvemainfields\n      \n      If using Rollup, use the rollup-plugin-node-resolve plugin and specify "main"\n      as the first item in "mainFields", e.g. [\'main\', \'module\'].\n      https://github.com/rollup/rollup-plugin-node-resolve\n      '),m.apply(void 0,e)};var b=v;!function(e,t){e.INTERNAL.registerComponent(new s.Component("platform-logger",(function(e){return new y(e)}),"PRIVATE")),e.registerVersion(f,"0.5.1",t),e.registerVersion("fire-js","")}(b),t.default=b,t.firebase=b},function(e,t,n){var r=n(6);e.exports=function(e){if(!r(e))throw TypeError(e+" is not an object!");return e}},function(e,t){var n=e.exports="undefined"!=typeof window&&window.Math==Math?window:"undefined"!=typeof self&&self.Math==Math?self:Function("return this")();"number"==typeof __g&&(__g=n)},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){"use strict";function r(){return(r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(56)("wks"),i=n(41),o=n(4).Symbol,a="function"==typeof o;(e.exports=function(e){return r[e]||(r[e]=a&&o[e]||(a?o:i)("Symbol."+e))}).store=r},function(e,t,n){var r=n(28),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){e.exports=!n(5)((function(){return 7!=Object.defineProperty({},"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(3),i=n(115),o=n(30),a=Object.defineProperty;t.f=n(10)?Object.defineProperty:function(e,t,n){if(r(e),t=o(t,!0),r(n),i)try{return a(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported!");return"value"in n&&(e[t]=n.value),e}},function(e,t,n){var r=n(31);e.exports=function(e){return Object(r(e))}},function(e,t){e.exports=function(e){if("function"!=typeof e)throw TypeError(e+" is not a function!");return e}},function(e,t,n){"use strict";function r(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}n.d(t,"a",(function(){return r}))},function(e,t,n){var r=n(11),i=n(40);e.exports=n(10)?function(e,t,n){return r.f(e,t,i(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){var r=n(4),i=n(15),o=n(20),a=n(41)("src"),s=n(161),u=(""+s).split("toString");n(25).inspectSource=function(e){return s.call(e)},(e.exports=function(e,t,n,s){var c="function"==typeof n;c&&(o(n,"name")||i(n,"name",t)),e[t]!==n&&(c&&(o(n,a)||i(n,a,e[t]?""+e[t]:u.join(String(t)))),e===r?e[t]=n:s?e[t]?e[t]=n:i(e,t,n):(delete e[t],i(e,t,n)))})(Function.prototype,"toString",(function(){return"function"==typeof this&&this[a]||s.call(this)}))},function(e,t,n){var r=n(0),i=n(5),o=n(31),a=/"/g,s=function(e,t,n,r){var i=String(o(e)),s="<"+t;return""!==n&&(s+=" "+n+'="'+String(r).replace(a,"&quot;")+'"'),s+">"+i+"</"+t+">"};e.exports=function(e,t){var n={};n[e]=t(s),r(r.P+r.F*i((function(){var t=""[e]('"');return t!==t.toLowerCase()||t.split('"').length>3})),"String",n)}},function(e,t,n){"use strict";t.a=function(e,t){if(!e)throw new Error("Invariant failed")}},function(e,t,n){"use strict";n.r(t);var r=n(7);function i(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}var a=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],a=t&&t.split("/")||[],s=e&&i(e),u=t&&i(t),c=s||u;if(e&&i(e)?a=r:r.length&&(a.pop(),a=a.concat(r)),!a.length)return"/";if(a.length){var l=a[a.length-1];n="."===l||".."===l||""===l}else n=!1;for(var f=0,h=a.length;h>=0;h--){var p=a[h];"."===p?o(a,h):".."===p?(o(a,h),f++):f&&(o(a,h),f--)}if(!c)for(;f--;f)a.unshift("..");!c||""===a[0]||a[0]&&i(a[0])||a.unshift("");var d=a.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};function s(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var u=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=s(t),i=s(n);return r!==t||i!==n?e(r,i):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1},c=n(18);function l(e){return"/"===e.charAt(0)?e:"/"+e}function f(e){return"/"===e.charAt(0)?e.substr(1):e}function h(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function p(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function d(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}function v(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function y(e,t,n,i){var o;"string"==typeof e?(o=d(e)).state=t:(void 0===(o=Object(r.a)({},e)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==t&&void 0===o.state&&(o.state=t));try{o.pathname=decodeURI(o.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(o.key=n),i?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=a(o.pathname,i.pathname)):o.pathname=i.pathname:o.pathname||(o.pathname="/"),o}function g(e,t){return e.pathname===t.pathname&&e.search===t.search&&e.hash===t.hash&&e.key===t.key&&u(e.state,t.state)}function m(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}n.d(t,"createBrowserHistory",(function(){return E})),n.d(t,"createHashHistory",(function(){return x})),n.d(t,"createMemoryHistory",(function(){return P})),n.d(t,"createLocation",(function(){return y})),n.d(t,"locationsAreEqual",(function(){return g})),n.d(t,"parsePath",(function(){return d})),n.d(t,"createPath",(function(){return v}));var b=!("undefined"==typeof window||!window.document||!window.document.createElement);function _(e,t){t(window.confirm(e))}function w(){try{return window.history.state||{}}catch(e){return{}}}function E(e){void 0===e&&(e={}),b||Object(c.a)(!1);var t,n=window.history,i=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,o=!(-1===window.navigator.userAgent.indexOf("Trident")),a=e,s=a.forceRefresh,u=void 0!==s&&s,f=a.getUserConfirmation,d=void 0===f?_:f,g=a.keyLength,E=void 0===g?6:g,S=e.basename?p(l(e.basename)):"";function C(e){var t=e||{},n=t.key,r=t.state,i=window.location,o=i.pathname+i.search+i.hash;return S&&(o=h(o,S)),y(o,r,n)}function T(){return Math.random().toString(36).substr(2,E)}var k=m();function x(e){Object(r.a)(U,e),U.length=n.length,k.notifyListeners(U.location,U.action)}function I(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||N(C(e.state))}function P(){N(C(w()))}var O=!1;function N(e){if(O)O=!1,x();else{k.confirmTransitionTo(e,"POP",d,(function(t){t?x({action:"POP",location:e}):function(e){var t=U.location,n=R.indexOf(t.key);-1===n&&(n=0);var r=R.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(O=!0,M(i))}(e)}))}}var A=C(w()),R=[A.key];function D(e){return S+v(e)}function M(e){n.go(e)}var L=0;function F(e){1===(L+=e)&&1===e?(window.addEventListener("popstate",I),o&&window.addEventListener("hashchange",P)):0===L&&(window.removeEventListener("popstate",I),o&&window.removeEventListener("hashchange",P))}var j=!1;var U={length:n.length,action:"POP",location:A,createHref:D,push:function(e,t){var r=y(e,t,T(),U.location);k.confirmTransitionTo(r,"PUSH",d,(function(e){if(e){var t=D(r),o=r.key,a=r.state;if(i)if(n.pushState({key:o,state:a},null,t),u)window.location.href=t;else{var s=R.indexOf(U.location.key),c=R.slice(0,s+1);c.push(r.key),R=c,x({action:"PUSH",location:r})}else window.location.href=t}}))},replace:function(e,t){var r=y(e,t,T(),U.location);k.confirmTransitionTo(r,"REPLACE",d,(function(e){if(e){var t=D(r),o=r.key,a=r.state;if(i)if(n.replaceState({key:o,state:a},null,t),u)window.location.replace(t);else{var s=R.indexOf(U.location.key);-1!==s&&(R[s]=r.key),x({action:"REPLACE",location:r})}else window.location.replace(t)}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var t=k.setPrompt(e);return j||(F(1),j=!0),function(){return j&&(j=!1,F(-1)),t()}},listen:function(e){var t=k.appendListener(e);return F(1),function(){F(-1),t()}}};return U}var S={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+f(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:f,decodePath:l},slash:{encodePath:l,decodePath:l}};function C(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function T(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function k(e){window.location.replace(C(window.location.href)+"#"+e)}function x(e){void 0===e&&(e={}),b||Object(c.a)(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),i=n.getUserConfirmation,o=void 0===i?_:i,a=n.hashType,s=void 0===a?"slash":a,u=e.basename?p(l(e.basename)):"",f=S[s],d=f.encodePath,g=f.decodePath;function w(){var e=g(T());return u&&(e=h(e,u)),y(e)}var E=m();function x(e){Object(r.a)(U,e),U.length=t.length,E.notifyListeners(U.location,U.action)}var I=!1,P=null;function O(){var e,t,n=T(),r=d(n);if(n!==r)k(r);else{var i=w(),a=U.location;if(!I&&(t=i,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(P===v(i))return;P=null,function(e){if(I)I=!1,x();else{E.confirmTransitionTo(e,"POP",o,(function(t){t?x({action:"POP",location:e}):function(e){var t=U.location,n=D.lastIndexOf(v(t));-1===n&&(n=0);var r=D.lastIndexOf(v(e));-1===r&&(r=0);var i=n-r;i&&(I=!0,M(i))}(e)}))}}(i)}}var N=T(),A=d(N);N!==A&&k(A);var R=w(),D=[v(R)];function M(e){t.go(e)}var L=0;function F(e){1===(L+=e)&&1===e?window.addEventListener("hashchange",O):0===L&&window.removeEventListener("hashchange",O)}var j=!1;var U={length:t.length,action:"POP",location:R,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=C(window.location.href)),n+"#"+d(u+v(e))},push:function(e,t){var n=y(e,void 0,void 0,U.location);E.confirmTransitionTo(n,"PUSH",o,(function(e){if(e){var t=v(n),r=d(u+t);if(T()!==r){P=t,function(e){window.location.hash=e}(r);var i=D.lastIndexOf(v(U.location)),o=D.slice(0,i+1);o.push(t),D=o,x({action:"PUSH",location:n})}else x()}}))},replace:function(e,t){var n=y(e,void 0,void 0,U.location);E.confirmTransitionTo(n,"REPLACE",o,(function(e){if(e){var t=v(n),r=d(u+t);T()!==r&&(P=t,k(r));var i=D.indexOf(v(U.location));-1!==i&&(D[i]=t),x({action:"REPLACE",location:n})}}))},go:M,goBack:function(){M(-1)},goForward:function(){M(1)},block:function(e){void 0===e&&(e=!1);var t=E.setPrompt(e);return j||(F(1),j=!0),function(){return j&&(j=!1,F(-1)),t()}},listen:function(e){var t=E.appendListener(e);return F(1),function(){F(-1),t()}}};return U}function I(e,t,n){return Math.min(Math.max(e,t),n)}function P(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,i=t.initialEntries,o=void 0===i?["/"]:i,a=t.initialIndex,s=void 0===a?0:a,u=t.keyLength,c=void 0===u?6:u,l=m();function f(e){Object(r.a)(_,e),_.length=_.entries.length,l.notifyListeners(_.location,_.action)}function h(){return Math.random().toString(36).substr(2,c)}var p=I(s,0,o.length-1),d=o.map((function(e){return y(e,void 0,"string"==typeof e?h():e.key||h())})),g=v;function b(e){var t=I(_.index+e,0,_.entries.length-1),r=_.entries[t];l.confirmTransitionTo(r,"POP",n,(function(e){e?f({action:"POP",location:r,index:t}):f()}))}var _={length:d.length,action:"POP",location:d[p],index:p,entries:d,createHref:g,push:function(e,t){var r=y(e,t,h(),_.location);l.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=_.index+1,n=_.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),f({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=y(e,t,h(),_.location);l.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(_.entries[_.index]=r,f({action:"REPLACE",location:r}))}))},go:b,goBack:function(){b(-1)},goForward:function(){b(1)},canGo:function(e){var t=_.index+e;return t>=0&&t<_.entries.length},block:function(e){return void 0===e&&(e=!1),l.setPrompt(e)},listen:function(e){return l.appendListener(e)}};return _}},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){var r=n(57),i=n(31);e.exports=function(e){return r(i(e))}},function(e,t,n){var r=n(58),i=n(40),o=n(21),a=n(30),s=n(20),u=n(115),c=Object.getOwnPropertyDescriptor;t.f=n(10)?c:function(e,t){if(e=o(e),t=a(t,!0),u)try{return c(e,t)}catch(e){}if(s(e,t))return i(!r.f.call(e,t),e[t])}},function(e,t,n){var r=n(20),i=n(12),o=n(83)("IE_PROTO"),a=Object.prototype;e.exports=Object.getPrototypeOf||function(e){return e=i(e),r(e,o)?e[o]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?a:null}},function(e,t,n){e.exports=n(365)()},function(e,t){var n=e.exports={version:"2.6.11"};"number"==typeof __e&&(__e=n)},function(e,t,n){var r=n(13);e.exports=function(e,t,n){if(r(e),void 0===t)return e;switch(n){case 1:return function(n){return e.call(t,n)};case 2:return function(n,r){return e.call(t,n,r)};case 3:return function(n,r,i){return e.call(t,n,r,i)}}return function(){return e.apply(t,arguments)}}},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){"use strict";var r=n(5);e.exports=function(e,t){return!!e&&r((function(){t?e.call(null,(function(){}),1):e.call(null)}))}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on  "+e);return e}},function(e,t,n){var r=n(0),i=n(25),o=n(5);e.exports=function(e,t){var n=(i.Object||{})[e]||Object[e],a={};a[e]=t(n),r(r.S+r.F*o((function(){n(1)})),"Object",a)}},function(e,t,n){var r=n(26),i=n(57),o=n(12),a=n(9),s=n(99);e.exports=function(e,t){var n=1==e,u=2==e,c=3==e,l=4==e,f=6==e,h=5==e||f,p=t||s;return function(t,s,d){for(var v,y,g=o(t),m=i(g),b=r(s,d,3),_=a(m.length),w=0,E=n?p(t,_):u?p(t,0):void 0;_>w;w++)if((h||w in m)&&(y=b(v=m[w],w,g),e))if(n)E[w]=y;else if(y)switch(e){case 3:return!0;case 5:return v;case 6:return w;case 2:E.push(v)}else if(l)return!1;return f?-1:c||l?l:E}}},function(e,t,n){"use strict";if(n(10)){var r=n(37),i=n(4),o=n(5),a=n(0),s=n(74),u=n(107),c=n(26),l=n(47),f=n(40),h=n(15),p=n(49),d=n(28),v=n(9),y=n(143),g=n(43),m=n(30),b=n(20),_=n(53),w=n(6),E=n(12),S=n(96),C=n(44),T=n(23),k=n(45).f,x=n(98),I=n(41),P=n(8),O=n(33),N=n(64),A=n(60),R=n(101),D=n(55),M=n(69),L=n(46),F=n(100),j=n(132),U=n(11),W=n(22),V=U.f,q=W.f,B=i.RangeError,H=i.TypeError,z=i.Uint8Array,Q=Array.prototype,K=u.ArrayBuffer,G=u.DataView,Y=O(0),$=O(2),X=O(3),J=O(4),Z=O(5),ee=O(6),te=N(!0),ne=N(!1),re=R.values,ie=R.keys,oe=R.entries,ae=Q.lastIndexOf,se=Q.reduce,ue=Q.reduceRight,ce=Q.join,le=Q.sort,fe=Q.slice,he=Q.toString,pe=Q.toLocaleString,de=P("iterator"),ve=P("toStringTag"),ye=I("typed_constructor"),ge=I("def_constructor"),me=s.CONSTR,be=s.TYPED,_e=s.VIEW,we=O(1,(function(e,t){return ke(A(e,e[ge]),t)})),Ee=o((function(){return 1===new z(new Uint16Array([1]).buffer)[0]})),Se=!!z&&!!z.prototype.set&&o((function(){new z(1).set({})})),Ce=function(e,t){var n=d(e);if(n<0||n%t)throw B("Wrong offset!");return n},Te=function(e){if(w(e)&&be in e)return e;throw H(e+" is not a typed array!")},ke=function(e,t){if(!(w(e)&&ye in e))throw H("It is not a typed array constructor!");return new e(t)},xe=function(e,t){return Ie(A(e,e[ge]),t)},Ie=function(e,t){for(var n=0,r=t.length,i=ke(e,r);r>n;)i[n]=t[n++];return i},Pe=function(e,t,n){V(e,t,{get:function(){return this._d[n]}})},Oe=function(e){var t,n,r,i,o,a,s=E(e),u=arguments.length,l=u>1?arguments[1]:void 0,f=void 0!==l,h=x(s);if(null!=h&&!S(h)){for(a=h.call(s),r=[],t=0;!(o=a.next()).done;t++)r.push(o.value);s=r}for(f&&u>2&&(l=c(l,arguments[2],2)),t=0,n=v(s.length),i=ke(this,n);n>t;t++)i[t]=f?l(s[t],t):s[t];return i},Ne=function(){for(var e=0,t=arguments.length,n=ke(this,t);t>e;)n[e]=arguments[e++];return n},Ae=!!z&&o((function(){pe.call(new z(1))})),Re=function(){return pe.apply(Ae?fe.call(Te(this)):Te(this),arguments)},De={copyWithin:function(e,t){return j.call(Te(this),e,t,arguments.length>2?arguments[2]:void 0)},every:function(e){return J(Te(this),e,arguments.length>1?arguments[1]:void 0)},fill:function(e){return F.apply(Te(this),arguments)},filter:function(e){return xe(this,$(Te(this),e,arguments.length>1?arguments[1]:void 0))},find:function(e){return Z(Te(this),e,arguments.length>1?arguments[1]:void 0)},findIndex:function(e){return ee(Te(this),e,arguments.length>1?arguments[1]:void 0)},forEach:function(e){Y(Te(this),e,arguments.length>1?arguments[1]:void 0)},indexOf:function(e){return ne(Te(this),e,arguments.length>1?arguments[1]:void 0)},includes:function(e){return te(Te(this),e,arguments.length>1?arguments[1]:void 0)},join:function(e){return ce.apply(Te(this),arguments)},lastIndexOf:function(e){return ae.apply(Te(this),arguments)},map:function(e){return we(Te(this),e,arguments.length>1?arguments[1]:void 0)},reduce:function(e){return se.apply(Te(this),arguments)},reduceRight:function(e){return ue.apply(Te(this),arguments)},reverse:function(){for(var e,t=Te(this).length,n=Math.floor(t/2),r=0;r<n;)e=this[r],this[r++]=this[--t],this[t]=e;return this},some:function(e){return X(Te(this),e,arguments.length>1?arguments[1]:void 0)},sort:function(e){return le.call(Te(this),e)},subarray:function(e,t){var n=Te(this),r=n.length,i=g(e,r);return new(A(n,n[ge]))(n.buffer,n.byteOffset+i*n.BYTES_PER_ELEMENT,v((void 0===t?r:g(t,r))-i))}},Me=function(e,t){return xe(this,fe.call(Te(this),e,t))},Le=function(e){Te(this);var t=Ce(arguments[1],1),n=this.length,r=E(e),i=v(r.length),o=0;if(i+t>n)throw B("Wrong length!");for(;o<i;)this[t+o]=r[o++]},Fe={entries:function(){return oe.call(Te(this))},keys:function(){return ie.call(Te(this))},values:function(){return re.call(Te(this))}},je=function(e,t){return w(e)&&e[be]&&"symbol"!=typeof t&&t in e&&String(+t)==String(t)},Ue=function(e,t){return je(e,t=m(t,!0))?f(2,e[t]):q(e,t)},We=function(e,t,n){return!(je(e,t=m(t,!0))&&w(n)&&b(n,"value"))||b(n,"get")||b(n,"set")||n.configurable||b(n,"writable")&&!n.writable||b(n,"enumerable")&&!n.enumerable?V(e,t,n):(e[t]=n.value,e)};me||(W.f=Ue,U.f=We),a(a.S+a.F*!me,"Object",{getOwnPropertyDescriptor:Ue,defineProperty:We}),o((function(){he.call({})}))&&(he=pe=function(){return ce.call(this)});var Ve=p({},De);p(Ve,Fe),h(Ve,de,Fe.values),p(Ve,{slice:Me,set:Le,constructor:function(){},toString:he,toLocaleString:Re}),Pe(Ve,"buffer","b"),Pe(Ve,"byteOffset","o"),Pe(Ve,"byteLength","l"),Pe(Ve,"length","e"),V(Ve,ve,{get:function(){return this[be]}}),e.exports=function(e,t,n,u){var c=e+((u=!!u)?"Clamped":"")+"Array",f="get"+e,p="set"+e,d=i[c],g=d||{},m=d&&T(d),b=!d||!s.ABV,E={},S=d&&d.prototype,x=function(e,n){V(e,n,{get:function(){return function(e,n){var r=e._d;return r.v[f](n*t+r.o,Ee)}(this,n)},set:function(e){return function(e,n,r){var i=e._d;u&&(r=(r=Math.round(r))<0?0:r>255?255:255&r),i.v[p](n*t+i.o,r,Ee)}(this,n,e)},enumerable:!0})};b?(d=n((function(e,n,r,i){l(e,d,c,"_d");var o,a,s,u,f=0,p=0;if(w(n)){if(!(n instanceof K||"ArrayBuffer"==(u=_(n))||"SharedArrayBuffer"==u))return be in n?Ie(d,n):Oe.call(d,n);o=n,p=Ce(r,t);var g=n.byteLength;if(void 0===i){if(g%t)throw B("Wrong length!");if((a=g-p)<0)throw B("Wrong length!")}else if((a=v(i)*t)+p>g)throw B("Wrong length!");s=a/t}else s=y(n),o=new K(a=s*t);for(h(e,"_d",{b:o,o:p,l:a,e:s,v:new G(o)});f<s;)x(e,f++)})),S=d.prototype=C(Ve),h(S,"constructor",d)):o((function(){d(1)}))&&o((function(){new d(-1)}))&&M((function(e){new d,new d(null),new d(1.5),new d(e)}),!0)||(d=n((function(e,n,r,i){var o;return l(e,d,c),w(n)?n instanceof K||"ArrayBuffer"==(o=_(n))||"SharedArrayBuffer"==o?void 0!==i?new g(n,Ce(r,t),i):void 0!==r?new g(n,Ce(r,t)):new g(n):be in n?Ie(d,n):Oe.call(d,n):new g(y(n))})),Y(m!==Function.prototype?k(g).concat(k(m)):k(g),(function(e){e in d||h(d,e,g[e])})),d.prototype=S,r||(S.constructor=d));var I=S[de],P=!!I&&("values"==I.name||null==I.name),O=Fe.values;h(d,ye,!0),h(S,be,c),h(S,_e,!0),h(S,ge,d),(u?new d(1)[ve]==c:ve in S)||V(S,ve,{get:function(){return c}}),E[c]=d,a(a.G+a.W+a.F*(d!=g),E),a(a.S,c,{BYTES_PER_ELEMENT:t}),a(a.S+a.F*o((function(){g.of.call(d,1)})),c,{from:Oe,of:Ne}),"BYTES_PER_ELEMENT"in S||h(S,"BYTES_PER_ELEMENT",t),a(a.P,c,De),L(c),a(a.P+a.F*Se,c,{set:Le}),a(a.P+a.F*!P,c,Fe),r||S.toString==he||(S.toString=he),a(a.P+a.F*o((function(){new d(1).slice()})),c,{slice:Me}),a(a.P+a.F*(o((function(){return[1,2].toLocaleString()!=new d([1,2]).toLocaleString()}))||!o((function(){S.toLocaleString.call([1,2])}))),c,{toLocaleString:Re}),D[c]=P?I:O,r||P||h(S,de,O)}}else e.exports=function(){}},function(e,t,n){var r=n(138),i=n(0),o=n(56)("metadata"),a=o.store||(o.store=new(n(141))),s=function(e,t,n){var i=a.get(e);if(!i){if(!n)return;a.set(e,i=new r)}var o=i.get(t);if(!o){if(!n)return;i.set(t,o=new r)}return o};e.exports={store:a,map:s,has:function(e,t,n){var r=s(t,n,!1);return void 0!==r&&r.has(e)},get:function(e,t,n){var r=s(t,n,!1);return void 0===r?void 0:r.get(e)},set:function(e,t,n,r){s(n,r,!0).set(e,t)},keys:function(e,t){var n=s(e,t,!1),r=[];return n&&n.forEach((function(e,t){r.push(t)})),r},key:function(e){return void 0===e||"symbol"==typeof e?e:String(e)},exp:function(e){i(i.S,"Reflect",e)}}},function(e,t,n){"use strict";e.exports=function(e,t,n,r,i,o,a,s){if(!e){var u;if(void 0===t)u=new Error("Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings.");else{var c=[n,r,i,o,a,s],l=0;(u=new Error(t.replace(/%s/g,(function(){return c[l++]})))).name="Invariant Violation"}throw u.framesToPop=1,u}}},function(e,t){e.exports=!1},function(e,t,n){var r=n(41)("meta"),i=n(6),o=n(20),a=n(11).f,s=0,u=Object.isExtensible||function(){return!0},c=!n(5)((function(){return u(Object.preventExtensions({}))})),l=function(e){a(e,r,{value:{i:"O"+ ++s,w:{}}})},f=e.exports={KEY:r,NEED:!1,fastKey:function(e,t){if(!i(e))return"symbol"==typeof e?e:("string"==typeof e?"S":"P")+e;if(!o(e,r)){if(!u(e))return"F";if(!t)return"E";l(e)}return e[r].i},getWeak:function(e,t){if(!o(e,r)){if(!u(e))return!0;if(!t)return!1;l(e)}return e[r].w},onFreeze:function(e){return c&&f.NEED&&u(e)&&!o(e,r)&&l(e),e}}},function(e,t,n){var r=n(8)("unscopables"),i=Array.prototype;null==i[r]&&n(15)(i,r,{}),e.exports=function(e){i[r][e]=!0}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol(".concat(void 0===e?"":e,")_",(++n+r).toString(36))}},function(e,t,n){var r=n(117),i=n(84);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(28),i=Math.max,o=Math.min;e.exports=function(e,t){return(e=r(e))<0?i(e+t,0):o(e,t)}},function(e,t,n){var r=n(3),i=n(118),o=n(84),a=n(83)("IE_PROTO"),s=function(){},u=function(){var e,t=n(81)("iframe"),r=o.length;for(t.style.display="none",n(85).appendChild(t),t.src="javascript:",(e=t.contentWindow.document).open(),e.write("<script>document.F=Object<\/script>"),e.close(),u=e.F;r--;)delete u.prototype[o[r]];return u()};e.exports=Object.create||function(e,t){var n;return null!==e?(s.prototype=r(e),n=new s,s.prototype=null,n[a]=e):n=u(),void 0===t?n:i(n,t)}},function(e,t,n){var r=n(117),i=n(84).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t,n){"use strict";var r=n(4),i=n(11),o=n(10),a=n(8)("species");e.exports=function(e){var t=r[e];o&&t&&!t[a]&&i.f(t,a,{configurable:!0,get:function(){return this}})}},function(e,t){e.exports=function(e,t,n,r){if(!(e instanceof t)||void 0!==r&&r in e)throw TypeError(n+": incorrect invocation!");return e}},function(e,t,n){var r=n(26),i=n(130),o=n(96),a=n(3),s=n(9),u=n(98),c={},l={};(t=e.exports=function(e,t,n,f,h){var p,d,v,y,g=h?function(){return e}:u(e),m=r(n,f,t?2:1),b=0;if("function"!=typeof g)throw TypeError(e+" is not iterable!");if(o(g)){for(p=s(e.length);p>b;b++)if((y=t?m(a(d=e[b])[0],d[1]):m(e[b]))===c||y===l)return y}else for(v=g.call(e);!(d=v.next()).done;)if((y=i(v,m,d.value,t))===c||y===l)return y}).BREAK=c,t.RETURN=l},function(e,t,n){var r=n(16);e.exports=function(e,t,n){for(var i in t)r(e,i,t[i],n);return e}},function(e,t,n){var r=n(6);e.exports=function(e,t){if(!r(e)||e._t!==t)throw TypeError("Incompatible receiver, "+t+" required!");return e}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){var r=n(11).f,i=n(20),o=n(8)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){var r=n(27),i=n(8)("toStringTag"),o="Arguments"==r(function(){return arguments}());e.exports=function(e){var t,n,a;return void 0===e?"Undefined":null===e?"Null":"string"==typeof(n=function(e,t){try{return e[t]}catch(e){}}(t=Object(e),i))?n:o?r(t):"Object"==(a=r(t))&&"function"==typeof t.callee?"Arguments":a}},function(e,t,n){var r=n(0),i=n(31),o=n(5),a=n(87),s="["+a+"]",u=RegExp("^"+s+s+"*"),c=RegExp(s+s+"*$"),l=function(e,t,n){var i={},s=o((function(){return!!a[e]()||"​"!="​"[e]()})),u=i[e]=s?t(f):a[e];n&&(i[n]=u),r(r.P+r.F*s,"String",i)},f=l.trim=function(e,t){return e=String(i(e)),1&t&&(e=e.replace(u,"")),2&t&&(e=e.replace(c,"")),e};e.exports=l},function(e,t){e.exports={}},function(e,t,n){var r=n(25),i=n(4),o=i["__core-js_shared__"]||(i["__core-js_shared__"]={});(e.exports=function(e,t){return o[e]||(o[e]=void 0!==t?t:{})})("versions",[]).push({version:r.version,mode:n(37)?"pure":"global",copyright:"© 2019 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(27);e.exports=Object("z").propertyIsEnumerable(0)?Object:function(e){return"String"==r(e)?e.split(""):Object(e)}},function(e,t){t.f={}.propertyIsEnumerable},function(e,t,n){"use strict";var r=n(3);e.exports=function(){var e=r(this),t="";return e.global&&(t+="g"),e.ignoreCase&&(t+="i"),e.multiline&&(t+="m"),e.unicode&&(t+="u"),e.sticky&&(t+="y"),t}},function(e,t,n){var r=n(3),i=n(13),o=n(8)("species");e.exports=function(e,t){var n,a=r(e).constructor;return void 0===a||null==(n=r(a)[o])?t:i(n)}},function(e,t,n){"use strict";n.r(t);var r=n(1),i=n.n(r),o=n(24),a=n.n(o),s=i.a.createContext(null);var u=function(e){e()},c={notify:function(){}};function l(){var e=u,t=[],n=[];return{clear:function(){n=null,t=null},notify:function(){var r=t=n;e((function(){for(var e=0;e<r.length;e++)r[e]()}))},get:function(){return n},subscribe:function(e){var r=!0;return n===t&&(n=t.slice()),n.push(e),function(){r&&null!==t&&(r=!1,n===t&&(n=t.slice()),n.splice(n.indexOf(e),1))}}}}var f=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=l())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();function h(e){var t=e.store,n=e.context,o=e.children,a=Object(r.useMemo)((function(){var e=new f(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),u=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),u!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,u]);var c=n||s;return i.a.createElement(c.Provider,{value:a},o)}h.propTypes={store:a.a.shape({subscribe:a.a.func.isRequired,dispatch:a.a.func.isRequired,getState:a.a.func.isRequired}),context:a.a.object,children:a.a.any};var p=h,d=n(7),v=n(14),y=n(63),g=n.n(y),m=n(36),b=n.n(m),_=n(79),w="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect,E=[],S=[null,null];function C(e,t){var n=e[1];return[t.payload,n+1]}var T=function(){return[null,0]};function k(e,t){void 0===t&&(t={});var n=t,o=n.getDisplayName,a=void 0===o?function(e){return"ConnectAdvanced("+e+")"}:o,u=n.methodName,c=void 0===u?"connectAdvanced":u,l=n.renderCountProp,h=void 0===l?void 0:l,p=n.shouldHandleStateChanges,y=void 0===p||p,m=n.storeKey,k=void 0===m?"store":m,x=n.withRef,I=void 0!==x&&x,P=n.forwardRef,O=void 0!==P&&P,N=n.context,A=void 0===N?s:N,R=Object(v.a)(n,["getDisplayName","methodName","renderCountProp","shouldHandleStateChanges","storeKey","withRef","forwardRef","context"]);b()(void 0===h,"renderCountProp is removed. render counting is built into the latest React Dev Tools profiling extension"),b()(!I,"withRef is removed. To access the wrapped instance, use a ref on the connected component");b()("store"===k,"storeKey has been removed and does not do anything. To use a custom Redux store for specific components, create a custom React context with React.createContext(), and pass the context object to React Redux's Provider and specific components like: <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. You may also pass a {context : MyContext} option to connect");var D=A;return function(t){var n=t.displayName||t.name||"Component",o=a(n),s=Object(d.a)({},R,{getDisplayName:a,methodName:c,renderCountProp:h,shouldHandleStateChanges:y,storeKey:k,displayName:o,wrappedComponentName:n,WrappedComponent:t}),u=R.pure;var l=u?r.useMemo:function(e){return e()};function p(n){var a=Object(r.useMemo)((function(){var e=n.forwardedRef,t=Object(v.a)(n,["forwardedRef"]);return[n.context,e,t]}),[n]),u=a[0],c=a[1],h=a[2],p=Object(r.useMemo)((function(){return u&&u.Consumer&&Object(_.isContextConsumer)(i.a.createElement(u.Consumer,null))?u:D}),[u,D]),g=Object(r.useContext)(p),m=Boolean(n.store)&&Boolean(n.store.getState)&&Boolean(n.store.dispatch),k=Boolean(g)&&Boolean(g.store);b()(m||k,'Could not find "store" in the context of "'+o+'". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to '+o+" in connect options.");var x=m?n.store:g.store,I=Object(r.useMemo)((function(){return function(t){return e(t.dispatch,s)}(x)}),[x]),P=Object(r.useMemo)((function(){if(!y)return S;var e=new f(x,m?null:g.subscription),t=e.notifyNestedSubs.bind(e);return[e,t]}),[x,m,g]),O=P[0],N=P[1],A=Object(r.useMemo)((function(){return m?g:Object(d.a)({},g,{subscription:O})}),[m,g,O]),R=Object(r.useReducer)(C,E,T),M=R[0][0],L=R[1];if(M&&M.error)throw M.error;var F=Object(r.useRef)(),j=Object(r.useRef)(h),U=Object(r.useRef)(),W=Object(r.useRef)(!1),V=l((function(){return U.current&&h===j.current?U.current:I(x.getState(),h)}),[x,M,h]);w((function(){j.current=h,F.current=V,W.current=!1,U.current&&(U.current=null,N())})),w((function(){if(y){var e=!1,t=null,n=function(){if(!e){var n,r,i=x.getState();try{n=I(i,j.current)}catch(e){r=e,t=e}r||(t=null),n===F.current?W.current||N():(F.current=n,U.current=n,W.current=!0,L({type:"STORE_UPDATED",payload:{error:r}}))}};O.onStateChange=n,O.trySubscribe(),n();return function(){if(e=!0,O.tryUnsubscribe(),O.onStateChange=null,t)throw t}}}),[x,O,I]);var q=Object(r.useMemo)((function(){return i.a.createElement(t,Object(d.a)({},V,{ref:c}))}),[c,t,V]);return Object(r.useMemo)((function(){return y?i.a.createElement(p.Provider,{value:A},q):q}),[p,q,A])}var m=u?i.a.memo(p):p;if(m.WrappedComponent=t,m.displayName=o,O){var x=i.a.forwardRef((function(e,t){return i.a.createElement(m,Object(d.a)({},e,{forwardedRef:t}))}));return x.displayName=o,x.WrappedComponent=t,g()(x,t)}return g()(m,t)}}var x=Object.prototype.hasOwnProperty;function I(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!=e&&t!=t}function P(e,t){if(I(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(var i=0;i<n.length;i++)if(!x.call(t,n[i])||!I(e[n[i]],t[n[i]]))return!1;return!0}var O=n(111);function N(e){return function(t,n){var r=e(t,n);function i(){return r}return i.dependsOnOwnProps=!1,i}}function A(e){return null!==e.dependsOnOwnProps&&void 0!==e.dependsOnOwnProps?Boolean(e.dependsOnOwnProps):1!==e.length}function R(e,t){return function(t,n){n.displayName;var r=function(e,t){return r.dependsOnOwnProps?r.mapToProps(e,t):r.mapToProps(e)};return r.dependsOnOwnProps=!0,r.mapToProps=function(t,n){r.mapToProps=e,r.dependsOnOwnProps=A(e);var i=r(t,n);return"function"==typeof i&&(r.mapToProps=i,r.dependsOnOwnProps=A(i),i=r(t,n)),i},r}}var D=[function(e){return"function"==typeof e?R(e):void 0},function(e){return e?void 0:N((function(e){return{dispatch:e}}))},function(e){return e&&"object"==typeof e?N((function(t){return Object(O.bindActionCreators)(e,t)})):void 0}];var M=[function(e){return"function"==typeof e?R(e):void 0},function(e){return e?void 0:N((function(){return{}}))}];function L(e,t,n){return Object(d.a)({},n,{},e,{},t)}var F=[function(e){return"function"==typeof e?function(e){return function(t,n){n.displayName;var r,i=n.pure,o=n.areMergedPropsEqual,a=!1;return function(t,n,s){var u=e(t,n,s);return a?i&&o(u,r)||(r=u):(a=!0,r=u),r}}}(e):void 0},function(e){return e?void 0:function(){return L}}];function j(e,t,n,r){return function(i,o){return n(e(i,o),t(r,o),o)}}function U(e,t,n,r,i){var o,a,s,u,c,l=i.areStatesEqual,f=i.areOwnPropsEqual,h=i.areStatePropsEqual,p=!1;function d(i,p){var d,v,y=!f(p,a),g=!l(i,o);return o=i,a=p,y&&g?(s=e(o,a),t.dependsOnOwnProps&&(u=t(r,a)),c=n(s,u,a)):y?(e.dependsOnOwnProps&&(s=e(o,a)),t.dependsOnOwnProps&&(u=t(r,a)),c=n(s,u,a)):g?(d=e(o,a),v=!h(d,s),s=d,v&&(c=n(s,u,a)),c):c}return function(i,l){return p?d(i,l):(s=e(o=i,a=l),u=t(r,a),c=n(s,u,a),p=!0,c)}}function W(e,t){var n=t.initMapStateToProps,r=t.initMapDispatchToProps,i=t.initMergeProps,o=Object(v.a)(t,["initMapStateToProps","initMapDispatchToProps","initMergeProps"]),a=n(e,o),s=r(e,o),u=i(e,o);return(o.pure?U:j)(a,s,u,e,o)}function V(e,t,n){for(var r=t.length-1;r>=0;r--){var i=t[r](e);if(i)return i}return function(t,r){throw new Error("Invalid value of type "+typeof e+" for "+n+" argument when connecting component "+r.wrappedComponentName+".")}}function q(e,t){return e===t}var B,H,z,Q,K,G,Y,$,X,J,Z,ee,te=(z=(H=void 0===B?{}:B).connectHOC,Q=void 0===z?k:z,K=H.mapStateToPropsFactories,G=void 0===K?M:K,Y=H.mapDispatchToPropsFactories,$=void 0===Y?D:Y,X=H.mergePropsFactories,J=void 0===X?F:X,Z=H.selectorFactory,ee=void 0===Z?W:Z,function(e,t,n,r){void 0===r&&(r={});var i=r,o=i.pure,a=void 0===o||o,s=i.areStatesEqual,u=void 0===s?q:s,c=i.areOwnPropsEqual,l=void 0===c?P:c,f=i.areStatePropsEqual,h=void 0===f?P:f,p=i.areMergedPropsEqual,y=void 0===p?P:p,g=Object(v.a)(i,["pure","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","areMergedPropsEqual"]),m=V(e,G,"mapStateToProps"),b=V(t,$,"mapDispatchToProps"),_=V(n,J,"mergeProps");return Q(ee,Object(d.a)({methodName:"connect",getDisplayName:function(e){return"Connect("+e+")"},shouldHandleStateChanges:Boolean(e),initMapStateToProps:m,initMapDispatchToProps:b,initMergeProps:_,pure:a,areStatesEqual:u,areOwnPropsEqual:l,areStatePropsEqual:h,areMergedPropsEqual:y},g))});function ne(){var e=Object(r.useContext)(s);return b()(e,"could not find react-redux context value; please ensure the component is wrapped in a <Provider>"),e}function re(e){void 0===e&&(e=s);var t=e===s?ne:function(){return Object(r.useContext)(e)};return function(){return t().store}}var ie=re();function oe(e){void 0===e&&(e=s);var t=e===s?ie:re(e);return function(){return t().dispatch}}var ae=oe(),se=function(e,t){return e===t};function ue(e){void 0===e&&(e=s);var t=e===s?ne:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=se),b()(e,"You must pass a selector to useSelectors");var i=t();return function(e,t,n,i){var o,a=Object(r.useReducer)((function(e){return e+1}),0)[1],s=Object(r.useMemo)((function(){return new f(n,i)}),[n,i]),u=Object(r.useRef)(),c=Object(r.useRef)(),l=Object(r.useRef)();try{o=e!==c.current||u.current?e(n.getState()):l.current}catch(e){var h="An error occurred while selecting the store state: "+e.message+".";throw u.current&&(h+="\nThe error may be correlated with this previous error:\n"+u.current.stack+"\n\nOriginal stack trace:"),new Error(h)}return w((function(){c.current=e,l.current=o,u.current=void 0})),w((function(){function e(){try{var e=c.current(n.getState());if(t(e,l.current))return;l.current=e}catch(e){u.current=e}a({})}return s.onStateChange=e,s.trySubscribe(),e(),function(){return s.tryUnsubscribe()}}),[n,s]),o}(e,n,i.store,i.subscription)}}var ce,le=ue(),fe=n(108);n.d(t,"Provider",(function(){return p})),n.d(t,"connectAdvanced",(function(){return k})),n.d(t,"ReactReduxContext",(function(){return s})),n.d(t,"connect",(function(){return te})),n.d(t,"batch",(function(){return fe.unstable_batchedUpdates})),n.d(t,"useDispatch",(function(){return ae})),n.d(t,"createDispatchHook",(function(){return oe})),n.d(t,"useSelector",(function(){return le})),n.d(t,"createSelectorHook",(function(){return ue})),n.d(t,"useStore",(function(){return ie})),n.d(t,"createStoreHook",(function(){return re})),n.d(t,"shallowEqual",(function(){return P})),ce=fe.unstable_batchedUpdates,u=ce},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t);var i=n(1),o=n.n(i),a=n(24),s=n.n(a),u=n(19),c=n(113),l=n.n(c),f=n(156),h=n.n(f);function p(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var d=o.a.createContext||function(e,t){var n,r,o="__create-react-context-"+h()()+"__",a=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=p(t.props.value),t}l()(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[o]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,i=e.value;((o=r)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?n=0:(n="function"==typeof t?t(r,i):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var o,a},r.render=function(){return this.props.children},n}(i.Component);a.childContextTypes=((n={})[o]=s.a.object.isRequired,n);var u=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}l()(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[o]&&this.context[o].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[o]&&this.context[o].off(this.onUpdate)},r.getValue=function(){return this.context[o]?this.context[o].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(i.Component);return u.contextTypes=((r={})[o]=s.a.object,r),{Provider:a,Consumer:u}},v=n(18),y=n(7),g=n(114),m=n.n(g),b=(n(79),n(14)),_=n(63),w=n.n(_),E=function(e){var t=d();return t.displayName=e,t}("Router"),S=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}r(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return o.a.createElement(E.Provider,{children:this.props.children||null,value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}})},t}(o.a.Component);var C=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(u.createMemoryHistory)(t.props),t}return r(t,e),t.prototype.render=function(){return o.a.createElement(S,{history:this.history,children:this.props.children})},t}(o.a.Component);var T=function(e){function t(){return e.apply(this,arguments)||this}r(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(o.a.Component);function k(e){var t=e.message,n=e.when,r=void 0===n||n;return o.a.createElement(E.Consumer,null,(function(e){if(e||Object(v.a)(!1),!r||e.staticContext)return null;var n=e.history.block;return o.a.createElement(T,{onMount:function(e){e.release=n(t)},onUpdate:function(e,r){r.message!==t&&(e.release(),e.release=n(t))},onUnmount:function(e){e.release()},message:t})}))}var x={},I=0;function P(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(x[e])return x[e];var t=m.a.compile(e);return I<1e4&&(x[e]=t,I++),t}(e)(t,{pretty:!0})}function O(e){var t=e.computedMatch,n=e.to,r=e.push,i=void 0!==r&&r;return o.a.createElement(E.Consumer,null,(function(e){e||Object(v.a)(!1);var r=e.history,a=e.staticContext,s=i?r.push:r.replace,c=Object(u.createLocation)(t?"string"==typeof n?P(n,t.params):Object(y.a)({},n,{pathname:P(n.pathname,t.params)}):n);return a?(s(c),null):o.a.createElement(T,{onMount:function(){s(c)},onUpdate:function(e,t){var n=Object(u.createLocation)(t.to);Object(u.locationsAreEqual)(n,Object(y.a)({},c,{key:n.key}))||s(c)},to:n})}))}var N={},A=0;function R(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,o=void 0!==i&&i,a=n.strict,s=void 0!==a&&a,u=n.sensitive,c=void 0!==u&&u;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=N[n]||(N[n]={});if(r[e])return r[e];var i=[],o={regexp:m()(e,i,t),keys:i};return A<1e4&&(r[e]=o,A++),o}(n,{end:o,strict:s,sensitive:c}),i=r.regexp,a=r.keys,u=i.exec(e);if(!u)return null;var l=u[0],f=u.slice(1),h=e===l;return o&&!h?null:{path:n,url:"/"===n&&""===l?"/":l,isExact:h,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var D=function(e){function t(){return e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(E.Consumer,null,(function(t){t||Object(v.a)(!1);var n=e.props.location||t.location,r=e.props.computedMatch?e.props.computedMatch:e.props.path?R(n.pathname,e.props):t.match,i=Object(y.a)({},t,{location:n,match:r}),a=e.props,s=a.children,u=a.component,c=a.render;return Array.isArray(s)&&0===s.length&&(s=null),o.a.createElement(E.Provider,{value:i},i.match?s?"function"==typeof s?s(i):s:u?o.a.createElement(u,i):c?c(i):null:"function"==typeof s?s(i):null)}))},t}(o.a.Component);function M(e){return"/"===e.charAt(0)?e:"/"+e}function L(e,t){if(!e)return t;var n=M(e);return 0!==t.pathname.indexOf(n)?t:Object(y.a)({},t,{pathname:t.pathname.substr(n.length)})}function F(e){return"string"==typeof e?e:Object(u.createPath)(e)}function j(e){return function(){Object(v.a)(!1)}}function U(){}var W=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).handlePush=function(e){return t.navigateTo(e,"PUSH")},t.handleReplace=function(e){return t.navigateTo(e,"REPLACE")},t.handleListen=function(){return U},t.handleBlock=function(){return U},t}r(t,e);var n=t.prototype;return n.navigateTo=function(e,t){var n=this.props,r=n.basename,i=void 0===r?"":r,o=n.context,a=void 0===o?{}:o;a.action=t,a.location=function(e,t){return e?Object(y.a)({},t,{pathname:M(e)+t.pathname}):t}(i,Object(u.createLocation)(e)),a.url=F(a.location)},n.render=function(){var e=this.props,t=e.basename,n=void 0===t?"":t,r=e.context,i=void 0===r?{}:r,a=e.location,s=void 0===a?"/":a,c=Object(b.a)(e,["basename","context","location"]),l={createHref:function(e){return M(n+F(e))},action:"POP",location:L(n,Object(u.createLocation)(s)),push:this.handlePush,replace:this.handleReplace,go:j(),goBack:j(),goForward:j(),listen:this.handleListen,block:this.handleBlock};return o.a.createElement(S,Object(y.a)({},c,{history:l,staticContext:i}))},t}(o.a.Component);var V=function(e){function t(){return e.apply(this,arguments)||this}return r(t,e),t.prototype.render=function(){var e=this;return o.a.createElement(E.Consumer,null,(function(t){t||Object(v.a)(!1);var n,r,i=e.props.location||t.location;return o.a.Children.forEach(e.props.children,(function(e){if(null==r&&o.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?R(i.pathname,Object(y.a)({},e.props,{path:a})):t.match}})),r?o.a.cloneElement(n,{location:i,computedMatch:r}):null}))},t}(o.a.Component);function q(e){var t="withRouter("+(e.displayName||e.name)+")",n=function(t){var n=t.wrappedComponentRef,r=Object(b.a)(t,["wrappedComponentRef"]);return o.a.createElement(E.Consumer,null,(function(t){return t||Object(v.a)(!1),o.a.createElement(e,Object(y.a)({},r,t,{ref:n}))}))};return n.displayName=t,n.WrappedComponent=e,w()(n,e)}var B=o.a.useContext;function H(){return B(E).history}function z(){return B(E).location}function Q(){var e=B(E).match;return e?e.params:{}}function K(e){return e?R(z().pathname,e):B(E).match}n.d(t,"BrowserRouter",(function(){return G})),n.d(t,"HashRouter",(function(){return Y})),n.d(t,"Link",(function(){return te})),n.d(t,"NavLink",(function(){return ie})),n.d(t,"MemoryRouter",(function(){return C})),n.d(t,"Prompt",(function(){return k})),n.d(t,"Redirect",(function(){return O})),n.d(t,"Route",(function(){return D})),n.d(t,"Router",(function(){return S})),n.d(t,"StaticRouter",(function(){return W})),n.d(t,"Switch",(function(){return V})),n.d(t,"__RouterContext",(function(){return E})),n.d(t,"generatePath",(function(){return P})),n.d(t,"matchPath",(function(){return R})),n.d(t,"useHistory",(function(){return H})),n.d(t,"useLocation",(function(){return z})),n.d(t,"useParams",(function(){return Q})),n.d(t,"useRouteMatch",(function(){return K})),n.d(t,"withRouter",(function(){return q}));var G=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(u.createBrowserHistory)(t.props),t}return r(t,e),t.prototype.render=function(){return o.a.createElement(S,{history:this.history,children:this.props.children})},t}(o.a.Component);var Y=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=Object(u.createHashHistory)(t.props),t}return r(t,e),t.prototype.render=function(){return o.a.createElement(S,{history:this.history,children:this.props.children})},t}(o.a.Component);var $=function(e,t){return"function"==typeof e?e(t):e},X=function(e,t){return"string"==typeof e?Object(u.createLocation)(e,null,null,t):e},J=function(e){return e},Z=o.a.forwardRef;void 0===Z&&(Z=J);var ee=Z((function(e,t){var n=e.innerRef,r=e.navigate,i=e.onClick,a=Object(b.a)(e,["innerRef","navigate","onClick"]),s=a.target,u=Object(y.a)({},a,{onClick:function(e){try{i&&i(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||s&&"_self"!==s||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return u.ref=J!==Z&&t||n,o.a.createElement("a",u)}));var te=Z((function(e,t){var n=e.component,r=void 0===n?ee:n,i=e.replace,a=e.to,s=e.innerRef,u=Object(b.a)(e,["component","replace","to","innerRef"]);return o.a.createElement(E.Consumer,null,(function(e){e||Object(v.a)(!1);var n=e.history,c=X($(a,e.location),e.location),l=c?n.createHref(c):"",f=Object(y.a)({},u,{href:l,navigate:function(){var t=$(a,e.location);(i?n.replace:n.push)(t)}});return J!==Z?f.ref=t||s:f.innerRef=s,o.a.createElement(r,f)}))})),ne=function(e){return e},re=o.a.forwardRef;void 0===re&&(re=ne);var ie=re((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,i=e.activeClassName,a=void 0===i?"active":i,s=e.activeStyle,u=e.className,c=e.exact,l=e.isActive,f=e.location,h=e.strict,p=e.style,d=e.to,g=e.innerRef,m=Object(b.a)(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","strict","style","to","innerRef"]);return o.a.createElement(E.Consumer,null,(function(e){e||Object(v.a)(!1);var n=f||e.location,i=X($(d,n),n),b=i.pathname,_=b&&b.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),w=_?R(n.pathname,{path:_,exact:c,strict:h}):null,E=!!(l?l(w,n):w),S=E?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(u,a):u,C=E?Object(y.a)({},p,{},s):p,T=Object(y.a)({"aria-current":E&&r||null,className:S,style:C,to:i},m);return ne!==re?T.ref=t||g:T.innerRef=g,o.a.createElement(te,T)}))}))},function(e,t,n){"use strict";var r=n(79),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},s={};function u(e){return r.isMemo(e)?a:s[e.$$typeof]||i}s[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0};var c=Object.defineProperty,l=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,h=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,d=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(d){var i=p(n);i&&i!==d&&e(t,i,r)}var a=l(n);f&&(a=a.concat(f(n)));for(var s=u(t),v=u(n),y=0;y<a.length;++y){var g=a[y];if(!(o[g]||r&&r[g]||v&&v[g]||s&&s[g])){var m=h(n,g);try{c(t,g,m)}catch(e){}}}}return t}},function(e,t,n){var r=n(21),i=n(9),o=n(43);e.exports=function(e){return function(t,n,a){var s,u=r(t),c=i(u.length),l=o(a,c);if(e&&n!=n){for(;c>l;)if((s=u[l++])!=s)return!0}else for(;c>l;l++)if((e||l in u)&&u[l]===n)return e||l||0;return!e&&-1}}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(27);e.exports=Array.isArray||function(e){return"Array"==r(e)}},function(e,t,n){var r=n(28),i=n(31);e.exports=function(e){return function(t,n){var o,a,s=String(i(t)),u=r(n),c=s.length;return u<0||u>=c?e?"":void 0:(o=s.charCodeAt(u))<55296||o>56319||u+1===c||(a=s.charCodeAt(u+1))<56320||a>57343?e?s.charAt(u):o:e?s.slice(u,u+2):a-56320+(o-55296<<10)+65536}}},function(e,t,n){var r=n(6),i=n(27),o=n(8)("match");e.exports=function(e){var t;return r(e)&&(void 0!==(t=e[o])?!!t:"RegExp"==i(e))}},function(e,t,n){var r=n(8)("iterator"),i=!1;try{var o=[7][r]();o.return=function(){i=!0},Array.from(o,(function(){throw 2}))}catch(e){}e.exports=function(e,t){if(!t&&!i)return!1;var n=!1;try{var o=[7],a=o[r]();a.next=function(){return{done:n=!0}},o[r]=function(){return a},e(o)}catch(e){}return n}},function(e,t,n){"use strict";var r=n(53),i=RegExp.prototype.exec;e.exports=function(e,t){var n=e.exec;if("function"==typeof n){var o=n.call(e,t);if("object"!=typeof o)throw new TypeError("RegExp exec method returned something other than an Object or null");return o}if("RegExp"!==r(e))throw new TypeError("RegExp#exec called on incompatible receiver");return i.call(e,t)}},function(e,t,n){"use strict";n(134);var r=n(16),i=n(15),o=n(5),a=n(31),s=n(8),u=n(102),c=s("species"),l=!o((function(){var e=/./;return e.exec=function(){var e=[];return e.groups={a:"7"},e},"7"!=="".replace(e,"$<a>")})),f=function(){var e=/(?:)/,t=e.exec;e.exec=function(){return t.apply(this,arguments)};var n="ab".split(e);return 2===n.length&&"a"===n[0]&&"b"===n[1]}();e.exports=function(e,t,n){var h=s(e),p=!o((function(){var t={};return t[h]=function(){return 7},7!=""[e](t)})),d=p?!o((function(){var t=!1,n=/a/;return n.exec=function(){return t=!0,null},"split"===e&&(n.constructor={},n.constructor[c]=function(){return n}),n[h](""),!t})):void 0;if(!p||!d||"replace"===e&&!l||"split"===e&&!f){var v=/./[h],y=n(a,h,""[e],(function(e,t,n,r,i){return t.exec===u?p&&!i?{done:!0,value:v.call(t,n,r)}:{done:!0,value:e.call(n,t,r)}:{done:!1}})),g=y[0],m=y[1];r(String.prototype,e,g),i(RegExp.prototype,h,2==t?function(e,t){return m.call(e,this,t)}:function(e){return m.call(e,this)})}}},function(e,t,n){var r=n(4).navigator;e.exports=r&&r.userAgent||""},function(e,t,n){"use strict";var r=n(4),i=n(0),o=n(16),a=n(49),s=n(38),u=n(48),c=n(47),l=n(6),f=n(5),h=n(69),p=n(52),d=n(88);e.exports=function(e,t,n,v,y,g){var m=r[e],b=m,_=y?"set":"add",w=b&&b.prototype,E={},S=function(e){var t=w[e];o(w,e,"delete"==e?function(e){return!(g&&!l(e))&&t.call(this,0===e?0:e)}:"has"==e?function(e){return!(g&&!l(e))&&t.call(this,0===e?0:e)}:"get"==e?function(e){return g&&!l(e)?void 0:t.call(this,0===e?0:e)}:"add"==e?function(e){return t.call(this,0===e?0:e),this}:function(e,n){return t.call(this,0===e?0:e,n),this})};if("function"==typeof b&&(g||w.forEach&&!f((function(){(new b).entries().next()})))){var C=new b,T=C[_](g?{}:-0,1)!=C,k=f((function(){C.has(1)})),x=h((function(e){new b(e)})),I=!g&&f((function(){for(var e=new b,t=5;t--;)e[_](t,t);return!e.has(-0)}));x||((b=t((function(t,n){c(t,b,e);var r=d(new m,t,b);return null!=n&&u(n,y,r[_],r),r}))).prototype=w,w.constructor=b),(k||I)&&(S("delete"),S("has"),y&&S("get")),(I||T)&&S(_),g&&w.clear&&delete w.clear}else b=v.getConstructor(t,e,y,_),a(b.prototype,n),s.NEED=!0;return p(b,e),E[e]=b,i(i.G+i.W+i.F*(b!=m),E),g||v.setStrong(b,e,y),b}},function(e,t,n){for(var r,i=n(4),o=n(15),a=n(41),s=a("typed_array"),u=a("view"),c=!(!i.ArrayBuffer||!i.DataView),l=c,f=0,h="Int8Array,Uint8Array,Uint8ClampedArray,Int16Array,Uint16Array,Int32Array,Uint32Array,Float32Array,Float64Array".split(",");f<9;)(r=i[h[f++]])?(o(r.prototype,s,!0),o(r.prototype,u,!0)):l=!1;e.exports={ABV:c,CONSTR:l,TYPED:s,VIEW:u}},function(e,t,n){"use strict";e.exports=n(37)||!n(5)((function(){var e=Math.random();__defineSetter__.call(null,e,(function(){})),delete n(4)[e]}))},function(e,t,n){"use strict";var r=n(0);e.exports=function(e){r(r.S,e,{of:function(){for(var e=arguments.length,t=new Array(e);e--;)t[e]=arguments[e];return new this(t)}})}},function(e,t,n){"use strict";var r=n(0),i=n(13),o=n(26),a=n(48);e.exports=function(e){r(r.S,e,{from:function(e){var t,n,r,s,u=arguments[1];return i(this),(t=void 0!==u)&&i(u),null==e?new this:(n=[],t?(r=0,s=o(u,arguments[2],2),a(e,!1,(function(e){n.push(s(e,r++))}))):a(e,!1,n.push,n),new this(n))}})}},function(e,t,n){"use strict";n.r(t),n.d(t,"__extends",(function(){return i})),n.d(t,"__assign",(function(){return o})),n.d(t,"__rest",(function(){return a})),n.d(t,"__decorate",(function(){return s})),n.d(t,"__param",(function(){return u})),n.d(t,"__metadata",(function(){return c})),n.d(t,"__awaiter",(function(){return l})),n.d(t,"__generator",(function(){return f})),n.d(t,"__exportStar",(function(){return h})),n.d(t,"__values",(function(){return p})),n.d(t,"__read",(function(){return d})),n.d(t,"__spread",(function(){return v})),n.d(t,"__spreadArrays",(function(){return y})),n.d(t,"__await",(function(){return g})),n.d(t,"__asyncGenerator",(function(){return m})),n.d(t,"__asyncDelegator",(function(){return b})),n.d(t,"__asyncValues",(function(){return _})),n.d(t,"__makeTemplateObject",(function(){return w})),n.d(t,"__importStar",(function(){return E})),n.d(t,"__importDefault",(function(){return S}));
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
var r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)};function i(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}var o=function(){return(o=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e}).apply(this,arguments)};function a(e,t){var n={};for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.indexOf(r)<0&&(n[r]=e[r]);if(null!=e&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(r=Object.getOwnPropertySymbols(e);i<r.length;i++)t.indexOf(r[i])<0&&Object.prototype.propertyIsEnumerable.call(e,r[i])&&(n[r[i]]=e[r[i]])}return n}function s(e,t,n,r){var i,o=arguments.length,a=o<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,t,n,r);else for(var s=e.length-1;s>=0;s--)(i=e[s])&&(a=(o<3?i(a):o>3?i(t,n,a):i(t,n))||a);return o>3&&a&&Object.defineProperty(t,n,a),a}function u(e,t){return function(n,r){t(n,r,e)}}function c(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}function l(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){e.done?i(e.value):new n((function(t){t(e.value)})).then(a,s)}u((r=r.apply(e,t||[])).next())}))}function f(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}function h(e,t){for(var n in e)t.hasOwnProperty(n)||(t[n]=e[n])}function p(e){var t="function"==typeof Symbol&&e[Symbol.iterator],n=0;return t?t.call(e):{next:function(){return e&&n>=e.length&&(e=void 0),{value:e&&e[n++],done:!e}}}}function d(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,i,o=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=o.next()).done;)a.push(r.value)}catch(e){i={error:e}}finally{try{r&&!r.done&&(n=o.return)&&n.call(o)}finally{if(i)throw i.error}}return a}function v(){for(var e=[],t=0;t<arguments.length;t++)e=e.concat(d(arguments[t]));return e}function y(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}function g(e){return this instanceof g?(this.v=e,this):new g(e)}function m(e,t,n){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var r,i=n.apply(e,t||[]),o=[];return r={},a("next"),a("throw"),a("return"),r[Symbol.asyncIterator]=function(){return this},r;function a(e){i[e]&&(r[e]=function(t){return new Promise((function(n,r){o.push([e,t,n,r])>1||s(e,t)}))})}function s(e,t){try{(n=i[e](t)).value instanceof g?Promise.resolve(n.value.v).then(u,c):l(o[0][2],n)}catch(e){l(o[0][3],e)}var n}function u(e){s("next",e)}function c(e){s("throw",e)}function l(e,t){e(t),o.shift(),o.length&&s(o[0][0],o[0][1])}}function b(e){var t,n;return t={},r("next"),r("throw",(function(e){throw e})),r("return"),t[Symbol.iterator]=function(){return this},t;function r(r,i){t[r]=e[r]?function(t){return(n=!n)?{value:g(e[r](t)),done:"return"===r}:i?i(t):t}:i}}function _(e){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var t,n=e[Symbol.asyncIterator];return n?n.call(e):(e=p(e),t={},r("next"),r("throw"),r("return"),t[Symbol.asyncIterator]=function(){return this},t);function r(n){t[n]=e[n]&&function(t){return new Promise((function(r,i){(function(e,t,n,r){Promise.resolve(r).then((function(t){e({value:t,done:n})}),t)})(r,i,(t=e[n](t)).done,t.value)}))}}}function w(e,t){return Object.defineProperty?Object.defineProperty(e,"raw",{value:t}):e.raw=t,e}function E(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function S(e){return e&&e.__esModule?e:{default:e}}},function(e,t,n){"use strict";e.exports=n(367)},,function(e,t,n){var r=n(6),i=n(4).document,o=r(i)&&r(i.createElement);e.exports=function(e){return o?i.createElement(e):{}}},function(e,t,n){var r=n(4),i=n(25),o=n(37),a=n(116),s=n(11).f;e.exports=function(e){var t=i.Symbol||(i.Symbol=o?{}:r.Symbol||{});"_"==e.charAt(0)||e in t||s(t,e,{value:a.f(e)})}},function(e,t,n){var r=n(56)("keys"),i=n(41);e.exports=function(e){return r[e]||(r[e]=i(e))}},function(e,t){e.exports="constructor,hasOwnProperty,isPrototypeOf,propertyIsEnumerable,toLocaleString,toString,valueOf".split(",")},function(e,t,n){var r=n(4).document;e.exports=r&&r.documentElement},function(e,t,n){var r=n(6),i=n(3),o=function(e,t){if(i(e),!r(t)&&null!==t)throw TypeError(t+": can't set as prototype!")};e.exports={set:Object.setPrototypeOf||("__proto__"in{}?function(e,t,r){try{(r=n(26)(Function.call,n(22).f(Object.prototype,"__proto__").set,2))(e,[]),t=!(e instanceof Array)}catch(e){t=!0}return function(e,n){return o(e,n),t?e.__proto__=n:r(e,n),e}}({},!1):void 0),check:o}},function(e,t){e.exports="\t\n\v\f\r   ᠎             　\u2028\u2029\ufeff"},function(e,t,n){var r=n(6),i=n(86).set;e.exports=function(e,t,n){var o,a=t.constructor;return a!==n&&"function"==typeof a&&(o=a.prototype)!==n.prototype&&r(o)&&i&&i(e,o),e}},function(e,t,n){"use strict";var r=n(28),i=n(31);e.exports=function(e){var t=String(i(this)),n="",o=r(e);if(o<0||o==1/0)throw RangeError("Count can't be negative");for(;o>0;(o>>>=1)&&(t+=t))1&o&&(n+=t);return n}},function(e,t){e.exports=Math.sign||function(e){return 0==(e=+e)||e!=e?e:e<0?-1:1}},function(e,t){var n=Math.expm1;e.exports=!n||n(10)>22025.465794806718||n(10)<22025.465794806718||-2e-17!=n(-2e-17)?function(e){return 0==(e=+e)?e:e>-1e-6&&e<1e-6?e+e*e/2:Math.exp(e)-1}:n},function(e,t,n){"use strict";var r=n(37),i=n(0),o=n(16),a=n(15),s=n(55),u=n(93),c=n(52),l=n(23),f=n(8)("iterator"),h=!([].keys&&"next"in[].keys()),p=function(){return this};e.exports=function(e,t,n,d,v,y,g){u(n,t,d);var m,b,_,w=function(e){if(!h&&e in T)return T[e];switch(e){case"keys":case"values":return function(){return new n(this,e)}}return function(){return new n(this,e)}},E=t+" Iterator",S="values"==v,C=!1,T=e.prototype,k=T[f]||T["@@iterator"]||v&&T[v],x=k||w(v),I=v?S?w("entries"):x:void 0,P="Array"==t&&T.entries||k;if(P&&(_=l(P.call(new e)))!==Object.prototype&&_.next&&(c(_,E,!0),r||"function"==typeof _[f]||a(_,f,p)),S&&k&&"values"!==k.name&&(C=!0,x=function(){return k.call(this)}),r&&!g||!h&&!C&&T[f]||a(T,f,x),s[t]=x,s[E]=p,v)if(m={values:S?x:w("values"),keys:y?x:w("keys"),entries:I},g)for(b in m)b in T||o(T,b,m[b]);else i(i.P+i.F*(h||C),t,m);return m}},function(e,t,n){"use strict";var r=n(44),i=n(40),o=n(52),a={};n(15)(a,n(8)("iterator"),(function(){return this})),e.exports=function(e,t,n){e.prototype=r(a,{next:i(1,n)}),o(e,t+" Iterator")}},function(e,t,n){var r=n(68),i=n(31);e.exports=function(e,t,n){if(r(t))throw TypeError("String#"+n+" doesn't accept regex!");return String(i(e))}},function(e,t,n){var r=n(8)("match");e.exports=function(e){var t=/./;try{"/./"[e](t)}catch(n){try{return t[r]=!1,!"/./"[e](t)}catch(e){}}return!0}},function(e,t,n){var r=n(55),i=n(8)("iterator"),o=Array.prototype;e.exports=function(e){return void 0!==e&&(r.Array===e||o[i]===e)}},function(e,t,n){"use strict";var r=n(11),i=n(40);e.exports=function(e,t,n){t in e?r.f(e,t,i(0,n)):e[t]=n}},function(e,t,n){var r=n(53),i=n(8)("iterator"),o=n(55);e.exports=n(25).getIteratorMethod=function(e){if(null!=e)return e[i]||e["@@iterator"]||o[r(e)]}},function(e,t,n){var r=n(250);e.exports=function(e,t){return new(r(e))(t)}},function(e,t,n){"use strict";var r=n(12),i=n(43),o=n(9);e.exports=function(e){for(var t=r(this),n=o(t.length),a=arguments.length,s=i(a>1?arguments[1]:void 0,n),u=a>2?arguments[2]:void 0,c=void 0===u?n:i(u,n);c>s;)t[s++]=e;return t}},function(e,t,n){"use strict";var r=n(39),i=n(133),o=n(55),a=n(21);e.exports=n(92)(Array,"Array",(function(e,t){this._t=a(e),this._i=0,this._k=t}),(function(){var e=this._t,t=this._k,n=this._i++;return!e||n>=e.length?(this._t=void 0,i(1)):i(0,"keys"==t?n:"values"==t?e[n]:[n,e[n]])}),"values"),o.Arguments=o.Array,r("keys"),r("values"),r("entries")},function(e,t,n){"use strict";var r,i,o=n(59),a=RegExp.prototype.exec,s=String.prototype.replace,u=a,c=(r=/a/,i=/b*/g,a.call(r,"a"),a.call(i,"a"),0!==r.lastIndex||0!==i.lastIndex),l=void 0!==/()??/.exec("")[1];(c||l)&&(u=function(e){var t,n,r,i,u=this;return l&&(n=new RegExp("^"+u.source+"$(?!\\s)",o.call(u))),c&&(t=u.lastIndex),r=a.call(u,e),c&&r&&(u.lastIndex=u.global?r.index+r[0].length:t),l&&r&&r.length>1&&s.call(r[0],n,(function(){for(i=1;i<arguments.length-2;i++)void 0===arguments[i]&&(r[i]=void 0)})),r}),e.exports=u},function(e,t,n){"use strict";var r=n(67)(!0);e.exports=function(e,t,n){return t+(n?r(e,t).length:1)}},function(e,t,n){var r,i,o,a=n(26),s=n(123),u=n(85),c=n(81),l=n(4),f=l.process,h=l.setImmediate,p=l.clearImmediate,d=l.MessageChannel,v=l.Dispatch,y=0,g={},m=function(){var e=+this;if(g.hasOwnProperty(e)){var t=g[e];delete g[e],t()}},b=function(e){m.call(e.data)};h&&p||(h=function(e){for(var t=[],n=1;arguments.length>n;)t.push(arguments[n++]);return g[++y]=function(){s("function"==typeof e?e:Function(e),t)},r(y),y},p=function(e){delete g[e]},"process"==n(27)(f)?r=function(e){f.nextTick(a(m,e,1))}:v&&v.now?r=function(e){v.now(a(m,e,1))}:d?(o=(i=new d).port2,i.port1.onmessage=b,r=a(o.postMessage,o,1)):l.addEventListener&&"function"==typeof postMessage&&!l.importScripts?(r=function(e){l.postMessage(e+"","*")},l.addEventListener("message",b,!1)):r="onreadystatechange"in c("script")?function(e){u.appendChild(c("script")).onreadystatechange=function(){u.removeChild(this),m.call(e)}}:function(e){setTimeout(a(m,e,1),0)}),e.exports={set:h,clear:p}},function(e,t,n){var r=n(4),i=n(104).set,o=r.MutationObserver||r.WebKitMutationObserver,a=r.process,s=r.Promise,u="process"==n(27)(a);e.exports=function(){var e,t,n,c=function(){var r,i;for(u&&(r=a.domain)&&r.exit();e;){i=e.fn,e=e.next;try{i()}catch(r){throw e?n():t=void 0,r}}t=void 0,r&&r.enter()};if(u)n=function(){a.nextTick(c)};else if(!o||r.navigator&&r.navigator.standalone)if(s&&s.resolve){var l=s.resolve(void 0);n=function(){l.then(c)}}else n=function(){i.call(r,c)};else{var f=!0,h=document.createTextNode("");new o(c).observe(h,{characterData:!0}),n=function(){h.data=f=!f}}return function(r){var i={fn:r,next:void 0};t&&(t.next=i),e||(e=i,n()),t=i}}},function(e,t,n){"use strict";var r=n(13);function i(e){var t,n;this.promise=new e((function(e,r){if(void 0!==t||void 0!==n)throw TypeError("Bad Promise constructor");t=e,n=r})),this.resolve=r(t),this.reject=r(n)}e.exports.f=function(e){return new i(e)}},function(e,t,n){"use strict";var r=n(4),i=n(10),o=n(37),a=n(74),s=n(15),u=n(49),c=n(5),l=n(47),f=n(28),h=n(9),p=n(143),d=n(45).f,v=n(11).f,y=n(100),g=n(52),m=r.ArrayBuffer,b=r.DataView,_=r.Math,w=r.RangeError,E=r.Infinity,S=m,C=_.abs,T=_.pow,k=_.floor,x=_.log,I=_.LN2,P=i?"_b":"buffer",O=i?"_l":"byteLength",N=i?"_o":"byteOffset";function A(e,t,n){var r,i,o,a=new Array(n),s=8*n-t-1,u=(1<<s)-1,c=u>>1,l=23===t?T(2,-24)-T(2,-77):0,f=0,h=e<0||0===e&&1/e<0?1:0;for((e=C(e))!=e||e===E?(i=e!=e?1:0,r=u):(r=k(x(e)/I),e*(o=T(2,-r))<1&&(r--,o*=2),(e+=r+c>=1?l/o:l*T(2,1-c))*o>=2&&(r++,o/=2),r+c>=u?(i=0,r=u):r+c>=1?(i=(e*o-1)*T(2,t),r+=c):(i=e*T(2,c-1)*T(2,t),r=0));t>=8;a[f++]=255&i,i/=256,t-=8);for(r=r<<t|i,s+=t;s>0;a[f++]=255&r,r/=256,s-=8);return a[--f]|=128*h,a}function R(e,t,n){var r,i=8*n-t-1,o=(1<<i)-1,a=o>>1,s=i-7,u=n-1,c=e[u--],l=127&c;for(c>>=7;s>0;l=256*l+e[u],u--,s-=8);for(r=l&(1<<-s)-1,l>>=-s,s+=t;s>0;r=256*r+e[u],u--,s-=8);if(0===l)l=1-a;else{if(l===o)return r?NaN:c?-E:E;r+=T(2,t),l-=a}return(c?-1:1)*r*T(2,l-t)}function D(e){return e[3]<<24|e[2]<<16|e[1]<<8|e[0]}function M(e){return[255&e]}function L(e){return[255&e,e>>8&255]}function F(e){return[255&e,e>>8&255,e>>16&255,e>>24&255]}function j(e){return A(e,52,8)}function U(e){return A(e,23,4)}function W(e,t,n){v(e.prototype,t,{get:function(){return this[n]}})}function V(e,t,n,r){var i=p(+n);if(i+t>e[O])throw w("Wrong index!");var o=e[P]._b,a=i+e[N],s=o.slice(a,a+t);return r?s:s.reverse()}function q(e,t,n,r,i,o){var a=p(+n);if(a+t>e[O])throw w("Wrong index!");for(var s=e[P]._b,u=a+e[N],c=r(+i),l=0;l<t;l++)s[u+l]=c[o?l:t-l-1]}if(a.ABV){if(!c((function(){m(1)}))||!c((function(){new m(-1)}))||c((function(){return new m,new m(1.5),new m(NaN),"ArrayBuffer"!=m.name}))){for(var B,H=(m=function(e){return l(this,m),new S(p(e))}).prototype=S.prototype,z=d(S),Q=0;z.length>Q;)(B=z[Q++])in m||s(m,B,S[B]);o||(H.constructor=m)}var K=new b(new m(2)),G=b.prototype.setInt8;K.setInt8(0,2147483648),K.setInt8(1,2147483649),!K.getInt8(0)&&K.getInt8(1)||u(b.prototype,{setInt8:function(e,t){G.call(this,e,t<<24>>24)},setUint8:function(e,t){G.call(this,e,t<<24>>24)}},!0)}else m=function(e){l(this,m,"ArrayBuffer");var t=p(e);this._b=y.call(new Array(t),0),this[O]=t},b=function(e,t,n){l(this,b,"DataView"),l(e,m,"DataView");var r=e[O],i=f(t);if(i<0||i>r)throw w("Wrong offset!");if(i+(n=void 0===n?r-i:h(n))>r)throw w("Wrong length!");this[P]=e,this[N]=i,this[O]=n},i&&(W(m,"byteLength","_l"),W(b,"buffer","_b"),W(b,"byteLength","_l"),W(b,"byteOffset","_o")),u(b.prototype,{getInt8:function(e){return V(this,1,e)[0]<<24>>24},getUint8:function(e){return V(this,1,e)[0]},getInt16:function(e){var t=V(this,2,e,arguments[1]);return(t[1]<<8|t[0])<<16>>16},getUint16:function(e){var t=V(this,2,e,arguments[1]);return t[1]<<8|t[0]},getInt32:function(e){return D(V(this,4,e,arguments[1]))},getUint32:function(e){return D(V(this,4,e,arguments[1]))>>>0},getFloat32:function(e){return R(V(this,4,e,arguments[1]),23,4)},getFloat64:function(e){return R(V(this,8,e,arguments[1]),52,8)},setInt8:function(e,t){q(this,1,e,M,t)},setUint8:function(e,t){q(this,1,e,M,t)},setInt16:function(e,t){q(this,2,e,L,t,arguments[2])},setUint16:function(e,t){q(this,2,e,L,t,arguments[2])},setInt32:function(e,t){q(this,4,e,F,t,arguments[2])},setUint32:function(e,t){q(this,4,e,F,t,arguments[2])},setFloat32:function(e,t){q(this,4,e,U,t,arguments[2])},setFloat64:function(e,t){q(this,8,e,j,t,arguments[2])}});g(m,"ArrayBuffer"),g(b,"DataView"),s(b.prototype,a.VIEW,!0),t.ArrayBuffer=m,t.DataView=b},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(362)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.startLogout=t.logout=t.startLogin=t.login=void 0;var r=n(152);t.login=function(e){return{type:"LOGIN",uid:e}},t.startLogin=function(){return function(){return r.firebase.auth().signInWithPopup(r.googleAuthProvider)}},t.logout=function(){return{type:"LOGOUT"}},t.startLogout=function(){return function(){return r.firebase.auth().signOut()}}},function(e,t,n){"use strict";(function(e){Object.defineProperty(t,"__esModule",{value:!0});var r=n(78),i={NODE_CLIENT:!1,NODE_ADMIN:!1,SDK_VERSION:"${JSCORE_VERSION}"},o=function(e,t){if(!e)throw a(t)},a=function(e){return new Error("Firebase Database ("+i.SDK_VERSION+") INTERNAL ASSERT FAILED: "+e)},s=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):55296==(64512&i)&&r+1<e.length&&56320==(64512&e.charCodeAt(r+1))?(i=65536+((1023&i)<<10)+(1023&e.charCodeAt(++r)),t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},u={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(e,t){if(!Array.isArray(e))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=t?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],i=0;i<e.length;i+=3){var o=e[i],a=i+1<e.length,s=a?e[i+1]:0,u=i+2<e.length,c=u?e[i+2]:0,l=o>>2,f=(3&o)<<4|s>>4,h=(15&s)<<2|c>>6,p=63&c;u||(p=64,a||(h=64)),r.push(n[l],n[f],n[h],n[p])}return r.join("")},encodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?btoa(e):this.encodeByteArray(s(e),t)},decodeString:function(e,t){return this.HAS_NATIVE_SUPPORT&&!t?atob(e):function(e){for(var t=[],n=0,r=0;n<e.length;){var i=e[n++];if(i<128)t[r++]=String.fromCharCode(i);else if(i>191&&i<224){var o=e[n++];t[r++]=String.fromCharCode((31&i)<<6|63&o)}else if(i>239&&i<365){var a=((7&i)<<18|(63&(o=e[n++]))<<12|(63&(s=e[n++]))<<6|63&e[n++])-65536;t[r++]=String.fromCharCode(55296+(a>>10)),t[r++]=String.fromCharCode(56320+(1023&a))}else{o=e[n++];var s=e[n++];t[r++]=String.fromCharCode((15&i)<<12|(63&o)<<6|63&s)}}return t.join("")}(this.decodeStringToByteArray(e,t))},decodeStringToByteArray:function(e,t){this.init_();for(var n=t?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],i=0;i<e.length;){var o=n[e.charAt(i++)],a=i<e.length?n[e.charAt(i)]:0,s=++i<e.length?n[e.charAt(i)]:64,u=++i<e.length?n[e.charAt(i)]:64;if(++i,null==o||null==a||null==s||null==u)throw Error();var c=o<<2|a>>4;if(r.push(c),64!==s){var l=a<<4&240|s>>2;if(r.push(l),64!==u){var f=s<<6&192|u;r.push(f)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var e=0;e<this.ENCODED_VALS.length;e++)this.byteToCharMap_[e]=this.ENCODED_VALS.charAt(e),this.charToByteMap_[this.byteToCharMap_[e]]=e,this.byteToCharMapWebSafe_[e]=this.ENCODED_VALS_WEBSAFE.charAt(e),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]]=e,e>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)]=e,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)]=e)}}},c=function(e){try{return u.decodeString(e,!0)}catch(e){console.error("base64Decode failed: ",e)}return null};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function l(e,t){if(!(t instanceof Object))return t;switch(t.constructor){case Date:return new Date(t.getTime());case Object:void 0===e&&(e={});break;case Array:e=[];break;default:return t}for(var n in t)t.hasOwnProperty(n)&&(e[n]=l(e[n],t[n]));return e}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var f=function(){function e(){var e=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(t,n){e.resolve=t,e.reject=n}))}return e.prototype.wrapCallback=function(e){var t=this;return function(n,r){n?t.reject(n):t.resolve(r),"function"==typeof e&&(t.promise.catch((function(){})),1===e.length?e(n):e(n,r))}},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function h(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var p=function(e){function t(n,r){var i=e.call(this,r)||this;return i.code=n,i.name="FirebaseError",Object.setPrototypeOf(i,t.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,d.prototype.create),i}return r.__extends(t,e),t}(Error),d=function(){function e(e,t,n){this.service=e,this.serviceName=t,this.errors=n}return e.prototype.create=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];for(var r=t[0]||{},i=this.service+"/"+e,o=this.errors[e],a=o?v(o,r):"Error",s=this.serviceName+": "+a+" ("+i+").",u=new p(i,s),c=0,l=Object.keys(r);c<l.length;c++){var f=l[c];"_"!==f.slice(-1)&&(f in u&&console.warn('Overwriting FirebaseError base field "'+f+'" can cause unexpected behavior.'),u[f]=r[f])}return u},e}();function v(e,t){return e.replace(y,(function(e,n){var r=t[n];return null!=r?r.toString():"<"+n+"?>"}))}var y=/\{\$([^}]+)}/g;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function g(e){return JSON.parse(e)}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var m=function(e){var t={},n={},r={},i="";try{var o=e.split(".");t=g(c(o[0])||""),n=g(c(o[1])||""),i=o[2],r=n.d||{},delete n.d}catch(e){}return{header:t,claims:n,data:r,signature:i}};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var b=function(){function e(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var e=1;e<this.blockSize;++e)this.pad_[e]=0;this.reset()}return e.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},e.prototype.compress_=function(e,t){t||(t=0);var n=this.W_;if("string"==typeof e)for(var r=0;r<16;r++)n[r]=e.charCodeAt(t)<<24|e.charCodeAt(t+1)<<16|e.charCodeAt(t+2)<<8|e.charCodeAt(t+3),t+=4;else for(r=0;r<16;r++)n[r]=e[t]<<24|e[t+1]<<16|e[t+2]<<8|e[t+3],t+=4;for(r=16;r<80;r++){var i=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(i<<1|i>>>31)}var o,a,s=this.chain_[0],u=this.chain_[1],c=this.chain_[2],l=this.chain_[3],f=this.chain_[4];for(r=0;r<80;r++){r<40?r<20?(o=l^u&(c^l),a=1518500249):(o=u^c^l,a=1859775393):r<60?(o=u&c|l&(u|c),a=2400959708):(o=u^c^l,a=3395469782);i=(s<<5|s>>>27)+o+f+a+n[r]&4294967295;f=l,l=c,c=4294967295&(u<<30|u>>>2),u=s,s=i}this.chain_[0]=this.chain_[0]+s&4294967295,this.chain_[1]=this.chain_[1]+u&4294967295,this.chain_[2]=this.chain_[2]+c&4294967295,this.chain_[3]=this.chain_[3]+l&4294967295,this.chain_[4]=this.chain_[4]+f&4294967295},e.prototype.update=function(e,t){if(null!=e){void 0===t&&(t=e.length);for(var n=t-this.blockSize,r=0,i=this.buf_,o=this.inbuf_;r<t;){if(0===o)for(;r<=n;)this.compress_(e,r),r+=this.blockSize;if("string"==typeof e){for(;r<t;)if(i[o]=e.charCodeAt(r),++r,++o===this.blockSize){this.compress_(i),o=0;break}}else for(;r<t;)if(i[o]=e[r],++r,++o===this.blockSize){this.compress_(i),o=0;break}}this.inbuf_=o,this.total_+=t}},e.prototype.digest=function(){var e=[],t=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&t,t/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var i=24;i>=0;i-=8)e[r]=this.chain_[n]>>i&255,++r;return e},e}();var _=function(){function e(e,t){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=t,this.task.then((function(){e(n)})).catch((function(e){n.error(e)}))}return e.prototype.next=function(e){this.forEachObserver((function(t){t.next(e)}))},e.prototype.error=function(e){this.forEachObserver((function(t){t.error(e)})),this.close(e)},e.prototype.complete=function(){this.forEachObserver((function(e){e.complete()})),this.close()},e.prototype.subscribe=function(e,t,n){var r,i=this;if(void 0===e&&void 0===t&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(e,t){if("object"!=typeof e||null===e)return!1;for(var n=0,r=t;n<r.length;n++){var i=r[n];if(i in e&&"function"==typeof e[i])return!0}return!1}(e,["next","error","complete"])?e:{next:e,error:t,complete:n}).next&&(r.next=w),void 0===r.error&&(r.error=w),void 0===r.complete&&(r.complete=w);var o=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{i.finalError?r.error(i.finalError):r.complete()}catch(e){}})),this.observers.push(r),o},e.prototype.unsubscribeOne=function(e){void 0!==this.observers&&void 0!==this.observers[e]&&(delete this.observers[e],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},e.prototype.forEachObserver=function(e){if(!this.finalized)for(var t=0;t<this.observers.length;t++)this.sendOne(t,e)},e.prototype.sendOne=function(e,t){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[e])try{t(n.observers[e])}catch(e){"undefined"!=typeof console&&console.error&&console.error(e)}}))},e.prototype.close=function(e){var t=this;this.finalized||(this.finalized=!0,void 0!==e&&(this.finalError=e),this.task.then((function(){t.observers=void 0,t.onNoObservers=void 0})))},e}();function w(){}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */function E(e,t,n){var r="";switch(t){case 1:r=n?"first":"First";break;case 2:r=n?"second":"Second";break;case 3:r=n?"third":"Third";break;case 4:r=n?"fourth":"Fourth";break;default:throw new Error("errorPrefix called with argumentNumber > 4.  Need to update it?")}var i=e+" failed: ";return i+=r+" argument "}t.CONSTANTS=i,t.Deferred=f,t.ErrorFactory=d,t.FirebaseError=p,t.Sha1=b,t.assert=o,t.assertionError=a,t.async=function(e,t){return function(){for(var n=[],r=0;r<arguments.length;r++)n[r]=arguments[r];Promise.resolve(!0).then((function(){e.apply(void 0,n)})).catch((function(e){t&&t(e)}))}},t.base64=u,t.base64Decode=c,t.base64Encode=function(e){var t=s(e);return u.encodeByteArray(t,!0)},t.contains=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.createSubscribe=function(e,t){var n=new _(e,t);return n.subscribe.bind(n)},t.decode=m,t.deepCopy=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){return l(void 0,e)},t.deepExtend=l,t.errorPrefix=E,t.getUA=h,t.isAdmin=function(e){var t=m(e).claims;return"object"==typeof t&&!0===t.admin},t.isBrowser=function(){return"object"==typeof self&&self.self===self},t.isElectron=function(){return h().indexOf("Electron/")>=0},t.isEmpty=function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t))return!1;return!0},t.isIE=function(){var e=h();return e.indexOf("MSIE ")>=0||e.indexOf("Trident/")>=0},t.isMobileCordova=function(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(h())},t.isNode=function(){try{return"[object process]"===Object.prototype.toString.call(e.process)}catch(e){return!1}},t.isNodeSdk=function(){return!0===i.NODE_CLIENT||!0===i.NODE_ADMIN},t.isReactNative=function(){return"object"==typeof navigator&&"ReactNative"===navigator.product},t.isUWP=function(){return h().indexOf("MSAppHost/")>=0},t.isValidFormat=function(e){var t=m(e).claims;return!!t&&"object"==typeof t&&t.hasOwnProperty("iat")},t.isValidTimestamp=function(e){var t=m(e).claims,n=Math.floor((new Date).getTime()/1e3),r=0,i=0;return"object"==typeof t&&(t.hasOwnProperty("nbf")?r=t.nbf:t.hasOwnProperty("iat")&&(r=t.iat),i=t.hasOwnProperty("exp")?t.exp:r+86400),!!n&&!!r&&!!i&&n>=r&&n<=i},t.issuedAtTime=function(e){var t=m(e).claims;return"object"==typeof t&&t.hasOwnProperty("iat")?t.iat:null},t.jsonEval=g,t.map=function(e,t,n){var r={};for(var i in e)Object.prototype.hasOwnProperty.call(e,i)&&(r[i]=t.call(n,e[i],i,e));return r}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,t.querystring=function(e){for(var t=[],n=function(e,n){Array.isArray(n)?n.forEach((function(n){t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))})):t.push(encodeURIComponent(e)+"="+encodeURIComponent(n))},r=0,i=Object.entries(e);r<i.length;r++){var o=i[r];n(o[0],o[1])}return t.length?"&"+t.join("&"):""},t.querystringDecode=function(e){var t={};return e.replace(/^\?/,"").split("&").forEach((function(e){if(e){var n=e.split("=");t[n[0]]=n[1]}})),t},t.safeGet=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0},t.stringLength=function(e){for(var t=0,n=0;n<e.length;n++){var r=e.charCodeAt(n);r<128?t++:r<2048?t+=2:r>=55296&&r<=56319?(t+=4,n++):t+=3}return t},t.stringToByteArray=function(e){for(var t=[],n=0,r=0;r<e.length;r++){var i=e.charCodeAt(r);if(i>=55296&&i<=56319){var a=i-55296;r++,o(r<e.length,"Surrogate pair missing trail surrogate."),i=65536+(a<<10)+(e.charCodeAt(r)-56320)}i<128?t[n++]=i:i<2048?(t[n++]=i>>6|192,t[n++]=63&i|128):i<65536?(t[n++]=i>>12|224,t[n++]=i>>6&63|128,t[n++]=63&i|128):(t[n++]=i>>18|240,t[n++]=i>>12&63|128,t[n++]=i>>6&63|128,t[n++]=63&i|128)}return t},t.stringify=function(e){return JSON.stringify(e)},t.validateArgCount=function(e,t,n,r){var i;if(r<t?i="at least "+t:r>n&&(i=0===n?"none":"no more than "+n),i)throw new Error(e+" failed: Was called with "+r+(1===r?" argument.":" arguments.")+" Expects "+i+".")},t.validateCallback=function(e,t,n,r){if((!r||n)&&"function"!=typeof n)throw new Error(E(e,t,r)+"must be a valid function.")},t.validateContextObject=function(e,t,n,r){if((!r||n)&&("object"!=typeof n||null===n))throw new Error(E(e,t,r)+"must be a valid context object.")}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */,t.validateNamespace=function(e,t,n,r){if((!r||n)&&"string"!=typeof n)throw new Error(E(e,t,r)+"must be a valid firebase namespace.")}}).call(this,n(51))},function(e,t,n){"use strict";n.r(t),n.d(t,"__DO_NOT_USE__ActionTypes",(function(){return o})),n.d(t,"applyMiddleware",(function(){return y})),n.d(t,"bindActionCreators",(function(){return f})),n.d(t,"combineReducers",(function(){return c})),n.d(t,"compose",(function(){return v})),n.d(t,"createStore",(function(){return s}));var r=n(112),i=function(){return Math.random().toString(36).substring(7).split("").join(".")},o={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function s(e,t,n){var i;if("function"==typeof t&&"function"==typeof n||"function"==typeof n&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof t&&void 0===n&&(n=t,t=void 0),void 0!==n){if("function"!=typeof n)throw new Error("Expected the enhancer to be a function.");return n(s)(e,t)}if("function"!=typeof e)throw new Error("Expected the reducer to be a function.");var u=e,c=t,l=[],f=l,h=!1;function p(){f===l&&(f=l.slice())}function d(){if(h)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return c}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(h)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return p(),f.push(e),function(){if(t){if(h)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,p();var n=f.indexOf(e);f.splice(n,1),l=null}}}function y(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(h)throw new Error("Reducers may not dispatch actions.");try{h=!0,c=u(c,e)}finally{h=!1}for(var t=l=f,n=0;n<t.length;n++){(0,t[n])()}return e}function g(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");u=e,y({type:o.REPLACE})}function m(){var e,t=v;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(d())}return n(),{unsubscribe:t(n)}}})[r.a]=function(){return this},e}return y({type:o.INIT}),(i={dispatch:y,subscribe:v,getState:d,replaceReducer:g})[r.a]=m,i}function u(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function c(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var i=t[r];0,"function"==typeof e[i]&&(n[i]=e[i])}var a,s=Object.keys(n);try{!function(e){Object.keys(e).forEach((function(t){var n=e[t];if(void 0===n(void 0,{type:o.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:o.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+o.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')}))}(n)}catch(e){a=e}return function(e,t){if(void 0===e&&(e={}),a)throw a;for(var r=!1,i={},o=0;o<s.length;o++){var c=s[o],l=n[c],f=e[c],h=l(f,t);if(void 0===h){var p=u(c,t);throw new Error(p)}i[c]=h,r=r||h!==f}return(r=r||s.length!==Object.keys(e).length)?i:e}}function l(e,t){return function(){return t(e.apply(this,arguments))}}function f(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');var n={};for(var r in e){var i=e[r];"function"==typeof i&&(n[r]=l(i,t))}return n}function h(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function p(e,t){var n=Object.keys(e);return Object.getOwnPropertySymbols&&n.push.apply(n,Object.getOwnPropertySymbols(e)),t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?p(n,!0).forEach((function(t){h(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):p(n).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function v(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce((function(e,t){return function(){return e(t.apply(void 0,arguments))}}))}function y(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},i={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},o=t.map((function(e){return e(i)}));return d({},n,{dispatch:r=v.apply(void 0,o)(n.dispatch)})}}}},function(e,t,n){"use strict";(function(e,r){var i,o=n(155);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(51),n(368)(e))},function(e,t){e.exports=function(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}},function(e,t,n){var r=n(370);e.exports=p,e.exports.parse=o,e.exports.compile=function(e,t){return s(o(e,t),t)},e.exports.tokensToFunction=s,e.exports.tokensToRegExp=h;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,s="",l=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],h=n[1],p=n.index;if(s+=e.slice(a,p),a=p+f.length,h)s+=h[1];else{var d=e[a],v=n[2],y=n[3],g=n[4],m=n[5],b=n[6],_=n[7];s&&(r.push(s),s="");var w=null!=v&&null!=d&&d!==v,E="+"===b||"*"===b,S="?"===b||"*"===b,C=n[2]||l,T=g||m;r.push({name:y||o++,prefix:v||"",delimiter:C,optional:S,repeat:E,partial:w,asterisk:!!_,pattern:T?c(T):_?".*":"[^"+u(C)+"]+?"})}}return a<e.length&&(s+=e.substr(a)),s&&r.push(s),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function s(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var o="",s=t||{},u=(i||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var l=e[c];if("string"!=typeof l){var f,h=s[l.name];if(null==h){if(l.optional){l.partial&&(o+=l.prefix);continue}throw new TypeError('Expected "'+l.name+'" to be defined')}if(r(h)){if(!l.repeat)throw new TypeError('Expected "'+l.name+'" to not repeat, but received `'+JSON.stringify(h)+"`");if(0===h.length){if(l.optional)continue;throw new TypeError('Expected "'+l.name+'" to not be empty')}for(var p=0;p<h.length;p++){if(f=u(h[p]),!n[c].test(f))throw new TypeError('Expected all "'+l.name+'" to match "'+l.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?l.prefix:l.delimiter)+f}}else{if(f=l.asterisk?encodeURI(h).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):u(h),!n[c].test(f))throw new TypeError('Expected "'+l.name+'" to match "'+l.pattern+'", but received "'+f+'"');o+=l.prefix+f}}else o+=l}return o}}function u(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function l(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function h(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",s=0;s<e.length;s++){var c=e[s];if("string"==typeof c)a+=u(c);else{var h=u(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+h+p+")*"),a+=p=c.optional?c.partial?h+"("+p+")?":"(?:"+h+"("+p+"))?":h+"("+p+")"}}var d=u(n.delimiter||"/"),v=a.slice(-d.length)===d;return i||(a=(v?a.slice(0,-d.length):a)+"(?:"+d+"(?=$))?"),a+=o?"$":i&&v?"":"(?="+d+"|$)",l(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return l(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(p(e[i],t,n).source);return l(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return h(o(e,n),t,n)}(e,t,n)}},function(e,t,n){e.exports=!n(10)&&!n(5)((function(){return 7!=Object.defineProperty(n(81)("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){t.f=n(8)},function(e,t,n){var r=n(20),i=n(21),o=n(64)(!1),a=n(83)("IE_PROTO");e.exports=function(e,t){var n,s=i(e),u=0,c=[];for(n in s)n!=a&&r(s,n)&&c.push(n);for(;t.length>u;)r(s,n=t[u++])&&(~o(c,n)||c.push(n));return c}},function(e,t,n){var r=n(11),i=n(3),o=n(42);e.exports=n(10)?Object.defineProperties:function(e,t){i(e);for(var n,a=o(t),s=a.length,u=0;s>u;)r.f(e,n=a[u++],t[n]);return e}},function(e,t,n){var r=n(21),i=n(45).f,o={}.toString,a="object"==typeof window&&window&&Object.getOwnPropertyNames?Object.getOwnPropertyNames(window):[];e.exports.f=function(e){return a&&"[object Window]"==o.call(e)?function(e){try{return i(e)}catch(e){return a.slice()}}(e):i(r(e))}},function(e,t,n){"use strict";var r=n(10),i=n(42),o=n(65),a=n(58),s=n(12),u=n(57),c=Object.assign;e.exports=!c||n(5)((function(){var e={},t={},n=Symbol(),r="abcdefghijklmnopqrst";return e[n]=7,r.split("").forEach((function(e){t[e]=e})),7!=c({},e)[n]||Object.keys(c({},t)).join("")!=r}))?function(e,t){for(var n=s(e),c=arguments.length,l=1,f=o.f,h=a.f;c>l;)for(var p,d=u(arguments[l++]),v=f?i(d).concat(f(d)):i(d),y=v.length,g=0;y>g;)p=v[g++],r&&!h.call(d,p)||(n[p]=d[p]);return n}:c},function(e,t){e.exports=Object.is||function(e,t){return e===t?0!==e||1/e==1/t:e!=e&&t!=t}},function(e,t,n){"use strict";var r=n(13),i=n(6),o=n(123),a=[].slice,s={},u=function(e,t,n){if(!(t in s)){for(var r=[],i=0;i<t;i++)r[i]="a["+i+"]";s[t]=Function("F,a","return new F("+r.join(",")+")")}return s[t](e,n)};e.exports=Function.bind||function(e){var t=r(this),n=a.call(arguments,1),s=function(){var r=n.concat(a.call(arguments));return this instanceof s?u(t,r.length,r):o(t,r,e)};return i(t.prototype)&&(s.prototype=t.prototype),s}},function(e,t){e.exports=function(e,t,n){var r=void 0===n;switch(t.length){case 0:return r?e():e.call(n);case 1:return r?e(t[0]):e.call(n,t[0]);case 2:return r?e(t[0],t[1]):e.call(n,t[0],t[1]);case 3:return r?e(t[0],t[1],t[2]):e.call(n,t[0],t[1],t[2]);case 4:return r?e(t[0],t[1],t[2],t[3]):e.call(n,t[0],t[1],t[2],t[3])}return e.apply(n,t)}},function(e,t,n){var r=n(4).parseInt,i=n(54).trim,o=n(87),a=/^[-+]?0[xX]/;e.exports=8!==r(o+"08")||22!==r(o+"0x16")?function(e,t){var n=i(String(e),3);return r(n,t>>>0||(a.test(n)?16:10))}:r},function(e,t,n){var r=n(4).parseFloat,i=n(54).trim;e.exports=1/r(n(87)+"-0")!=-1/0?function(e){var t=i(String(e),3),n=r(t);return 0===n&&"-"==t.charAt(0)?-0:n}:r},function(e,t,n){var r=n(27);e.exports=function(e,t){if("number"!=typeof e&&"Number"!=r(e))throw TypeError(t);return+e}},function(e,t,n){var r=n(6),i=Math.floor;e.exports=function(e){return!r(e)&&isFinite(e)&&i(e)===e}},function(e,t){e.exports=Math.log1p||function(e){return(e=+e)>-1e-8&&e<1e-8?e-e*e/2:Math.log(1+e)}},function(e,t,n){var r=n(90),i=Math.pow,o=i(2,-52),a=i(2,-23),s=i(2,127)*(2-a),u=i(2,-126);e.exports=Math.fround||function(e){var t,n,i=Math.abs(e),c=r(e);return i<u?c*(i/u/a+1/o-1/o)*u*a:(n=(t=(1+a/o)*i)-(t-i))>s||n!=n?c*(1/0):c*n}},function(e,t,n){var r=n(3);e.exports=function(e,t,n,i){try{return i?t(r(n)[0],n[1]):t(n)}catch(t){var o=e.return;throw void 0!==o&&r(o.call(e)),t}}},function(e,t,n){var r=n(13),i=n(12),o=n(57),a=n(9);e.exports=function(e,t,n,s,u){r(t);var c=i(e),l=o(c),f=a(c.length),h=u?f-1:0,p=u?-1:1;if(n<2)for(;;){if(h in l){s=l[h],h+=p;break}if(h+=p,u?h<0:f<=h)throw TypeError("Reduce of empty array with no initial value")}for(;u?h>=0:f>h;h+=p)h in l&&(s=t(s,l[h],h,c));return s}},function(e,t,n){"use strict";var r=n(12),i=n(43),o=n(9);e.exports=[].copyWithin||function(e,t){var n=r(this),a=o(n.length),s=i(e,a),u=i(t,a),c=arguments.length>2?arguments[2]:void 0,l=Math.min((void 0===c?a:i(c,a))-u,a-s),f=1;for(u<s&&s<u+l&&(f=-1,u+=l-1,s+=l-1);l-- >0;)u in n?n[s]=n[u]:delete n[s],s+=f,u+=f;return n}},function(e,t){e.exports=function(e,t){return{value:t,done:!!e}}},function(e,t,n){"use strict";var r=n(102);n(0)({target:"RegExp",proto:!0,forced:r!==/./.exec},{exec:r})},function(e,t,n){n(10)&&"g"!=/./g.flags&&n(11).f(RegExp.prototype,"flags",{configurable:!0,get:n(59)})},function(e,t){e.exports=function(e){try{return{e:!1,v:e()}}catch(e){return{e:!0,v:e}}}},function(e,t,n){var r=n(3),i=n(6),o=n(106);e.exports=function(e,t){if(r(e),i(t)&&t.constructor===e)return t;var n=o.f(e);return(0,n.resolve)(t),n.promise}},function(e,t,n){"use strict";var r=n(139),i=n(50);e.exports=n(73)("Map",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{get:function(e){var t=r.getEntry(i(this,"Map"),e);return t&&t.v},set:function(e,t){return r.def(i(this,"Map"),0===e?0:e,t)}},r,!0)},function(e,t,n){"use strict";var r=n(11).f,i=n(44),o=n(49),a=n(26),s=n(47),u=n(48),c=n(92),l=n(133),f=n(46),h=n(10),p=n(38).fastKey,d=n(50),v=h?"_s":"size",y=function(e,t){var n,r=p(t);if("F"!==r)return e._i[r];for(n=e._f;n;n=n.n)if(n.k==t)return n};e.exports={getConstructor:function(e,t,n,c){var l=e((function(e,r){s(e,l,t,"_i"),e._t=t,e._i=i(null),e._f=void 0,e._l=void 0,e[v]=0,null!=r&&u(r,n,e[c],e)}));return o(l.prototype,{clear:function(){for(var e=d(this,t),n=e._i,r=e._f;r;r=r.n)r.r=!0,r.p&&(r.p=r.p.n=void 0),delete n[r.i];e._f=e._l=void 0,e[v]=0},delete:function(e){var n=d(this,t),r=y(n,e);if(r){var i=r.n,o=r.p;delete n._i[r.i],r.r=!0,o&&(o.n=i),i&&(i.p=o),n._f==r&&(n._f=i),n._l==r&&(n._l=o),n[v]--}return!!r},forEach:function(e){d(this,t);for(var n,r=a(e,arguments.length>1?arguments[1]:void 0,3);n=n?n.n:this._f;)for(r(n.v,n.k,this);n&&n.r;)n=n.p},has:function(e){return!!y(d(this,t),e)}}),h&&r(l.prototype,"size",{get:function(){return d(this,t)[v]}}),l},def:function(e,t,n){var r,i,o=y(e,t);return o?o.v=n:(e._l=o={i:i=p(t,!0),k:t,v:n,p:r=e._l,n:void 0,r:!1},e._f||(e._f=o),r&&(r.n=o),e[v]++,"F"!==i&&(e._i[i]=o)),e},getEntry:y,setStrong:function(e,t,n){c(e,t,(function(e,n){this._t=d(e,t),this._k=n,this._l=void 0}),(function(){for(var e=this._k,t=this._l;t&&t.r;)t=t.p;return this._t&&(this._l=t=t?t.n:this._t._f)?l(0,"keys"==e?t.k:"values"==e?t.v:[t.k,t.v]):(this._t=void 0,l(1))}),n?"entries":"values",!n,!0),f(t)}}},function(e,t,n){"use strict";var r=n(139),i=n(50);e.exports=n(73)("Set",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(i(this,"Set"),e=0===e?0:e,e)}},r)},function(e,t,n){"use strict";var r,i=n(4),o=n(33)(0),a=n(16),s=n(38),u=n(120),c=n(142),l=n(6),f=n(50),h=n(50),p=!i.ActiveXObject&&"ActiveXObject"in i,d=s.getWeak,v=Object.isExtensible,y=c.ufstore,g=function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}},m={get:function(e){if(l(e)){var t=d(e);return!0===t?y(f(this,"WeakMap")).get(e):t?t[this._i]:void 0}},set:function(e,t){return c.def(f(this,"WeakMap"),e,t)}},b=e.exports=n(73)("WeakMap",g,m,c,!0,!0);h&&p&&(u((r=c.getConstructor(g,"WeakMap")).prototype,m),s.NEED=!0,o(["delete","has","get","set"],(function(e){var t=b.prototype,n=t[e];a(t,e,(function(t,i){if(l(t)&&!v(t)){this._f||(this._f=new r);var o=this._f[e](t,i);return"set"==e?this:o}return n.call(this,t,i)}))})))},function(e,t,n){"use strict";var r=n(49),i=n(38).getWeak,o=n(3),a=n(6),s=n(47),u=n(48),c=n(33),l=n(20),f=n(50),h=c(5),p=c(6),d=0,v=function(e){return e._l||(e._l=new y)},y=function(){this.a=[]},g=function(e,t){return h(e.a,(function(e){return e[0]===t}))};y.prototype={get:function(e){var t=g(this,e);if(t)return t[1]},has:function(e){return!!g(this,e)},set:function(e,t){var n=g(this,e);n?n[1]=t:this.a.push([e,t])},delete:function(e){var t=p(this.a,(function(t){return t[0]===e}));return~t&&this.a.splice(t,1),!!~t}},e.exports={getConstructor:function(e,t,n,o){var c=e((function(e,r){s(e,c,t,"_i"),e._t=t,e._i=d++,e._l=void 0,null!=r&&u(r,n,e[o],e)}));return r(c.prototype,{delete:function(e){if(!a(e))return!1;var n=i(e);return!0===n?v(f(this,t)).delete(e):n&&l(n,this._i)&&delete n[this._i]},has:function(e){if(!a(e))return!1;var n=i(e);return!0===n?v(f(this,t)).has(e):n&&l(n,this._i)}}),c},def:function(e,t,n){var r=i(o(t),!0);return!0===r?v(e).set(t,n):r[e._i]=n,e},ufstore:v}},function(e,t,n){var r=n(28),i=n(9);e.exports=function(e){if(void 0===e)return 0;var t=r(e),n=i(t);if(t!==n)throw RangeError("Wrong length!");return n}},function(e,t,n){var r=n(45),i=n(65),o=n(3),a=n(4).Reflect;e.exports=a&&a.ownKeys||function(e){var t=r.f(o(e)),n=i.f;return n?t.concat(n(e)):t}},function(e,t,n){"use strict";var r=n(66),i=n(6),o=n(9),a=n(26),s=n(8)("isConcatSpreadable");e.exports=function e(t,n,u,c,l,f,h,p){for(var d,v,y=l,g=0,m=!!h&&a(h,p,3);g<c;){if(g in u){if(d=m?m(u[g],g,n):u[g],v=!1,i(d)&&(v=void 0!==(v=d[s])?!!v:r(d)),v&&f>0)y=e(t,n,d,o(d.length),y,f-1)-1;else{if(y>=9007199254740991)throw TypeError();t[y]=d}y++}g++}return y}},function(e,t,n){var r=n(9),i=n(89),o=n(31);e.exports=function(e,t,n,a){var s=String(o(e)),u=s.length,c=void 0===n?" ":String(n),l=r(t);if(l<=u||""==c)return s;var f=l-u,h=i.call(c,Math.ceil(f/c.length));return h.length>f&&(h=h.slice(0,f)),a?h+s:s+h}},function(e,t,n){var r=n(10),i=n(42),o=n(21),a=n(58).f;e.exports=function(e){return function(t){for(var n,s=o(t),u=i(s),c=u.length,l=0,f=[];c>l;)n=u[l++],r&&!a.call(s,n)||f.push(e?[n,s[n]]:s[n]);return f}}},function(e,t,n){var r=n(53),i=n(149);e.exports=function(e){return function(){if(r(this)!=e)throw TypeError(e+"#toJSON isn't generic");return i(this)}}},function(e,t,n){var r=n(48);e.exports=function(e,t){var n=[];return r(e,!1,n.push,n,t),n}},function(e,t){e.exports=Math.scale||function(e,t,n,r,i){return 0===arguments.length||e!=e||t!=t||n!=n||r!=r||i!=i?NaN:e===1/0||e===-1/0?e:(e-t)*(i-r)/(n-t)+r}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,s,u=a(e),c=1;c<arguments.length;c++){for(var l in n=Object(arguments[c]))i.call(n,l)&&(u[l]=n[l]);if(r){s=r(n);for(var f=0;f<s.length;f++)o.call(n,s[f])&&(u[s[f]]=n[s[f]])}}return u}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=t.googleAuthProvider=t.firebase=void 0;var r,i=n(372),o=(r=i)&&r.__esModule?r:{default:r};n(373),n(375);o.default.initializeApp({apiKey:"AIzaSyC5Qc9GDys5UwcYhhMbGjdgCm-7J80RPKA",authDomain:"expensify-b70bd.firebaseapp.com",databaseURL:"https://expensify-b70bd.firebaseio.com",projectId:"expensify-b70bd",storageBucket:"expensify-b70bd.appspot.com",messagingSenderId:"183201686210"});var a=o.default.database(),s=new o.default.auth.GoogleAuthProvider;t.firebase=o.default,t.googleAuthProvider=s,t.default=a},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(78),i=n(110),o=function(){function e(e,t,n){this.name=e,this.instanceFactory=t,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY"}return e.prototype.setInstantiationMode=function(e){return this.instantiationMode=e,this},e.prototype.setMultipleInstances=function(e){return this.multipleInstances=e,this},e.prototype.setServiceProps=function(e){return this.serviceProps=e,this},e}(),a=function(){function e(e,t){this.name=e,this.container=t,this.component=null,this.instances=new Map,this.instancesDeferred=new Map}return e.prototype.get=function(e){void 0===e&&(e="[DEFAULT]");var t=this.normalizeInstanceIdentifier(e);if(!this.instancesDeferred.has(t)){var n=new i.Deferred;this.instancesDeferred.set(t,n);try{var r=this.getOrInitializeService(t);r&&n.resolve(r)}catch(e){}}return this.instancesDeferred.get(t).promise},e.prototype.getImmediate=function(e){var t=r.__assign({identifier:"[DEFAULT]",optional:!1},e),n=t.identifier,i=t.optional,o=this.normalizeInstanceIdentifier(n);try{var a=this.getOrInitializeService(o);if(!a){if(i)return null;throw Error("Service "+this.name+" is not available")}return a}catch(e){if(i)return null;throw e}},e.prototype.getComponent=function(){return this.component},e.prototype.setComponent=function(e){var t,n;if(e.name!==this.name)throw Error("Mismatching Component "+e.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=e,function(e){return"EAGER"===e.instantiationMode}
/**
 * @license
 * Copyright 2019 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(e))try{this.getOrInitializeService("[DEFAULT]")}catch(e){}try{for(var i=r.__values(this.instancesDeferred.entries()),o=i.next();!o.done;o=i.next()){var a=r.__read(o.value,2),s=a[0],u=a[1],c=this.normalizeInstanceIdentifier(s);try{var l=this.getOrInitializeService(c);u.resolve(l)}catch(e){}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}},e.prototype.clearInstance=function(e){void 0===e&&(e="[DEFAULT]"),this.instancesDeferred.delete(e),this.instances.delete(e)},e.prototype.delete=function(){return r.__awaiter(this,void 0,void 0,(function(){var e;return r.__generator(this,(function(t){switch(t.label){case 0:return e=Array.from(this.instances.values()),[4,Promise.all(e.filter((function(e){return"INTERNAL"in e})).map((function(e){return e.INTERNAL.delete()})))];case 1:return t.sent(),[2]}}))}))},e.prototype.isComponentSet=function(){return null!=this.component},e.prototype.getOrInitializeService=function(e){var t=this.instances.get(e);return!t&&this.component&&(t=this.component.instanceFactory(this.container,function(e){return"[DEFAULT]"===e?void 0:e}(e)),this.instances.set(e,t)),t||null},e.prototype.normalizeInstanceIdentifier=function(e){return this.component?this.component.multipleInstances?e:"[DEFAULT]":e},e}();var s=function(){function e(e){this.name=e,this.providers=new Map}return e.prototype.addComponent=function(e){var t=this.getProvider(e.name);if(t.isComponentSet())throw new Error("Component "+e.name+" has already been registered with "+this.name);t.setComponent(e)},e.prototype.addOrOverwriteComponent=function(e){this.getProvider(e.name).isComponentSet()&&this.providers.delete(e.name),this.addComponent(e)},e.prototype.getProvider=function(e){if(this.providers.has(e))return this.providers.get(e);var t=new a(e,this);return this.providers.set(e,t),t},e.prototype.getProviders=function(){return Array.from(this.providers.values())},e}();t.Component=o,t.ComponentContainer=s,t.Provider=a},function(e,t,n){"use strict";
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */
function r(){for(var e=0,t=0,n=arguments.length;t<n;t++)e+=arguments[t].length;var r=Array(e),i=0;for(t=0;t<n;t++)for(var o=arguments[t],a=0,s=o.length;a<s;a++,i++)r[i]=o[a];return r}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */n.r(t),n.d(t,"LogLevel",(function(){return i})),n.d(t,"Logger",(function(){return u})),n.d(t,"setLogLevel",(function(){return c}));var i,o=[];!function(e){e[e.DEBUG=0]="DEBUG",e[e.VERBOSE=1]="VERBOSE",e[e.INFO=2]="INFO",e[e.WARN=3]="WARN",e[e.ERROR=4]="ERROR",e[e.SILENT=5]="SILENT"}(i||(i={}));var a=i.INFO,s=function(e,t){for(var n=[],o=2;o<arguments.length;o++)n[o-2]=arguments[o];if(!(t<e.logLevel)){var a=(new Date).toISOString();switch(t){case i.DEBUG:case i.VERBOSE:console.log.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.INFO:console.info.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.WARN:console.warn.apply(console,r(["["+a+"]  "+e.name+":"],n));break;case i.ERROR:console.error.apply(console,r(["["+a+"]  "+e.name+":"],n));break;default:throw new Error("Attempted to log a message with an invalid logType (value: "+t+")")}}},u=function(){function e(e){this.name=e,this._logLevel=a,this._logHandler=s,o.push(this)}return Object.defineProperty(e.prototype,"logLevel",{get:function(){return this._logLevel},set:function(e){if(!(e in i))throw new TypeError("Invalid value assigned to `logLevel`");this._logLevel=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logHandler",{get:function(){return this._logHandler},set:function(e){if("function"!=typeof e)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=e},enumerable:!0,configurable:!0}),e.prototype.debug=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.DEBUG],e))},e.prototype.log=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.VERBOSE],e))},e.prototype.info=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.INFO],e))},e.prototype.warn=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.WARN],e))},e.prototype.error=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];this._logHandler.apply(this,r([this,i.ERROR],e))},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function c(e){o.forEach((function(t){t.logLevel=e}))}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){"use strict";(function(t){var n="__global_unique_id__";e.exports=function(){return t[n]=(t[n]||0)+1}}).call(this,n(51))},function(e,t,n){n(158),e.exports=n(360)},function(e,t,n){"use strict";(function(e){if(n(159),n(356),n(357),e._babelPolyfill)throw new Error("only one instance of babel-polyfill is allowed");e._babelPolyfill=!0;function t(e,t,n){e[t]||Object.defineProperty(e,t,{writable:!0,configurable:!0,value:n})}t(String.prototype,"padLeft","".padStart),t(String.prototype,"padRight","".padEnd),"pop,reverse,shift,keys,values,entries,indexOf,every,some,forEach,map,filter,find,findIndex,includes,join,slice,concat,push,splice,unshift,sort,lastIndexOf,reduce,reduceRight,copyWithin,fill".split(",").forEach((function(e){[][e]&&t(Array,e,Function.call.bind([][e]))}))}).call(this,n(51))},function(e,t,n){n(160),n(163),n(164),n(165),n(166),n(167),n(168),n(169),n(170),n(171),n(172),n(173),n(174),n(175),n(176),n(177),n(178),n(179),n(180),n(181),n(182),n(183),n(184),n(185),n(186),n(187),n(188),n(189),n(190),n(191),n(192),n(193),n(194),n(195),n(196),n(197),n(198),n(199),n(200),n(201),n(202),n(203),n(204),n(205),n(206),n(207),n(208),n(209),n(210),n(211),n(212),n(213),n(214),n(215),n(216),n(217),n(218),n(219),n(220),n(221),n(222),n(223),n(224),n(225),n(226),n(227),n(228),n(229),n(230),n(231),n(232),n(233),n(234),n(235),n(236),n(237),n(238),n(240),n(241),n(243),n(244),n(245),n(246),n(247),n(248),n(249),n(251),n(252),n(253),n(254),n(255),n(256),n(257),n(258),n(259),n(260),n(261),n(262),n(263),n(101),n(264),n(134),n(265),n(135),n(266),n(267),n(268),n(269),n(270),n(138),n(140),n(141),n(271),n(272),n(273),n(274),n(275),n(276),n(277),n(278),n(279),n(280),n(281),n(282),n(283),n(284),n(285),n(286),n(287),n(288),n(289),n(290),n(291),n(292),n(293),n(294),n(295),n(296),n(297),n(298),n(299),n(300),n(301),n(302),n(303),n(304),n(305),n(306),n(307),n(308),n(309),n(310),n(311),n(312),n(313),n(314),n(315),n(316),n(317),n(318),n(319),n(320),n(321),n(322),n(323),n(324),n(325),n(326),n(327),n(328),n(329),n(330),n(331),n(332),n(333),n(334),n(335),n(336),n(337),n(338),n(339),n(340),n(341),n(342),n(343),n(344),n(345),n(346),n(347),n(348),n(349),n(350),n(351),n(352),n(353),n(354),n(355),e.exports=n(25)},function(e,t,n){"use strict";var r=n(4),i=n(20),o=n(10),a=n(0),s=n(16),u=n(38).KEY,c=n(5),l=n(56),f=n(52),h=n(41),p=n(8),d=n(116),v=n(82),y=n(162),g=n(66),m=n(3),b=n(6),_=n(12),w=n(21),E=n(30),S=n(40),C=n(44),T=n(119),k=n(22),x=n(65),I=n(11),P=n(42),O=k.f,N=I.f,A=T.f,R=r.Symbol,D=r.JSON,M=D&&D.stringify,L=p("_hidden"),F=p("toPrimitive"),j={}.propertyIsEnumerable,U=l("symbol-registry"),W=l("symbols"),V=l("op-symbols"),q=Object.prototype,B="function"==typeof R&&!!x.f,H=r.QObject,z=!H||!H.prototype||!H.prototype.findChild,Q=o&&c((function(){return 7!=C(N({},"a",{get:function(){return N(this,"a",{value:7}).a}})).a}))?function(e,t,n){var r=O(q,t);r&&delete q[t],N(e,t,n),r&&e!==q&&N(q,t,r)}:N,K=function(e){var t=W[e]=C(R.prototype);return t._k=e,t},G=B&&"symbol"==typeof R.iterator?function(e){return"symbol"==typeof e}:function(e){return e instanceof R},Y=function(e,t,n){return e===q&&Y(V,t,n),m(e),t=E(t,!0),m(n),i(W,t)?(n.enumerable?(i(e,L)&&e[L][t]&&(e[L][t]=!1),n=C(n,{enumerable:S(0,!1)})):(i(e,L)||N(e,L,S(1,{})),e[L][t]=!0),Q(e,t,n)):N(e,t,n)},$=function(e,t){m(e);for(var n,r=y(t=w(t)),i=0,o=r.length;o>i;)Y(e,n=r[i++],t[n]);return e},X=function(e){var t=j.call(this,e=E(e,!0));return!(this===q&&i(W,e)&&!i(V,e))&&(!(t||!i(this,e)||!i(W,e)||i(this,L)&&this[L][e])||t)},J=function(e,t){if(e=w(e),t=E(t,!0),e!==q||!i(W,t)||i(V,t)){var n=O(e,t);return!n||!i(W,t)||i(e,L)&&e[L][t]||(n.enumerable=!0),n}},Z=function(e){for(var t,n=A(w(e)),r=[],o=0;n.length>o;)i(W,t=n[o++])||t==L||t==u||r.push(t);return r},ee=function(e){for(var t,n=e===q,r=A(n?V:w(e)),o=[],a=0;r.length>a;)!i(W,t=r[a++])||n&&!i(q,t)||o.push(W[t]);return o};B||(s((R=function(){if(this instanceof R)throw TypeError("Symbol is not a constructor!");var e=h(arguments.length>0?arguments[0]:void 0),t=function(n){this===q&&t.call(V,n),i(this,L)&&i(this[L],e)&&(this[L][e]=!1),Q(this,e,S(1,n))};return o&&z&&Q(q,e,{configurable:!0,set:t}),K(e)}).prototype,"toString",(function(){return this._k})),k.f=J,I.f=Y,n(45).f=T.f=Z,n(58).f=X,x.f=ee,o&&!n(37)&&s(q,"propertyIsEnumerable",X,!0),d.f=function(e){return K(p(e))}),a(a.G+a.W+a.F*!B,{Symbol:R});for(var te="hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables".split(","),ne=0;te.length>ne;)p(te[ne++]);for(var re=P(p.store),ie=0;re.length>ie;)v(re[ie++]);a(a.S+a.F*!B,"Symbol",{for:function(e){return i(U,e+="")?U[e]:U[e]=R(e)},keyFor:function(e){if(!G(e))throw TypeError(e+" is not a symbol!");for(var t in U)if(U[t]===e)return t},useSetter:function(){z=!0},useSimple:function(){z=!1}}),a(a.S+a.F*!B,"Object",{create:function(e,t){return void 0===t?C(e):$(C(e),t)},defineProperty:Y,defineProperties:$,getOwnPropertyDescriptor:J,getOwnPropertyNames:Z,getOwnPropertySymbols:ee});var oe=c((function(){x.f(1)}));a(a.S+a.F*oe,"Object",{getOwnPropertySymbols:function(e){return x.f(_(e))}}),D&&a(a.S+a.F*(!B||c((function(){var e=R();return"[null]"!=M([e])||"{}"!=M({a:e})||"{}"!=M(Object(e))}))),"JSON",{stringify:function(e){for(var t,n,r=[e],i=1;arguments.length>i;)r.push(arguments[i++]);if(n=t=r[1],(b(t)||void 0!==e)&&!G(e))return g(t)||(t=function(e,t){if("function"==typeof n&&(t=n.call(this,e,t)),!G(t))return t}),r[1]=t,M.apply(D,r)}}),R.prototype[F]||n(15)(R.prototype,F,R.prototype.valueOf),f(R,"Symbol"),f(Math,"Math",!0),f(r.JSON,"JSON",!0)},function(e,t,n){e.exports=n(56)("native-function-to-string",Function.toString)},function(e,t,n){var r=n(42),i=n(65),o=n(58);e.exports=function(e){var t=r(e),n=i.f;if(n)for(var a,s=n(e),u=o.f,c=0;s.length>c;)u.call(e,a=s[c++])&&t.push(a);return t}},function(e,t,n){var r=n(0);r(r.S,"Object",{create:n(44)})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(10),"Object",{defineProperty:n(11).f})},function(e,t,n){var r=n(0);r(r.S+r.F*!n(10),"Object",{defineProperties:n(118)})},function(e,t,n){var r=n(21),i=n(22).f;n(32)("getOwnPropertyDescriptor",(function(){return function(e,t){return i(r(e),t)}}))},function(e,t,n){var r=n(12),i=n(23);n(32)("getPrototypeOf",(function(){return function(e){return i(r(e))}}))},function(e,t,n){var r=n(12),i=n(42);n(32)("keys",(function(){return function(e){return i(r(e))}}))},function(e,t,n){n(32)("getOwnPropertyNames",(function(){return n(119).f}))},function(e,t,n){var r=n(6),i=n(38).onFreeze;n(32)("freeze",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(6),i=n(38).onFreeze;n(32)("seal",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(6),i=n(38).onFreeze;n(32)("preventExtensions",(function(e){return function(t){return e&&r(t)?e(i(t)):t}}))},function(e,t,n){var r=n(6);n(32)("isFrozen",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(6);n(32)("isSealed",(function(e){return function(t){return!r(t)||!!e&&e(t)}}))},function(e,t,n){var r=n(6);n(32)("isExtensible",(function(e){return function(t){return!!r(t)&&(!e||e(t))}}))},function(e,t,n){var r=n(0);r(r.S+r.F,"Object",{assign:n(120)})},function(e,t,n){var r=n(0);r(r.S,"Object",{is:n(121)})},function(e,t,n){var r=n(0);r(r.S,"Object",{setPrototypeOf:n(86).set})},function(e,t,n){"use strict";var r=n(53),i={};i[n(8)("toStringTag")]="z",i+""!="[object z]"&&n(16)(Object.prototype,"toString",(function(){return"[object "+r(this)+"]"}),!0)},function(e,t,n){var r=n(0);r(r.P,"Function",{bind:n(122)})},function(e,t,n){var r=n(11).f,i=Function.prototype,o=/^\s*function ([^ (]*)/;"name"in i||n(10)&&r(i,"name",{configurable:!0,get:function(){try{return(""+this).match(o)[1]}catch(e){return""}}})},function(e,t,n){"use strict";var r=n(6),i=n(23),o=n(8)("hasInstance"),a=Function.prototype;o in a||n(11).f(a,o,{value:function(e){if("function"!=typeof this||!r(e))return!1;if(!r(this.prototype))return e instanceof this;for(;e=i(e);)if(this.prototype===e)return!0;return!1}})},function(e,t,n){var r=n(0),i=n(124);r(r.G+r.F*(parseInt!=i),{parseInt:i})},function(e,t,n){var r=n(0),i=n(125);r(r.G+r.F*(parseFloat!=i),{parseFloat:i})},function(e,t,n){"use strict";var r=n(4),i=n(20),o=n(27),a=n(88),s=n(30),u=n(5),c=n(45).f,l=n(22).f,f=n(11).f,h=n(54).trim,p=r.Number,d=p,v=p.prototype,y="Number"==o(n(44)(v)),g="trim"in String.prototype,m=function(e){var t=s(e,!1);if("string"==typeof t&&t.length>2){var n,r,i,o=(t=g?t.trim():h(t,3)).charCodeAt(0);if(43===o||45===o){if(88===(n=t.charCodeAt(2))||120===n)return NaN}else if(48===o){switch(t.charCodeAt(1)){case 66:case 98:r=2,i=49;break;case 79:case 111:r=8,i=55;break;default:return+t}for(var a,u=t.slice(2),c=0,l=u.length;c<l;c++)if((a=u.charCodeAt(c))<48||a>i)return NaN;return parseInt(u,r)}}return+t};if(!p(" 0o1")||!p("0b1")||p("+0x1")){p=function(e){var t=arguments.length<1?0:e,n=this;return n instanceof p&&(y?u((function(){v.valueOf.call(n)})):"Number"!=o(n))?a(new d(m(t)),n,p):m(t)};for(var b,_=n(10)?c(d):"MAX_VALUE,MIN_VALUE,NaN,NEGATIVE_INFINITY,POSITIVE_INFINITY,EPSILON,isFinite,isInteger,isNaN,isSafeInteger,MAX_SAFE_INTEGER,MIN_SAFE_INTEGER,parseFloat,parseInt,isInteger".split(","),w=0;_.length>w;w++)i(d,b=_[w])&&!i(p,b)&&f(p,b,l(d,b));p.prototype=v,v.constructor=p,n(16)(r,"Number",p)}},function(e,t,n){"use strict";var r=n(0),i=n(28),o=n(126),a=n(89),s=1..toFixed,u=Math.floor,c=[0,0,0,0,0,0],l="Number.toFixed: incorrect invocation!",f=function(e,t){for(var n=-1,r=t;++n<6;)r+=e*c[n],c[n]=r%1e7,r=u(r/1e7)},h=function(e){for(var t=6,n=0;--t>=0;)n+=c[t],c[t]=u(n/e),n=n%e*1e7},p=function(){for(var e=6,t="";--e>=0;)if(""!==t||0===e||0!==c[e]){var n=String(c[e]);t=""===t?n:t+a.call("0",7-n.length)+n}return t},d=function(e,t,n){return 0===t?n:t%2==1?d(e,t-1,n*e):d(e*e,t/2,n)};r(r.P+r.F*(!!s&&("0.000"!==8e-5.toFixed(3)||"1"!==.9.toFixed(0)||"1.25"!==1.255.toFixed(2)||"1000000000000000128"!==(0xde0b6b3a7640080).toFixed(0))||!n(5)((function(){s.call({})}))),"Number",{toFixed:function(e){var t,n,r,s,u=o(this,l),c=i(e),v="",y="0";if(c<0||c>20)throw RangeError(l);if(u!=u)return"NaN";if(u<=-1e21||u>=1e21)return String(u);if(u<0&&(v="-",u=-u),u>1e-21)if(n=(t=function(e){for(var t=0,n=e;n>=4096;)t+=12,n/=4096;for(;n>=2;)t+=1,n/=2;return t}(u*d(2,69,1))-69)<0?u*d(2,-t,1):u/d(2,t,1),n*=4503599627370496,(t=52-t)>0){for(f(0,n),r=c;r>=7;)f(1e7,0),r-=7;for(f(d(10,r,1),0),r=t-1;r>=23;)h(1<<23),r-=23;h(1<<r),f(1,1),h(2),y=p()}else f(0,n),f(1<<-t,0),y=p()+a.call("0",c);return y=c>0?v+((s=y.length)<=c?"0."+a.call("0",c-s)+y:y.slice(0,s-c)+"."+y.slice(s-c)):v+y}})},function(e,t,n){"use strict";var r=n(0),i=n(5),o=n(126),a=1..toPrecision;r(r.P+r.F*(i((function(){return"1"!==a.call(1,void 0)}))||!i((function(){a.call({})}))),"Number",{toPrecision:function(e){var t=o(this,"Number#toPrecision: incorrect invocation!");return void 0===e?a.call(t):a.call(t,e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{EPSILON:Math.pow(2,-52)})},function(e,t,n){var r=n(0),i=n(4).isFinite;r(r.S,"Number",{isFinite:function(e){return"number"==typeof e&&i(e)}})},function(e,t,n){var r=n(0);r(r.S,"Number",{isInteger:n(127)})},function(e,t,n){var r=n(0);r(r.S,"Number",{isNaN:function(e){return e!=e}})},function(e,t,n){var r=n(0),i=n(127),o=Math.abs;r(r.S,"Number",{isSafeInteger:function(e){return i(e)&&o(e)<=9007199254740991}})},function(e,t,n){var r=n(0);r(r.S,"Number",{MAX_SAFE_INTEGER:9007199254740991})},function(e,t,n){var r=n(0);r(r.S,"Number",{MIN_SAFE_INTEGER:-9007199254740991})},function(e,t,n){var r=n(0),i=n(125);r(r.S+r.F*(Number.parseFloat!=i),"Number",{parseFloat:i})},function(e,t,n){var r=n(0),i=n(124);r(r.S+r.F*(Number.parseInt!=i),"Number",{parseInt:i})},function(e,t,n){var r=n(0),i=n(128),o=Math.sqrt,a=Math.acosh;r(r.S+r.F*!(a&&710==Math.floor(a(Number.MAX_VALUE))&&a(1/0)==1/0),"Math",{acosh:function(e){return(e=+e)<1?NaN:e>94906265.62425156?Math.log(e)+Math.LN2:i(e-1+o(e-1)*o(e+1))}})},function(e,t,n){var r=n(0),i=Math.asinh;r(r.S+r.F*!(i&&1/i(0)>0),"Math",{asinh:function e(t){return isFinite(t=+t)&&0!=t?t<0?-e(-t):Math.log(t+Math.sqrt(t*t+1)):t}})},function(e,t,n){var r=n(0),i=Math.atanh;r(r.S+r.F*!(i&&1/i(-0)<0),"Math",{atanh:function(e){return 0==(e=+e)?e:Math.log((1+e)/(1-e))/2}})},function(e,t,n){var r=n(0),i=n(90);r(r.S,"Math",{cbrt:function(e){return i(e=+e)*Math.pow(Math.abs(e),1/3)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{clz32:function(e){return(e>>>=0)?31-Math.floor(Math.log(e+.5)*Math.LOG2E):32}})},function(e,t,n){var r=n(0),i=Math.exp;r(r.S,"Math",{cosh:function(e){return(i(e=+e)+i(-e))/2}})},function(e,t,n){var r=n(0),i=n(91);r(r.S+r.F*(i!=Math.expm1),"Math",{expm1:i})},function(e,t,n){var r=n(0);r(r.S,"Math",{fround:n(129)})},function(e,t,n){var r=n(0),i=Math.abs;r(r.S,"Math",{hypot:function(e,t){for(var n,r,o=0,a=0,s=arguments.length,u=0;a<s;)u<(n=i(arguments[a++]))?(o=o*(r=u/n)*r+1,u=n):o+=n>0?(r=n/u)*r:n;return u===1/0?1/0:u*Math.sqrt(o)}})},function(e,t,n){var r=n(0),i=Math.imul;r(r.S+r.F*n(5)((function(){return-5!=i(4294967295,5)||2!=i.length})),"Math",{imul:function(e,t){var n=+e,r=+t,i=65535&n,o=65535&r;return 0|i*o+((65535&n>>>16)*o+i*(65535&r>>>16)<<16>>>0)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log10:function(e){return Math.log(e)*Math.LOG10E}})},function(e,t,n){var r=n(0);r(r.S,"Math",{log1p:n(128)})},function(e,t,n){var r=n(0);r(r.S,"Math",{log2:function(e){return Math.log(e)/Math.LN2}})},function(e,t,n){var r=n(0);r(r.S,"Math",{sign:n(90)})},function(e,t,n){var r=n(0),i=n(91),o=Math.exp;r(r.S+r.F*n(5)((function(){return-2e-17!=!Math.sinh(-2e-17)})),"Math",{sinh:function(e){return Math.abs(e=+e)<1?(i(e)-i(-e))/2:(o(e-1)-o(-e-1))*(Math.E/2)}})},function(e,t,n){var r=n(0),i=n(91),o=Math.exp;r(r.S,"Math",{tanh:function(e){var t=i(e=+e),n=i(-e);return t==1/0?1:n==1/0?-1:(t-n)/(o(e)+o(-e))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{trunc:function(e){return(e>0?Math.floor:Math.ceil)(e)}})},function(e,t,n){var r=n(0),i=n(43),o=String.fromCharCode,a=String.fromCodePoint;r(r.S+r.F*(!!a&&1!=a.length),"String",{fromCodePoint:function(e){for(var t,n=[],r=arguments.length,a=0;r>a;){if(t=+arguments[a++],i(t,1114111)!==t)throw RangeError(t+" is not a valid code point");n.push(t<65536?o(t):o(55296+((t-=65536)>>10),t%1024+56320))}return n.join("")}})},function(e,t,n){var r=n(0),i=n(21),o=n(9);r(r.S,"String",{raw:function(e){for(var t=i(e.raw),n=o(t.length),r=arguments.length,a=[],s=0;n>s;)a.push(String(t[s++])),s<r&&a.push(String(arguments[s]));return a.join("")}})},function(e,t,n){"use strict";n(54)("trim",(function(e){return function(){return e(this,3)}}))},function(e,t,n){"use strict";var r=n(67)(!0);n(92)(String,"String",(function(e){this._t=String(e),this._i=0}),(function(){var e,t=this._t,n=this._i;return n>=t.length?{value:void 0,done:!0}:(e=r(t,n),this._i+=e.length,{value:e,done:!1})}))},function(e,t,n){"use strict";var r=n(0),i=n(67)(!1);r(r.P,"String",{codePointAt:function(e){return i(this,e)}})},function(e,t,n){"use strict";var r=n(0),i=n(9),o=n(94),a="".endsWith;r(r.P+r.F*n(95)("endsWith"),"String",{endsWith:function(e){var t=o(this,e,"endsWith"),n=arguments.length>1?arguments[1]:void 0,r=i(t.length),s=void 0===n?r:Math.min(i(n),r),u=String(e);return a?a.call(t,u,s):t.slice(s-u.length,s)===u}})},function(e,t,n){"use strict";var r=n(0),i=n(94);r(r.P+r.F*n(95)("includes"),"String",{includes:function(e){return!!~i(this,e,"includes").indexOf(e,arguments.length>1?arguments[1]:void 0)}})},function(e,t,n){var r=n(0);r(r.P,"String",{repeat:n(89)})},function(e,t,n){"use strict";var r=n(0),i=n(9),o=n(94),a="".startsWith;r(r.P+r.F*n(95)("startsWith"),"String",{startsWith:function(e){var t=o(this,e,"startsWith"),n=i(Math.min(arguments.length>1?arguments[1]:void 0,t.length)),r=String(e);return a?a.call(t,r,n):t.slice(n,n+r.length)===r}})},function(e,t,n){"use strict";n(17)("anchor",(function(e){return function(t){return e(this,"a","name",t)}}))},function(e,t,n){"use strict";n(17)("big",(function(e){return function(){return e(this,"big","","")}}))},function(e,t,n){"use strict";n(17)("blink",(function(e){return function(){return e(this,"blink","","")}}))},function(e,t,n){"use strict";n(17)("bold",(function(e){return function(){return e(this,"b","","")}}))},function(e,t,n){"use strict";n(17)("fixed",(function(e){return function(){return e(this,"tt","","")}}))},function(e,t,n){"use strict";n(17)("fontcolor",(function(e){return function(t){return e(this,"font","color",t)}}))},function(e,t,n){"use strict";n(17)("fontsize",(function(e){return function(t){return e(this,"font","size",t)}}))},function(e,t,n){"use strict";n(17)("italics",(function(e){return function(){return e(this,"i","","")}}))},function(e,t,n){"use strict";n(17)("link",(function(e){return function(t){return e(this,"a","href",t)}}))},function(e,t,n){"use strict";n(17)("small",(function(e){return function(){return e(this,"small","","")}}))},function(e,t,n){"use strict";n(17)("strike",(function(e){return function(){return e(this,"strike","","")}}))},function(e,t,n){"use strict";n(17)("sub",(function(e){return function(){return e(this,"sub","","")}}))},function(e,t,n){"use strict";n(17)("sup",(function(e){return function(){return e(this,"sup","","")}}))},function(e,t,n){var r=n(0);r(r.S,"Date",{now:function(){return(new Date).getTime()}})},function(e,t,n){"use strict";var r=n(0),i=n(12),o=n(30);r(r.P+r.F*n(5)((function(){return null!==new Date(NaN).toJSON()||1!==Date.prototype.toJSON.call({toISOString:function(){return 1}})})),"Date",{toJSON:function(e){var t=i(this),n=o(t);return"number"!=typeof n||isFinite(n)?t.toISOString():null}})},function(e,t,n){var r=n(0),i=n(239);r(r.P+r.F*(Date.prototype.toISOString!==i),"Date",{toISOString:i})},function(e,t,n){"use strict";var r=n(5),i=Date.prototype.getTime,o=Date.prototype.toISOString,a=function(e){return e>9?e:"0"+e};e.exports=r((function(){return"0385-07-25T07:06:39.999Z"!=o.call(new Date(-5e13-1))}))||!r((function(){o.call(new Date(NaN))}))?function(){if(!isFinite(i.call(this)))throw RangeError("Invalid time value");var e=this,t=e.getUTCFullYear(),n=e.getUTCMilliseconds(),r=t<0?"-":t>9999?"+":"";return r+("00000"+Math.abs(t)).slice(r?-6:-4)+"-"+a(e.getUTCMonth()+1)+"-"+a(e.getUTCDate())+"T"+a(e.getUTCHours())+":"+a(e.getUTCMinutes())+":"+a(e.getUTCSeconds())+"."+(n>99?n:"0"+a(n))+"Z"}:o},function(e,t,n){var r=Date.prototype,i=r.toString,o=r.getTime;new Date(NaN)+""!="Invalid Date"&&n(16)(r,"toString",(function(){var e=o.call(this);return e==e?i.call(this):"Invalid Date"}))},function(e,t,n){var r=n(8)("toPrimitive"),i=Date.prototype;r in i||n(15)(i,r,n(242))},function(e,t,n){"use strict";var r=n(3),i=n(30);e.exports=function(e){if("string"!==e&&"number"!==e&&"default"!==e)throw TypeError("Incorrect hint");return i(r(this),"number"!=e)}},function(e,t,n){var r=n(0);r(r.S,"Array",{isArray:n(66)})},function(e,t,n){"use strict";var r=n(26),i=n(0),o=n(12),a=n(130),s=n(96),u=n(9),c=n(97),l=n(98);i(i.S+i.F*!n(69)((function(e){Array.from(e)})),"Array",{from:function(e){var t,n,i,f,h=o(e),p="function"==typeof this?this:Array,d=arguments.length,v=d>1?arguments[1]:void 0,y=void 0!==v,g=0,m=l(h);if(y&&(v=r(v,d>2?arguments[2]:void 0,2)),null==m||p==Array&&s(m))for(n=new p(t=u(h.length));t>g;g++)c(n,g,y?v(h[g],g):h[g]);else for(f=m.call(h),n=new p;!(i=f.next()).done;g++)c(n,g,y?a(f,v,[i.value,g],!0):i.value);return n.length=g,n}})},function(e,t,n){"use strict";var r=n(0),i=n(97);r(r.S+r.F*n(5)((function(){function e(){}return!(Array.of.call(e)instanceof e)})),"Array",{of:function(){for(var e=0,t=arguments.length,n=new("function"==typeof this?this:Array)(t);t>e;)i(n,e,arguments[e++]);return n.length=t,n}})},function(e,t,n){"use strict";var r=n(0),i=n(21),o=[].join;r(r.P+r.F*(n(57)!=Object||!n(29)(o)),"Array",{join:function(e){return o.call(i(this),void 0===e?",":e)}})},function(e,t,n){"use strict";var r=n(0),i=n(85),o=n(27),a=n(43),s=n(9),u=[].slice;r(r.P+r.F*n(5)((function(){i&&u.call(i)})),"Array",{slice:function(e,t){var n=s(this.length),r=o(this);if(t=void 0===t?n:t,"Array"==r)return u.call(this,e,t);for(var i=a(e,n),c=a(t,n),l=s(c-i),f=new Array(l),h=0;h<l;h++)f[h]="String"==r?this.charAt(i+h):this[i+h];return f}})},function(e,t,n){"use strict";var r=n(0),i=n(13),o=n(12),a=n(5),s=[].sort,u=[1,2,3];r(r.P+r.F*(a((function(){u.sort(void 0)}))||!a((function(){u.sort(null)}))||!n(29)(s)),"Array",{sort:function(e){return void 0===e?s.call(o(this)):s.call(o(this),i(e))}})},function(e,t,n){"use strict";var r=n(0),i=n(33)(0),o=n(29)([].forEach,!0);r(r.P+r.F*!o,"Array",{forEach:function(e){return i(this,e,arguments[1])}})},function(e,t,n){var r=n(6),i=n(66),o=n(8)("species");e.exports=function(e){var t;return i(e)&&("function"!=typeof(t=e.constructor)||t!==Array&&!i(t.prototype)||(t=void 0),r(t)&&null===(t=t[o])&&(t=void 0)),void 0===t?Array:t}},function(e,t,n){"use strict";var r=n(0),i=n(33)(1);r(r.P+r.F*!n(29)([].map,!0),"Array",{map:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),i=n(33)(2);r(r.P+r.F*!n(29)([].filter,!0),"Array",{filter:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),i=n(33)(3);r(r.P+r.F*!n(29)([].some,!0),"Array",{some:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),i=n(33)(4);r(r.P+r.F*!n(29)([].every,!0),"Array",{every:function(e){return i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),i=n(131);r(r.P+r.F*!n(29)([].reduce,!0),"Array",{reduce:function(e){return i(this,e,arguments.length,arguments[1],!1)}})},function(e,t,n){"use strict";var r=n(0),i=n(131);r(r.P+r.F*!n(29)([].reduceRight,!0),"Array",{reduceRight:function(e){return i(this,e,arguments.length,arguments[1],!0)}})},function(e,t,n){"use strict";var r=n(0),i=n(64)(!1),o=[].indexOf,a=!!o&&1/[1].indexOf(1,-0)<0;r(r.P+r.F*(a||!n(29)(o)),"Array",{indexOf:function(e){return a?o.apply(this,arguments)||0:i(this,e,arguments[1])}})},function(e,t,n){"use strict";var r=n(0),i=n(21),o=n(28),a=n(9),s=[].lastIndexOf,u=!!s&&1/[1].lastIndexOf(1,-0)<0;r(r.P+r.F*(u||!n(29)(s)),"Array",{lastIndexOf:function(e){if(u)return s.apply(this,arguments)||0;var t=i(this),n=a(t.length),r=n-1;for(arguments.length>1&&(r=Math.min(r,o(arguments[1]))),r<0&&(r=n+r);r>=0;r--)if(r in t&&t[r]===e)return r||0;return-1}})},function(e,t,n){var r=n(0);r(r.P,"Array",{copyWithin:n(132)}),n(39)("copyWithin")},function(e,t,n){var r=n(0);r(r.P,"Array",{fill:n(100)}),n(39)("fill")},function(e,t,n){"use strict";var r=n(0),i=n(33)(5),o=!0;"find"in[]&&Array(1).find((function(){o=!1})),r(r.P+r.F*o,"Array",{find:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(39)("find")},function(e,t,n){"use strict";var r=n(0),i=n(33)(6),o="findIndex",a=!0;o in[]&&Array(1)[o]((function(){a=!1})),r(r.P+r.F*a,"Array",{findIndex:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(39)(o)},function(e,t,n){n(46)("Array")},function(e,t,n){var r=n(4),i=n(88),o=n(11).f,a=n(45).f,s=n(68),u=n(59),c=r.RegExp,l=c,f=c.prototype,h=/a/g,p=/a/g,d=new c(h)!==h;if(n(10)&&(!d||n(5)((function(){return p[n(8)("match")]=!1,c(h)!=h||c(p)==p||"/a/i"!=c(h,"i")})))){c=function(e,t){var n=this instanceof c,r=s(e),o=void 0===t;return!n&&r&&e.constructor===c&&o?e:i(d?new l(r&&!o?e.source:e,t):l((r=e instanceof c)?e.source:e,r&&o?u.call(e):t),n?this:f,c)};for(var v=function(e){e in c||o(c,e,{configurable:!0,get:function(){return l[e]},set:function(t){l[e]=t}})},y=a(l),g=0;y.length>g;)v(y[g++]);f.constructor=c,c.prototype=f,n(16)(r,"RegExp",c)}n(46)("RegExp")},function(e,t,n){"use strict";n(135);var r=n(3),i=n(59),o=n(10),a=/./.toString,s=function(e){n(16)(RegExp.prototype,"toString",e,!0)};n(5)((function(){return"/a/b"!=a.call({source:"a",flags:"b"})}))?s((function(){var e=r(this);return"/".concat(e.source,"/","flags"in e?e.flags:!o&&e instanceof RegExp?i.call(e):void 0)})):"toString"!=a.name&&s((function(){return a.call(this)}))},function(e,t,n){"use strict";var r=n(3),i=n(9),o=n(103),a=n(70);n(71)("match",1,(function(e,t,n,s){return[function(n){var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=s(n,e,this);if(t.done)return t.value;var u=r(e),c=String(this);if(!u.global)return a(u,c);var l=u.unicode;u.lastIndex=0;for(var f,h=[],p=0;null!==(f=a(u,c));){var d=String(f[0]);h[p]=d,""===d&&(u.lastIndex=o(c,i(u.lastIndex),l)),p++}return 0===p?null:h}]}))},function(e,t,n){"use strict";var r=n(3),i=n(12),o=n(9),a=n(28),s=n(103),u=n(70),c=Math.max,l=Math.min,f=Math.floor,h=/\$([$&`']|\d\d?|<[^>]*>)/g,p=/\$([$&`']|\d\d?)/g;n(71)("replace",2,(function(e,t,n,d){return[function(r,i){var o=e(this),a=null==r?void 0:r[t];return void 0!==a?a.call(r,o,i):n.call(String(o),r,i)},function(e,t){var i=d(n,e,this,t);if(i.done)return i.value;var f=r(e),h=String(this),p="function"==typeof t;p||(t=String(t));var y=f.global;if(y){var g=f.unicode;f.lastIndex=0}for(var m=[];;){var b=u(f,h);if(null===b)break;if(m.push(b),!y)break;""===String(b[0])&&(f.lastIndex=s(h,o(f.lastIndex),g))}for(var _,w="",E=0,S=0;S<m.length;S++){b=m[S];for(var C=String(b[0]),T=c(l(a(b.index),h.length),0),k=[],x=1;x<b.length;x++)k.push(void 0===(_=b[x])?_:String(_));var I=b.groups;if(p){var P=[C].concat(k,T,h);void 0!==I&&P.push(I);var O=String(t.apply(void 0,P))}else O=v(C,h,T,k,I,t);T>=E&&(w+=h.slice(E,T)+O,E=T+C.length)}return w+h.slice(E)}];function v(e,t,r,o,a,s){var u=r+e.length,c=o.length,l=p;return void 0!==a&&(a=i(a),l=h),n.call(s,l,(function(n,i){var s;switch(i.charAt(0)){case"$":return"$";case"&":return e;case"`":return t.slice(0,r);case"'":return t.slice(u);case"<":s=a[i.slice(1,-1)];break;default:var l=+i;if(0===l)return n;if(l>c){var h=f(l/10);return 0===h?n:h<=c?void 0===o[h-1]?i.charAt(1):o[h-1]+i.charAt(1):n}s=o[l-1]}return void 0===s?"":s}))}}))},function(e,t,n){"use strict";var r=n(3),i=n(121),o=n(70);n(71)("search",1,(function(e,t,n,a){return[function(n){var r=e(this),i=null==n?void 0:n[t];return void 0!==i?i.call(n,r):new RegExp(n)[t](String(r))},function(e){var t=a(n,e,this);if(t.done)return t.value;var s=r(e),u=String(this),c=s.lastIndex;i(c,0)||(s.lastIndex=0);var l=o(s,u);return i(s.lastIndex,c)||(s.lastIndex=c),null===l?-1:l.index}]}))},function(e,t,n){"use strict";var r=n(68),i=n(3),o=n(60),a=n(103),s=n(9),u=n(70),c=n(102),l=n(5),f=Math.min,h=[].push,p=!l((function(){RegExp(4294967295,"y")}));n(71)("split",2,(function(e,t,n,l){var d;return d="c"=="abbc".split(/(b)*/)[1]||4!="test".split(/(?:)/,-1).length||2!="ab".split(/(?:ab)*/).length||4!=".".split(/(.?)(.?)/).length||".".split(/()()/).length>1||"".split(/.?/).length?function(e,t){var i=String(this);if(void 0===e&&0===t)return[];if(!r(e))return n.call(i,e,t);for(var o,a,s,u=[],l=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.unicode?"u":"")+(e.sticky?"y":""),f=0,p=void 0===t?4294967295:t>>>0,d=new RegExp(e.source,l+"g");(o=c.call(d,i))&&!((a=d.lastIndex)>f&&(u.push(i.slice(f,o.index)),o.length>1&&o.index<i.length&&h.apply(u,o.slice(1)),s=o[0].length,f=a,u.length>=p));)d.lastIndex===o.index&&d.lastIndex++;return f===i.length?!s&&d.test("")||u.push(""):u.push(i.slice(f)),u.length>p?u.slice(0,p):u}:"0".split(void 0,0).length?function(e,t){return void 0===e&&0===t?[]:n.call(this,e,t)}:n,[function(n,r){var i=e(this),o=null==n?void 0:n[t];return void 0!==o?o.call(n,i,r):d.call(String(i),n,r)},function(e,t){var r=l(d,e,this,t,d!==n);if(r.done)return r.value;var c=i(e),h=String(this),v=o(c,RegExp),y=c.unicode,g=(c.ignoreCase?"i":"")+(c.multiline?"m":"")+(c.unicode?"u":"")+(p?"y":"g"),m=new v(p?c:"^(?:"+c.source+")",g),b=void 0===t?4294967295:t>>>0;if(0===b)return[];if(0===h.length)return null===u(m,h)?[h]:[];for(var _=0,w=0,E=[];w<h.length;){m.lastIndex=p?w:0;var S,C=u(m,p?h:h.slice(w));if(null===C||(S=f(s(m.lastIndex+(p?0:w)),h.length))===_)w=a(h,w,y);else{if(E.push(h.slice(_,w)),E.length===b)return E;for(var T=1;T<=C.length-1;T++)if(E.push(C[T]),E.length===b)return E;w=_=S}}return E.push(h.slice(_)),E}]}))},function(e,t,n){"use strict";var r,i,o,a,s=n(37),u=n(4),c=n(26),l=n(53),f=n(0),h=n(6),p=n(13),d=n(47),v=n(48),y=n(60),g=n(104).set,m=n(105)(),b=n(106),_=n(136),w=n(72),E=n(137),S=u.TypeError,C=u.process,T=C&&C.versions,k=T&&T.v8||"",x=u.Promise,I="process"==l(C),P=function(){},O=i=b.f,N=!!function(){try{var e=x.resolve(1),t=(e.constructor={})[n(8)("species")]=function(e){e(P,P)};return(I||"function"==typeof PromiseRejectionEvent)&&e.then(P)instanceof t&&0!==k.indexOf("6.6")&&-1===w.indexOf("Chrome/66")}catch(e){}}(),A=function(e){var t;return!(!h(e)||"function"!=typeof(t=e.then))&&t},R=function(e,t){if(!e._n){e._n=!0;var n=e._c;m((function(){for(var r=e._v,i=1==e._s,o=0,a=function(t){var n,o,a,s=i?t.ok:t.fail,u=t.resolve,c=t.reject,l=t.domain;try{s?(i||(2==e._h&&L(e),e._h=1),!0===s?n=r:(l&&l.enter(),n=s(r),l&&(l.exit(),a=!0)),n===t.promise?c(S("Promise-chain cycle")):(o=A(n))?o.call(n,u,c):u(n)):c(r)}catch(e){l&&!a&&l.exit(),c(e)}};n.length>o;)a(n[o++]);e._c=[],e._n=!1,t&&!e._h&&D(e)}))}},D=function(e){g.call(u,(function(){var t,n,r,i=e._v,o=M(e);if(o&&(t=_((function(){I?C.emit("unhandledRejection",i,e):(n=u.onunhandledrejection)?n({promise:e,reason:i}):(r=u.console)&&r.error&&r.error("Unhandled promise rejection",i)})),e._h=I||M(e)?2:1),e._a=void 0,o&&t.e)throw t.v}))},M=function(e){return 1!==e._h&&0===(e._a||e._c).length},L=function(e){g.call(u,(function(){var t;I?C.emit("rejectionHandled",e):(t=u.onrejectionhandled)&&t({promise:e,reason:e._v})}))},F=function(e){var t=this;t._d||(t._d=!0,(t=t._w||t)._v=e,t._s=2,t._a||(t._a=t._c.slice()),R(t,!0))},j=function(e){var t,n=this;if(!n._d){n._d=!0,n=n._w||n;try{if(n===e)throw S("Promise can't be resolved itself");(t=A(e))?m((function(){var r={_w:n,_d:!1};try{t.call(e,c(j,r,1),c(F,r,1))}catch(e){F.call(r,e)}})):(n._v=e,n._s=1,R(n,!1))}catch(e){F.call({_w:n,_d:!1},e)}}};N||(x=function(e){d(this,x,"Promise","_h"),p(e),r.call(this);try{e(c(j,this,1),c(F,this,1))}catch(e){F.call(this,e)}},(r=function(e){this._c=[],this._a=void 0,this._s=0,this._d=!1,this._v=void 0,this._h=0,this._n=!1}).prototype=n(49)(x.prototype,{then:function(e,t){var n=O(y(this,x));return n.ok="function"!=typeof e||e,n.fail="function"==typeof t&&t,n.domain=I?C.domain:void 0,this._c.push(n),this._a&&this._a.push(n),this._s&&R(this,!1),n.promise},catch:function(e){return this.then(void 0,e)}}),o=function(){var e=new r;this.promise=e,this.resolve=c(j,e,1),this.reject=c(F,e,1)},b.f=O=function(e){return e===x||e===a?new o(e):i(e)}),f(f.G+f.W+f.F*!N,{Promise:x}),n(52)(x,"Promise"),n(46)("Promise"),a=n(25).Promise,f(f.S+f.F*!N,"Promise",{reject:function(e){var t=O(this);return(0,t.reject)(e),t.promise}}),f(f.S+f.F*(s||!N),"Promise",{resolve:function(e){return E(s&&this===a?x:this,e)}}),f(f.S+f.F*!(N&&n(69)((function(e){x.all(e).catch(P)}))),"Promise",{all:function(e){var t=this,n=O(t),r=n.resolve,i=n.reject,o=_((function(){var n=[],o=0,a=1;v(e,!1,(function(e){var s=o++,u=!1;n.push(void 0),a++,t.resolve(e).then((function(e){u||(u=!0,n[s]=e,--a||r(n))}),i)})),--a||r(n)}));return o.e&&i(o.v),n.promise},race:function(e){var t=this,n=O(t),r=n.reject,i=_((function(){v(e,!1,(function(e){t.resolve(e).then(n.resolve,r)}))}));return i.e&&r(i.v),n.promise}})},function(e,t,n){"use strict";var r=n(142),i=n(50);n(73)("WeakSet",(function(e){return function(){return e(this,arguments.length>0?arguments[0]:void 0)}}),{add:function(e){return r.def(i(this,"WeakSet"),e,!0)}},r,!1,!0)},function(e,t,n){"use strict";var r=n(0),i=n(74),o=n(107),a=n(3),s=n(43),u=n(9),c=n(6),l=n(4).ArrayBuffer,f=n(60),h=o.ArrayBuffer,p=o.DataView,d=i.ABV&&l.isView,v=h.prototype.slice,y=i.VIEW;r(r.G+r.W+r.F*(l!==h),{ArrayBuffer:h}),r(r.S+r.F*!i.CONSTR,"ArrayBuffer",{isView:function(e){return d&&d(e)||c(e)&&y in e}}),r(r.P+r.U+r.F*n(5)((function(){return!new h(2).slice(1,void 0).byteLength})),"ArrayBuffer",{slice:function(e,t){if(void 0!==v&&void 0===t)return v.call(a(this),e);for(var n=a(this).byteLength,r=s(e,n),i=s(void 0===t?n:t,n),o=new(f(this,h))(u(i-r)),c=new p(this),l=new p(o),d=0;r<i;)l.setUint8(d++,c.getUint8(r++));return o}}),n(46)("ArrayBuffer")},function(e,t,n){var r=n(0);r(r.G+r.W+r.F*!n(74).ABV,{DataView:n(107).DataView})},function(e,t,n){n(34)("Int8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Uint8",1,(function(e){return function(t,n,r){return e(this,t,n,r)}}),!0)},function(e,t,n){n(34)("Int16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Uint16",2,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Int32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Uint32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Float32",4,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){n(34)("Float64",8,(function(e){return function(t,n,r){return e(this,t,n,r)}}))},function(e,t,n){var r=n(0),i=n(13),o=n(3),a=(n(4).Reflect||{}).apply,s=Function.apply;r(r.S+r.F*!n(5)((function(){a((function(){}))})),"Reflect",{apply:function(e,t,n){var r=i(e),u=o(n);return a?a(r,t,u):s.call(r,t,u)}})},function(e,t,n){var r=n(0),i=n(44),o=n(13),a=n(3),s=n(6),u=n(5),c=n(122),l=(n(4).Reflect||{}).construct,f=u((function(){function e(){}return!(l((function(){}),[],e)instanceof e)})),h=!u((function(){l((function(){}))}));r(r.S+r.F*(f||h),"Reflect",{construct:function(e,t){o(e),a(t);var n=arguments.length<3?e:o(arguments[2]);if(h&&!f)return l(e,t,n);if(e==n){switch(t.length){case 0:return new e;case 1:return new e(t[0]);case 2:return new e(t[0],t[1]);case 3:return new e(t[0],t[1],t[2]);case 4:return new e(t[0],t[1],t[2],t[3])}var r=[null];return r.push.apply(r,t),new(c.apply(e,r))}var u=n.prototype,p=i(s(u)?u:Object.prototype),d=Function.apply.call(e,p,t);return s(d)?d:p}})},function(e,t,n){var r=n(11),i=n(0),o=n(3),a=n(30);i(i.S+i.F*n(5)((function(){Reflect.defineProperty(r.f({},1,{value:1}),1,{value:2})})),"Reflect",{defineProperty:function(e,t,n){o(e),t=a(t,!0),o(n);try{return r.f(e,t,n),!0}catch(e){return!1}}})},function(e,t,n){var r=n(0),i=n(22).f,o=n(3);r(r.S,"Reflect",{deleteProperty:function(e,t){var n=i(o(e),t);return!(n&&!n.configurable)&&delete e[t]}})},function(e,t,n){"use strict";var r=n(0),i=n(3),o=function(e){this._t=i(e),this._i=0;var t,n=this._k=[];for(t in e)n.push(t)};n(93)(o,"Object",(function(){var e,t=this._k;do{if(this._i>=t.length)return{value:void 0,done:!0}}while(!((e=t[this._i++])in this._t));return{value:e,done:!1}})),r(r.S,"Reflect",{enumerate:function(e){return new o(e)}})},function(e,t,n){var r=n(22),i=n(23),o=n(20),a=n(0),s=n(6),u=n(3);a(a.S,"Reflect",{get:function e(t,n){var a,c,l=arguments.length<3?t:arguments[2];return u(t)===l?t[n]:(a=r.f(t,n))?o(a,"value")?a.value:void 0!==a.get?a.get.call(l):void 0:s(c=i(t))?e(c,n,l):void 0}})},function(e,t,n){var r=n(22),i=n(0),o=n(3);i(i.S,"Reflect",{getOwnPropertyDescriptor:function(e,t){return r.f(o(e),t)}})},function(e,t,n){var r=n(0),i=n(23),o=n(3);r(r.S,"Reflect",{getPrototypeOf:function(e){return i(o(e))}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{has:function(e,t){return t in e}})},function(e,t,n){var r=n(0),i=n(3),o=Object.isExtensible;r(r.S,"Reflect",{isExtensible:function(e){return i(e),!o||o(e)}})},function(e,t,n){var r=n(0);r(r.S,"Reflect",{ownKeys:n(144)})},function(e,t,n){var r=n(0),i=n(3),o=Object.preventExtensions;r(r.S,"Reflect",{preventExtensions:function(e){i(e);try{return o&&o(e),!0}catch(e){return!1}}})},function(e,t,n){var r=n(11),i=n(22),o=n(23),a=n(20),s=n(0),u=n(40),c=n(3),l=n(6);s(s.S,"Reflect",{set:function e(t,n,s){var f,h,p=arguments.length<4?t:arguments[3],d=i.f(c(t),n);if(!d){if(l(h=o(t)))return e(h,n,s,p);d=u(0)}if(a(d,"value")){if(!1===d.writable||!l(p))return!1;if(f=i.f(p,n)){if(f.get||f.set||!1===f.writable)return!1;f.value=s,r.f(p,n,f)}else r.f(p,n,u(0,s));return!0}return void 0!==d.set&&(d.set.call(p,s),!0)}})},function(e,t,n){var r=n(0),i=n(86);i&&r(r.S,"Reflect",{setPrototypeOf:function(e,t){i.check(e,t);try{return i.set(e,t),!0}catch(e){return!1}}})},function(e,t,n){"use strict";var r=n(0),i=n(64)(!0);r(r.P,"Array",{includes:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0)}}),n(39)("includes")},function(e,t,n){"use strict";var r=n(0),i=n(145),o=n(12),a=n(9),s=n(13),u=n(99);r(r.P,"Array",{flatMap:function(e){var t,n,r=o(this);return s(e),t=a(r.length),n=u(r,0),i(n,r,r,t,0,1,e,arguments[1]),n}}),n(39)("flatMap")},function(e,t,n){"use strict";var r=n(0),i=n(145),o=n(12),a=n(9),s=n(28),u=n(99);r(r.P,"Array",{flatten:function(){var e=arguments[0],t=o(this),n=a(t.length),r=u(t,0);return i(r,t,t,n,0,void 0===e?1:s(e)),r}}),n(39)("flatten")},function(e,t,n){"use strict";var r=n(0),i=n(67)(!0);r(r.P,"String",{at:function(e){return i(this,e)}})},function(e,t,n){"use strict";var r=n(0),i=n(146),o=n(72),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padStart:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0,!0)}})},function(e,t,n){"use strict";var r=n(0),i=n(146),o=n(72),a=/Version\/10\.\d+(\.\d+)?( Mobile\/\w+)? Safari\//.test(o);r(r.P+r.F*a,"String",{padEnd:function(e){return i(this,e,arguments.length>1?arguments[1]:void 0,!1)}})},function(e,t,n){"use strict";n(54)("trimLeft",(function(e){return function(){return e(this,1)}}),"trimStart")},function(e,t,n){"use strict";n(54)("trimRight",(function(e){return function(){return e(this,2)}}),"trimEnd")},function(e,t,n){"use strict";var r=n(0),i=n(31),o=n(9),a=n(68),s=n(59),u=RegExp.prototype,c=function(e,t){this._r=e,this._s=t};n(93)(c,"RegExp String",(function(){var e=this._r.exec(this._s);return{value:e,done:null===e}})),r(r.P,"String",{matchAll:function(e){if(i(this),!a(e))throw TypeError(e+" is not a regexp!");var t=String(this),n="flags"in u?String(e.flags):s.call(e),r=new RegExp(e.source,~n.indexOf("g")?n:"g"+n);return r.lastIndex=o(e.lastIndex),new c(r,t)}})},function(e,t,n){n(82)("asyncIterator")},function(e,t,n){n(82)("observable")},function(e,t,n){var r=n(0),i=n(144),o=n(21),a=n(22),s=n(97);r(r.S,"Object",{getOwnPropertyDescriptors:function(e){for(var t,n,r=o(e),u=a.f,c=i(r),l={},f=0;c.length>f;)void 0!==(n=u(r,t=c[f++]))&&s(l,t,n);return l}})},function(e,t,n){var r=n(0),i=n(147)(!1);r(r.S,"Object",{values:function(e){return i(e)}})},function(e,t,n){var r=n(0),i=n(147)(!0);r(r.S,"Object",{entries:function(e){return i(e)}})},function(e,t,n){"use strict";var r=n(0),i=n(12),o=n(13),a=n(11);n(10)&&r(r.P+n(75),"Object",{__defineGetter__:function(e,t){a.f(i(this),e,{get:o(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),i=n(12),o=n(13),a=n(11);n(10)&&r(r.P+n(75),"Object",{__defineSetter__:function(e,t){a.f(i(this),e,{set:o(t),enumerable:!0,configurable:!0})}})},function(e,t,n){"use strict";var r=n(0),i=n(12),o=n(30),a=n(23),s=n(22).f;n(10)&&r(r.P+n(75),"Object",{__lookupGetter__:function(e){var t,n=i(this),r=o(e,!0);do{if(t=s(n,r))return t.get}while(n=a(n))}})},function(e,t,n){"use strict";var r=n(0),i=n(12),o=n(30),a=n(23),s=n(22).f;n(10)&&r(r.P+n(75),"Object",{__lookupSetter__:function(e){var t,n=i(this),r=o(e,!0);do{if(t=s(n,r))return t.set}while(n=a(n))}})},function(e,t,n){var r=n(0);r(r.P+r.R,"Map",{toJSON:n(148)("Map")})},function(e,t,n){var r=n(0);r(r.P+r.R,"Set",{toJSON:n(148)("Set")})},function(e,t,n){n(76)("Map")},function(e,t,n){n(76)("Set")},function(e,t,n){n(76)("WeakMap")},function(e,t,n){n(76)("WeakSet")},function(e,t,n){n(77)("Map")},function(e,t,n){n(77)("Set")},function(e,t,n){n(77)("WeakMap")},function(e,t,n){n(77)("WeakSet")},function(e,t,n){var r=n(0);r(r.G,{global:n(4)})},function(e,t,n){var r=n(0);r(r.S,"System",{global:n(4)})},function(e,t,n){var r=n(0),i=n(27);r(r.S,"Error",{isError:function(e){return"Error"===i(e)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{clamp:function(e,t,n){return Math.min(n,Math.max(t,e))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{DEG_PER_RAD:Math.PI/180})},function(e,t,n){var r=n(0),i=180/Math.PI;r(r.S,"Math",{degrees:function(e){return e*i}})},function(e,t,n){var r=n(0),i=n(150),o=n(129);r(r.S,"Math",{fscale:function(e,t,n,r,a){return o(i(e,t,n,r,a))}})},function(e,t,n){var r=n(0);r(r.S,"Math",{iaddh:function(e,t,n,r){var i=e>>>0,o=n>>>0;return(t>>>0)+(r>>>0)+((i&o|(i|o)&~(i+o>>>0))>>>31)|0}})},function(e,t,n){var r=n(0);r(r.S,"Math",{isubh:function(e,t,n,r){var i=e>>>0,o=n>>>0;return(t>>>0)-(r>>>0)-((~i&o|~(i^o)&i-o>>>0)>>>31)|0}})},function(e,t,n){var r=n(0);r(r.S,"Math",{imulh:function(e,t){var n=+e,r=+t,i=65535&n,o=65535&r,a=n>>16,s=r>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>16)+((i*s>>>0)+(65535&u)>>16)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{RAD_PER_DEG:180/Math.PI})},function(e,t,n){var r=n(0),i=Math.PI/180;r(r.S,"Math",{radians:function(e){return e*i}})},function(e,t,n){var r=n(0);r(r.S,"Math",{scale:n(150)})},function(e,t,n){var r=n(0);r(r.S,"Math",{umulh:function(e,t){var n=+e,r=+t,i=65535&n,o=65535&r,a=n>>>16,s=r>>>16,u=(a*o>>>0)+(i*o>>>16);return a*s+(u>>>16)+((i*s>>>0)+(65535&u)>>>16)}})},function(e,t,n){var r=n(0);r(r.S,"Math",{signbit:function(e){return(e=+e)!=e?e:0==e?1/e==1/0:e>0}})},function(e,t,n){"use strict";var r=n(0),i=n(25),o=n(4),a=n(60),s=n(137);r(r.P+r.R,"Promise",{finally:function(e){var t=a(this,i.Promise||o.Promise),n="function"==typeof e;return this.then(n?function(n){return s(t,e()).then((function(){return n}))}:e,n?function(n){return s(t,e()).then((function(){throw n}))}:e)}})},function(e,t,n){"use strict";var r=n(0),i=n(106),o=n(136);r(r.S,"Promise",{try:function(e){var t=i.f(this),n=o(e);return(n.e?t.reject:t.resolve)(n.v),t.promise}})},function(e,t,n){var r=n(35),i=n(3),o=r.key,a=r.set;r.exp({defineMetadata:function(e,t,n,r){a(e,t,i(n),o(r))}})},function(e,t,n){var r=n(35),i=n(3),o=r.key,a=r.map,s=r.store;r.exp({deleteMetadata:function(e,t){var n=arguments.length<3?void 0:o(arguments[2]),r=a(i(t),n,!1);if(void 0===r||!r.delete(e))return!1;if(r.size)return!0;var u=s.get(t);return u.delete(n),!!u.size||s.delete(t)}})},function(e,t,n){var r=n(35),i=n(3),o=n(23),a=r.has,s=r.get,u=r.key,c=function(e,t,n){if(a(e,t,n))return s(e,t,n);var r=o(t);return null!==r?c(e,r,n):void 0};r.exp({getMetadata:function(e,t){return c(e,i(t),arguments.length<3?void 0:u(arguments[2]))}})},function(e,t,n){var r=n(140),i=n(149),o=n(35),a=n(3),s=n(23),u=o.keys,c=o.key,l=function(e,t){var n=u(e,t),o=s(e);if(null===o)return n;var a=l(o,t);return a.length?n.length?i(new r(n.concat(a))):a:n};o.exp({getMetadataKeys:function(e){return l(a(e),arguments.length<2?void 0:c(arguments[1]))}})},function(e,t,n){var r=n(35),i=n(3),o=r.get,a=r.key;r.exp({getOwnMetadata:function(e,t){return o(e,i(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(35),i=n(3),o=r.keys,a=r.key;r.exp({getOwnMetadataKeys:function(e){return o(i(e),arguments.length<2?void 0:a(arguments[1]))}})},function(e,t,n){var r=n(35),i=n(3),o=n(23),a=r.has,s=r.key,u=function(e,t,n){if(a(e,t,n))return!0;var r=o(t);return null!==r&&u(e,r,n)};r.exp({hasMetadata:function(e,t){return u(e,i(t),arguments.length<3?void 0:s(arguments[2]))}})},function(e,t,n){var r=n(35),i=n(3),o=r.has,a=r.key;r.exp({hasOwnMetadata:function(e,t){return o(e,i(t),arguments.length<3?void 0:a(arguments[2]))}})},function(e,t,n){var r=n(35),i=n(3),o=n(13),a=r.key,s=r.set;r.exp({metadata:function(e,t){return function(n,r){s(e,t,(void 0!==r?i:o)(n),a(r))}}})},function(e,t,n){var r=n(0),i=n(105)(),o=n(4).process,a="process"==n(27)(o);r(r.G,{asap:function(e){var t=a&&o.domain;i(t?t.bind(e):e)}})},function(e,t,n){"use strict";var r=n(0),i=n(4),o=n(25),a=n(105)(),s=n(8)("observable"),u=n(13),c=n(3),l=n(47),f=n(49),h=n(15),p=n(48),d=p.RETURN,v=function(e){return null==e?void 0:u(e)},y=function(e){var t=e._c;t&&(e._c=void 0,t())},g=function(e){return void 0===e._o},m=function(e){g(e)||(e._o=void 0,y(e))},b=function(e,t){c(e),this._c=void 0,this._o=e,e=new _(this);try{var n=t(e),r=n;null!=n&&("function"==typeof n.unsubscribe?n=function(){r.unsubscribe()}:u(n),this._c=n)}catch(t){return void e.error(t)}g(this)&&y(this)};b.prototype=f({},{unsubscribe:function(){m(this)}});var _=function(e){this._s=e};_.prototype=f({},{next:function(e){var t=this._s;if(!g(t)){var n=t._o;try{var r=v(n.next);if(r)return r.call(n,e)}catch(e){try{m(t)}finally{throw e}}}},error:function(e){var t=this._s;if(g(t))throw e;var n=t._o;t._o=void 0;try{var r=v(n.error);if(!r)throw e;e=r.call(n,e)}catch(e){try{y(t)}finally{throw e}}return y(t),e},complete:function(e){var t=this._s;if(!g(t)){var n=t._o;t._o=void 0;try{var r=v(n.complete);e=r?r.call(n,e):void 0}catch(e){try{y(t)}finally{throw e}}return y(t),e}}});var w=function(e){l(this,w,"Observable","_f")._f=u(e)};f(w.prototype,{subscribe:function(e){return new b(e,this._f)},forEach:function(e){var t=this;return new(o.Promise||i.Promise)((function(n,r){u(e);var i=t.subscribe({next:function(t){try{return e(t)}catch(e){r(e),i.unsubscribe()}},error:r,complete:n})}))}}),f(w,{from:function(e){var t="function"==typeof this?this:w,n=v(c(e)[s]);if(n){var r=c(n.call(e));return r.constructor===t?r:new t((function(e){return r.subscribe(e)}))}return new t((function(t){var n=!1;return a((function(){if(!n){try{if(p(e,!1,(function(e){if(t.next(e),n)return d}))===d)return}catch(e){if(n)throw e;return void t.error(e)}t.complete()}})),function(){n=!0}}))},of:function(){for(var e=0,t=arguments.length,n=new Array(t);e<t;)n[e]=arguments[e++];return new("function"==typeof this?this:w)((function(e){var t=!1;return a((function(){if(!t){for(var r=0;r<n.length;++r)if(e.next(n[r]),t)return;e.complete()}})),function(){t=!0}}))}}),h(w.prototype,s,(function(){return this})),r(r.G,{Observable:w}),n(46)("Observable")},function(e,t,n){var r=n(4),i=n(0),o=n(72),a=[].slice,s=/MSIE .\./.test(o),u=function(e){return function(t,n){var r=arguments.length>2,i=!!r&&a.call(arguments,2);return e(r?function(){("function"==typeof t?t:Function(t)).apply(this,i)}:t,n)}};i(i.G+i.B+i.F*s,{setTimeout:u(r.setTimeout),setInterval:u(r.setInterval)})},function(e,t,n){var r=n(0),i=n(104);r(r.G+r.B,{setImmediate:i.set,clearImmediate:i.clear})},function(e,t,n){for(var r=n(101),i=n(42),o=n(16),a=n(4),s=n(15),u=n(55),c=n(8),l=c("iterator"),f=c("toStringTag"),h=u.Array,p={CSSRuleList:!0,CSSStyleDeclaration:!1,CSSValueList:!1,ClientRectList:!1,DOMRectList:!1,DOMStringList:!1,DOMTokenList:!0,DataTransferItemList:!1,FileList:!1,HTMLAllCollection:!1,HTMLCollection:!1,HTMLFormElement:!1,HTMLSelectElement:!1,MediaList:!0,MimeTypeArray:!1,NamedNodeMap:!1,NodeList:!0,PaintRequestList:!1,Plugin:!1,PluginArray:!1,SVGLengthList:!1,SVGNumberList:!1,SVGPathSegList:!1,SVGPointList:!1,SVGStringList:!1,SVGTransformList:!1,SourceBufferList:!1,StyleSheetList:!0,TextTrackCueList:!1,TextTrackList:!1,TouchList:!1},d=i(p),v=0;v<d.length;v++){var y,g=d[v],m=p[g],b=a[g],_=b&&b.prototype;if(_&&(_[l]||s(_,l,h),_[f]||s(_,f,g),u[g]=h,m))for(y in r)_[y]||o(_,y,r[y],!0)}},function(e,t,n){(function(t){!function(t){"use strict";var n=Object.prototype,r=n.hasOwnProperty,i="function"==typeof Symbol?Symbol:{},o=i.iterator||"@@iterator",a=i.asyncIterator||"@@asyncIterator",s=i.toStringTag||"@@toStringTag",u="object"==typeof e,c=t.regeneratorRuntime;if(c)u&&(e.exports=c);else{(c=t.regeneratorRuntime=u?e.exports:{}).wrap=v;var l={},f={};f[o]=function(){return this};var h=Object.getPrototypeOf,p=h&&h(h(k([])));p&&p!==n&&r.call(p,o)&&(f=p);var d=b.prototype=g.prototype=Object.create(f);m.prototype=d.constructor=b,b.constructor=m,b[s]=m.displayName="GeneratorFunction",c.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},c.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,b):(e.__proto__=b,s in e||(e[s]="GeneratorFunction")),e.prototype=Object.create(d),e},c.awrap=function(e){return{__await:e}},_(w.prototype),w.prototype[a]=function(){return this},c.AsyncIterator=w,c.async=function(e,t,n,r){var i=new w(v(e,t,n,r));return c.isGeneratorFunction(t)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},_(d),d[s]="Generator",d[o]=function(){return this},d.toString=function(){return"[object Generator]"},c.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},c.values=k,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(C),!e)for(var t in this)"t"===t.charAt(0)&&r.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function n(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var i=this.tryEntries.length-1;i>=0;--i){var o=this.tryEntries[i],a=o.completion;if("root"===o.tryLoc)return n("end");if(o.tryLoc<=this.prev){var s=r.call(o,"catchLoc"),u=r.call(o,"finallyLoc");if(s&&u){if(this.prev<o.catchLoc)return n(o.catchLoc,!0);if(this.prev<o.finallyLoc)return n(o.finallyLoc)}else if(s){if(this.prev<o.catchLoc)return n(o.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<o.finallyLoc)return n(o.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var i=this.tryEntries[n];if(i.tryLoc<=this.prev&&r.call(i,"finallyLoc")&&this.prev<i.finallyLoc){var o=i;break}}o&&("break"===e||"continue"===e)&&o.tryLoc<=t&&t<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=e,a.arg=t,o?(this.method="next",this.next=o.finallyLoc,l):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),l},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),C(n),l}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var i=r.arg;C(n)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:k(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),l}}}function v(e,t,n,r){var i=t&&t.prototype instanceof g?t:g,o=Object.create(i.prototype),a=new T(r||[]);return o._invoke=function(e,t,n){var r="suspendedStart";return function(i,o){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===i)throw o;return x()}for(n.method=i,n.arg=o;;){var a=n.delegate;if(a){var s=E(a,n);if(s){if(s===l)continue;return s}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=y(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===l)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}(e,n,a),o}function y(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}function g(){}function m(){}function b(){}function _(e){["next","throw","return"].forEach((function(t){e[t]=function(e){return this._invoke(t,e)}}))}function w(e){function n(t,i,o,a){var s=y(e[t],e,i);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&r.call(c,"__await")?Promise.resolve(c.__await).then((function(e){n("next",e,o,a)}),(function(e){n("throw",e,o,a)})):Promise.resolve(c).then((function(e){u.value=e,o(u)}),a)}a(s.arg)}var i;"object"==typeof t.process&&t.process.domain&&(n=t.process.domain.bind(n)),this._invoke=function(e,t){function r(){return new Promise((function(r,i){n(e,t,r,i)}))}return i=i?i.then(r,r):r()}}function E(e,t){var n=e.iterator[t.method];if(void 0===n){if(t.delegate=null,"throw"===t.method){if(e.iterator.return&&(t.method="return",t.arg=void 0,E(e,t),"throw"===t.method))return l;t.method="throw",t.arg=new TypeError("The iterator does not provide a 'throw' method")}return l}var r=y(n,e.iterator,t.arg);if("throw"===r.type)return t.method="throw",t.arg=r.arg,t.delegate=null,l;var i=r.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,l):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,l)}function S(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function C(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(S,this),this.reset(!0)}function k(e){if(e){var t=e[o];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var n=-1,i=function t(){for(;++n<e.length;)if(r.call(e,n))return t.value=e[n],t.done=!1,t;return t.value=void 0,t.done=!0,t};return i.next=i}}return{next:x}}function x(){return{value:void 0,done:!0}}}("object"==typeof t?t:"object"==typeof window?window:"object"==typeof self?self:this)}).call(this,n(51))},function(e,t,n){n(358),e.exports=n(25).RegExp.escape},function(e,t,n){var r=n(0),i=n(359)(/[\\^$*+?.()|[\]{}]/g,"\\$&");r(r.S,"RegExp",{escape:function(e){return i(e)}})},function(e,t){e.exports=function(e,t){var n=t===Object(t)?function(e){return t[e]}:t;return function(t){return String(t).replace(e,n)}}},function(e,t,n){"use strict";var r=h(n(1)),i=h(n(108)),o=n(61),a=n(369),s=h(a),u=h(n(383)),c=n(109);n(387),n(389),n(390);var l=n(152),f=h(n(386));function h(e){return e&&e.__esModule?e:{default:e}}var p=(0,u.default)(),d=r.default.createElement(o.Provider,{store:p},r.default.createElement(s.default,null)),v=!1,y=function(){v||(i.default.render(d,document.getElementById("app")),v=!0)};i.default.render(r.default.createElement(f.default,null),document.getElementById("app")),l.firebase.auth().onAuthStateChanged((function(e){e?(p.dispatch((0,c.login)(e.uid)),y(),"/"===a.history.location.pathname&&a.history.push("/dashboard")):(p.dispatch((0,c.logout)()),y(),a.history.push("/"))}))},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(151),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,s=i?Symbol.for("react.fragment"):60107,u=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,l=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,h=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113;i&&Symbol.for("react.suspense_list");var d=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116;i&&Symbol.for("react.fundamental"),i&&Symbol.for("react.responder"),i&&Symbol.for("react.scope");var y="function"==typeof Symbol&&Symbol.iterator;function g(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var m={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},b={};function _(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||m}function w(){}function E(e,t,n){this.props=e,this.context=t,this.refs=b,this.updater=n||m}_.prototype.isReactComponent={},_.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(g(85));this.updater.enqueueSetState(this,e,t,"setState")},_.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},w.prototype=_.prototype;var S=E.prototype=new w;S.constructor=E,r(S,_.prototype),S.isPureReactComponent=!0;var C={current:null},T={current:null},k=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function I(e,t,n){var r,i={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!x.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var c=Array(u),l=0;l<u;l++)c[l]=arguments[l+2];i.children=c}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:o,type:e,key:a,ref:s,props:i,_owner:T.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var O=/\/+/g,N=[];function A(e,t,n,r){if(N.length){var i=N.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function R(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>N.length&&N.push(e)}function D(e,t,n){return null==e?0:function e(t,n,r,i){var s=typeof t;"undefined"!==s&&"boolean"!==s||(t=null);var u=!1;if(null===t)u=!0;else switch(s){case"string":case"number":u=!0;break;case"object":switch(t.$$typeof){case o:case a:u=!0}}if(u)return r(i,t,""===n?"."+M(t,0):n),1;if(u=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var l=n+M(s=t[c],c);u+=e(s,l,r,i)}else if(null===t||"object"!=typeof t?l=null:l="function"==typeof(l=y&&t[y]||t["@@iterator"])?l:null,"function"==typeof l)for(t=l.call(t),c=0;!(s=t.next()).done;)u+=e(s=s.value,l=n+M(s,c++),r,i);else if("object"===s)throw r=""+t,Error(g(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return u}(e,"",t,n)}function M(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function L(e,t){e.func.call(e.context,t,e.count++)}function F(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?j(e,r,n,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(O,"$&/")+"/")+n)),r.push(e))}function j(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(O,"$&/")+"/"),D(e,F,t=A(t,o,r,i)),R(t)}function U(){var e=C.current;if(null===e)throw Error(g(321));return e}var W={Children:{map:function(e,t,n){if(null==e)return e;var r=[];return j(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;D(e,L,t=A(null,null,t,n)),R(t)},count:function(e){return D(e,(function(){return null}),null)},toArray:function(e){var t=[];return j(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(g(143));return e}},createRef:function(){return{current:null}},Component:_,PureComponent:E,createContext:function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:l,_context:e},e.Consumer=e},forwardRef:function(e){return{$$typeof:h,render:e}},lazy:function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},memo:function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},useCallback:function(e,t){return U().useCallback(e,t)},useContext:function(e,t){return U().useContext(e,t)},useEffect:function(e,t){return U().useEffect(e,t)},useImperativeHandle:function(e,t,n){return U().useImperativeHandle(e,t,n)},useDebugValue:function(){},useLayoutEffect:function(e,t){return U().useLayoutEffect(e,t)},useMemo:function(e,t){return U().useMemo(e,t)},useReducer:function(e,t,n){return U().useReducer(e,t,n)},useRef:function(e){return U().useRef(e)},useState:function(e){return U().useState(e)},Fragment:s,Profiler:c,StrictMode:u,Suspense:p,createElement:I,cloneElement:function(e,t,n){if(null==e)throw Error(g(267,e));var i=r({},e.props),a=e.key,s=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,u=T.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(l in t)k.call(t,l)&&!x.hasOwnProperty(l)&&(i[l]=void 0===t[l]&&void 0!==c?c[l]:t[l])}var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){c=Array(l);for(var f=0;f<l;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:s,props:i,_owner:u}},createFactory:function(e){var t=I.bind(null,e);return t.type=e,t},isValidElement:P,version:"16.12.0",__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{ReactCurrentDispatcher:C,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:T,IsSomeRendererActing:{current:!1},assign:r}},V={default:W},q=V&&W||V;e.exports=q.default||q},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(1),i=n(151),o=n(363);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=null,u={};function c(){if(s)for(var e in u){var t=u[e],n=s.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!f[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in f[n]=t,n=t.eventTypes){var i=void 0,o=n[r],c=t,p=r;if(h.hasOwnProperty(p))throw Error(a(99,p));h[p]=o;var d=o.phasedRegistrationNames;if(d){for(i in d)d.hasOwnProperty(i)&&l(d[i],c,p);i=!0}else o.registrationName?(l(o.registrationName,c,p),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function l(e,t,n){if(p[e])throw Error(a(100,e));p[e]=t,d[e]=t.eventTypes[n].dependencies}var f=[],h={},p={},d={};function v(e,t,n,r,i,o,a,s,u){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var y=!1,g=null,m=!1,b=null,_={onError:function(e){y=!0,g=e}};function w(e,t,n,r,i,o,a,s,u){y=!1,g=null,v.apply(_,arguments)}var E=null,S=null,C=null;function T(e,t,n){var r=e.type||"unknown-event";e.currentTarget=C(n),function(e,t,n,r,i,o,s,u,c){if(w.apply(this,arguments),y){if(!y)throw Error(a(198));var l=g;y=!1,g=null,m||(m=!0,b=l)}}(r,t,void 0,e),e.currentTarget=null}function k(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function x(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var I=null;function P(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)T(e,t[r],n[r]);else t&&T(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function O(e){if(null!==e&&(I=k(I,e)),e=I,I=null,e){if(x(e,P),I)throw Error(a(95));if(m)throw e=b,m=!1,b=null,e}}var N={injectEventPluginOrder:function(e){if(s)throw Error(a(101));s=Array.prototype.slice.call(e),c()},injectEventPluginsByName:function(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!u.hasOwnProperty(t)||u[t]!==r){if(u[t])throw Error(a(102,t));u[t]=r,n=!0}}n&&c()}};function A(e,t){var n=e.stateNode;if(!n)return null;var r=E(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var R=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;R.hasOwnProperty("ReactCurrentDispatcher")||(R.ReactCurrentDispatcher={current:null}),R.hasOwnProperty("ReactCurrentBatchConfig")||(R.ReactCurrentBatchConfig={suspense:null});var D=/^(.*)[\\\/]/,M="function"==typeof Symbol&&Symbol.for,L=M?Symbol.for("react.element"):60103,F=M?Symbol.for("react.portal"):60106,j=M?Symbol.for("react.fragment"):60107,U=M?Symbol.for("react.strict_mode"):60108,W=M?Symbol.for("react.profiler"):60114,V=M?Symbol.for("react.provider"):60109,q=M?Symbol.for("react.context"):60110,B=M?Symbol.for("react.concurrent_mode"):60111,H=M?Symbol.for("react.forward_ref"):60112,z=M?Symbol.for("react.suspense"):60113,Q=M?Symbol.for("react.suspense_list"):60120,K=M?Symbol.for("react.memo"):60115,G=M?Symbol.for("react.lazy"):60116;M&&Symbol.for("react.fundamental"),M&&Symbol.for("react.responder"),M&&Symbol.for("react.scope");var Y="function"==typeof Symbol&&Symbol.iterator;function $(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=Y&&e[Y]||e["@@iterator"])?e:null}function X(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case j:return"Fragment";case F:return"Portal";case W:return"Profiler";case U:return"StrictMode";case z:return"Suspense";case Q:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case q:return"Context.Consumer";case V:return"Context.Provider";case H:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case K:return X(e.type);case G:if(e=1===e._status?e._result:null)return X(e)}return null}function J(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=X(e.type);n=null,r&&(n=X(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(D,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}var Z=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),ee=null,te=null,ne=null;function re(e){if(e=S(e)){if("function"!=typeof ee)throw Error(a(280));var t=E(e.stateNode);ee(e.stateNode,e.type,t)}}function ie(e){te?ne?ne.push(e):ne=[e]:te=e}function oe(){if(te){var e=te,t=ne;if(ne=te=null,re(e),t)for(e=0;e<t.length;e++)re(t[e])}}function ae(e,t){return e(t)}function se(e,t,n,r){return e(t,n,r)}function ue(){}var ce=ae,le=!1,fe=!1;function he(){null===te&&null===ne||(ue(),oe())}new Map;var pe=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,de=Object.prototype.hasOwnProperty,ve={},ye={};function ge(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var me={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){me[e]=new ge(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];me[t]=new ge(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){me[e]=new ge(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){me[e]=new ge(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){me[e]=new ge(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){me[e]=new ge(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){me[e]=new ge(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){me[e]=new ge(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){me[e]=new ge(e,5,!1,e.toLowerCase(),null,!1)}));var be=/[\-:]([a-z])/g;function _e(e){return e[1].toUpperCase()}function we(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Ee(e,t,n,r){var i=me.hasOwnProperty(t)?me[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!de.call(ye,e)||!de.call(ve,e)&&(pe.test(e)?ye[e]=!0:(ve[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}function Se(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function Ce(e){e._valueTracker||(e._valueTracker=function(e){var t=Se(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Te(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Se(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function ke(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function xe(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=we(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Ie(e,t){null!=(t=t.checked)&&Ee(e,"checked",t,!1)}function Pe(e,t){Ie(e,t);var n=we(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Ne(e,t.type,n):t.hasOwnProperty("defaultValue")&&Ne(e,t.type,we(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Oe(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!e.defaultChecked,e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Ne(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ae(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Re(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+we(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function De(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Me(e,t){var n=t.value;if(null==n){if(n=t.defaultValue,null!=(t=t.children)){if(null!=n)throw Error(a(92));if(Array.isArray(t)){if(!(1>=t.length))throw Error(a(93));t=t[0]}n=t}null==n&&(n="")}e._wrapperState={initialValue:we(n)}}function Le(e,t){var n=we(t.value),r=we(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Fe(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(be,_e);me[t]=new ge(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(be,_e);me[t]=new ge(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(be,_e);me[t]=new ge(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){me[e]=new ge(e,1,!1,e.toLowerCase(),null,!1)})),me.xlinkHref=new ge("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){me[e]=new ge(e,1,!1,e.toLowerCase(),null,!0)}));var je="http://www.w3.org/1999/xhtml",Ue="http://www.w3.org/2000/svg";function We(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ve(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?We(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var qe,Be=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==Ue||"innerHTML"in e)e.innerHTML=t;else{for((qe=qe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=qe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function He(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function ze(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Qe={animationend:ze("Animation","AnimationEnd"),animationiteration:ze("Animation","AnimationIteration"),animationstart:ze("Animation","AnimationStart"),transitionend:ze("Transition","TransitionEnd")},Ke={},Ge={};function Ye(e){if(Ke[e])return Ke[e];if(!Qe[e])return e;var t,n=Qe[e];for(t in n)if(n.hasOwnProperty(t)&&t in Ge)return Ke[e]=n[t];return e}Z&&(Ge=document.createElement("div").style,"AnimationEvent"in window||(delete Qe.animationend.animation,delete Qe.animationiteration.animation,delete Qe.animationstart.animation),"TransitionEvent"in window||delete Qe.transitionend.transition);var $e=Ye("animationend"),Xe=Ye("animationiteration"),Je=Ye("animationstart"),Ze=Ye("transitionend"),et="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" ");function tt(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function nt(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function rt(e){if(tt(e)!==e)throw Error(a(188))}function it(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=tt(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return rt(i),e;if(o===r)return rt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,u=i.child;u;){if(u===n){s=!0,n=i,r=o;break}if(u===r){s=!0,r=i,n=o;break}u=u.sibling}if(!s){for(u=o.child;u;){if(u===n){s=!0,n=o,r=i;break}if(u===r){s=!0,r=o,n=i;break}u=u.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}var ot,at,st,ut=!1,ct=[],lt=null,ft=null,ht=null,pt=new Map,dt=new Map,vt=[],yt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),gt="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function mt(e,t,n,r){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:r}}function bt(e,t){switch(e){case"focus":case"blur":lt=null;break;case"dragenter":case"dragleave":ft=null;break;case"mouseover":case"mouseout":ht=null;break;case"pointerover":case"pointerout":pt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":dt.delete(t.pointerId)}}function _t(e,t,n,r,i){return null===e||e.nativeEvent!==i?(e=mt(t,n,r,i),null!==t&&(null!==(t=cr(t))&&at(t)),e):(e.eventSystemFlags|=r,e)}function wt(e){var t=ur(e.target);if(null!==t){var n=tt(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=nt(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){st(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Et(e){if(null!==e.blockedOn)return!1;var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);if(null!==t){var n=cr(t);return null!==n&&at(n),e.blockedOn=t,!1}return!0}function St(e,t,n){Et(e)&&n.delete(t)}function Ct(){for(ut=!1;0<ct.length;){var e=ct[0];if(null!==e.blockedOn){null!==(e=cr(e.blockedOn))&&ot(e);break}var t=Nn(e.topLevelType,e.eventSystemFlags,e.nativeEvent);null!==t?e.blockedOn=t:ct.shift()}null!==lt&&Et(lt)&&(lt=null),null!==ft&&Et(ft)&&(ft=null),null!==ht&&Et(ht)&&(ht=null),pt.forEach(St),dt.forEach(St)}function Tt(e,t){e.blockedOn===t&&(e.blockedOn=null,ut||(ut=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Ct)))}function kt(e){function t(t){return Tt(t,e)}if(0<ct.length){Tt(ct[0],e);for(var n=1;n<ct.length;n++){var r=ct[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==lt&&Tt(lt,e),null!==ft&&Tt(ft,e),null!==ht&&Tt(ht,e),pt.forEach(t),dt.forEach(t),n=0;n<vt.length;n++)(r=vt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<vt.length&&null===(n=vt[0]).blockedOn;)wt(n),null===n.blockedOn&&vt.shift()}function xt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function It(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function Pt(e,t,n){(t=A(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function Ot(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=It(t);for(t=n.length;0<t--;)Pt(n[t],"captured",e);for(t=0;t<n.length;t++)Pt(n[t],"bubbled",e)}}function Nt(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=A(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=k(n._dispatchListeners,t),n._dispatchInstances=k(n._dispatchInstances,e))}function At(e){e&&e.dispatchConfig.registrationName&&Nt(e._targetInst,null,e)}function Rt(e){x(e,Ot)}function Dt(){return!0}function Mt(){return!1}function Lt(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Dt:Mt,this.isPropagationStopped=Mt,this}function Ft(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function jt(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Ut(e){e.eventPool=[],e.getPooled=Ft,e.release=jt}i(Lt.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Dt)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Dt)},persist:function(){this.isPersistent=Dt},isPersistent:Mt,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Mt,this._dispatchInstances=this._dispatchListeners=null}}),Lt.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Lt.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Ut(n),n},Ut(Lt);var Wt=Lt.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Vt=Lt.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),qt=Lt.extend({view:null,detail:null}),Bt=qt.extend({relatedTarget:null});function Ht(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var zt={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Qt={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Kt={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Gt(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Kt[e])&&!!t[e]}function Yt(){return Gt}for(var $t=qt.extend({key:function(e){if(e.key){var t=zt[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Ht(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Qt[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Yt,charCode:function(e){return"keypress"===e.type?Ht(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Ht(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Xt=0,Jt=0,Zt=!1,en=!1,tn=qt.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Yt,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Xt;return Xt=e.screenX,Zt?"mousemove"===e.type?e.screenX-t:0:(Zt=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Jt;return Jt=e.screenY,en?"mousemove"===e.type?e.screenY-t:0:(en=!0,0)}}),nn=tn.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),rn=tn.extend({dataTransfer:null}),on=qt.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Yt}),an=Lt.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),sn=tn.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),un=[["blur","blur",0],["cancel","cancel",0],["click","click",0],["close","close",0],["contextmenu","contextMenu",0],["copy","copy",0],["cut","cut",0],["auxclick","auxClick",0],["dblclick","doubleClick",0],["dragend","dragEnd",0],["dragstart","dragStart",0],["drop","drop",0],["focus","focus",0],["input","input",0],["invalid","invalid",0],["keydown","keyDown",0],["keypress","keyPress",0],["keyup","keyUp",0],["mousedown","mouseDown",0],["mouseup","mouseUp",0],["paste","paste",0],["pause","pause",0],["play","play",0],["pointercancel","pointerCancel",0],["pointerdown","pointerDown",0],["pointerup","pointerUp",0],["ratechange","rateChange",0],["reset","reset",0],["seeked","seeked",0],["submit","submit",0],["touchcancel","touchCancel",0],["touchend","touchEnd",0],["touchstart","touchStart",0],["volumechange","volumeChange",0],["drag","drag",1],["dragenter","dragEnter",1],["dragexit","dragExit",1],["dragleave","dragLeave",1],["dragover","dragOver",1],["mousemove","mouseMove",1],["mouseout","mouseOut",1],["mouseover","mouseOver",1],["pointermove","pointerMove",1],["pointerout","pointerOut",1],["pointerover","pointerOver",1],["scroll","scroll",1],["toggle","toggle",1],["touchmove","touchMove",1],["wheel","wheel",1],["abort","abort",2],[$e,"animationEnd",2],[Xe,"animationIteration",2],[Je,"animationStart",2],["canplay","canPlay",2],["canplaythrough","canPlayThrough",2],["durationchange","durationChange",2],["emptied","emptied",2],["encrypted","encrypted",2],["ended","ended",2],["error","error",2],["gotpointercapture","gotPointerCapture",2],["load","load",2],["loadeddata","loadedData",2],["loadedmetadata","loadedMetadata",2],["loadstart","loadStart",2],["lostpointercapture","lostPointerCapture",2],["playing","playing",2],["progress","progress",2],["seeking","seeking",2],["stalled","stalled",2],["suspend","suspend",2],["timeupdate","timeUpdate",2],[Ze,"transitionEnd",2],["waiting","waiting",2]],cn={},ln={},fn=0;fn<un.length;fn++){var hn=un[fn],pn=hn[0],dn=hn[1],vn=hn[2],yn="on"+(dn[0].toUpperCase()+dn.slice(1)),gn={phasedRegistrationNames:{bubbled:yn,captured:yn+"Capture"},dependencies:[pn],eventPriority:vn};cn[dn]=gn,ln[pn]=gn}var mn={eventTypes:cn,getEventPriority:function(e){return void 0!==(e=ln[e])?e.eventPriority:2},extractEvents:function(e,t,n,r){var i=ln[e];if(!i)return null;switch(e){case"keypress":if(0===Ht(n))return null;case"keydown":case"keyup":e=$t;break;case"blur":case"focus":e=Bt;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=tn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=rn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=on;break;case $e:case Xe:case Je:e=Wt;break;case Ze:e=an;break;case"scroll":e=qt;break;case"wheel":e=sn;break;case"copy":case"cut":case"paste":e=Vt;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=nn;break;default:e=Lt}return Rt(t=e.getPooled(i,t,n,r)),t}},bn=o.unstable_UserBlockingPriority,_n=o.unstable_runWithPriority,wn=mn.getEventPriority,En=[];function Sn(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=ur(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=xt(e.nativeEvent);r=e.topLevelType;for(var o=e.nativeEvent,a=e.eventSystemFlags,s=null,u=0;u<f.length;u++){var c=f[u];c&&(c=c.extractEvents(r,t,o,i,a))&&(s=k(s,c))}O(s)}}var Cn=!0;function Tn(e,t){kn(t,e,!1)}function kn(e,t,n){switch(wn(t)){case 0:var r=xn.bind(null,t,1);break;case 1:r=In.bind(null,t,1);break;default:r=On.bind(null,t,1)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function xn(e,t,n){le||ue();var r=On,i=le;le=!0;try{se(r,e,t,n)}finally{(le=i)||he()}}function In(e,t,n){_n(bn,On.bind(null,e,t,n))}function Pn(e,t,n,r){if(En.length){var i=En.pop();i.topLevelType=e,i.eventSystemFlags=t,i.nativeEvent=n,i.targetInst=r,e=i}else e={topLevelType:e,eventSystemFlags:t,nativeEvent:n,targetInst:r,ancestors:[]};try{if(t=Sn,n=e,fe)t(n,void 0);else{fe=!0;try{ce(t,n,void 0)}finally{fe=!1,he()}}}finally{e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,En.length<10&&En.push(e)}}function On(e,t,n){if(Cn)if(0<ct.length&&-1<yt.indexOf(e))e=mt(null,e,t,n),ct.push(e);else{var r=Nn(e,t,n);null===r?bt(e,n):-1<yt.indexOf(e)?(e=mt(r,e,t,n),ct.push(e)):function(e,t,n,r){switch(t){case"focus":return lt=_t(lt,e,t,n,r),!0;case"dragenter":return ft=_t(ft,e,t,n,r),!0;case"mouseover":return ht=_t(ht,e,t,n,r),!0;case"pointerover":var i=r.pointerId;return pt.set(i,_t(pt.get(i)||null,e,t,n,r)),!0;case"gotpointercapture":return i=r.pointerId,dt.set(i,_t(dt.get(i)||null,e,t,n,r)),!0}return!1}(r,e,t,n)||(bt(e,n),Pn(e,t,n,null))}}function Nn(e,t,n){var r=xt(n);if(null!==(r=ur(r))){var i=tt(r);if(null===i)r=null;else{var o=i.tag;if(13===o){if(null!==(r=nt(i)))return r;r=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;r=null}else i!==r&&(r=null)}}return Pn(e,t,n,r),null}function An(e){if(!Z)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var Rn=new("function"==typeof WeakMap?WeakMap:Map);function Dn(e){var t=Rn.get(e);return void 0===t&&(t=new Set,Rn.set(e,t)),t}function Mn(e,t,n){if(!n.has(e)){switch(e){case"scroll":kn(t,"scroll",!0);break;case"focus":case"blur":kn(t,"focus",!0),kn(t,"blur",!0),n.add("blur"),n.add("focus");break;case"cancel":case"close":An(e)&&kn(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===et.indexOf(e)&&Tn(e,t)}n.add(e)}}var Ln={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},Fn=["Webkit","ms","Moz","O"];function jn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Ln.hasOwnProperty(e)&&Ln[e]?(""+t).trim():t+"px"}function Un(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=jn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Ln).forEach((function(e){Fn.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Ln[t]=Ln[e]}))}));var Wn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function Vn(e,t){if(t){if(Wn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if(!("object"==typeof t.dangerouslySetInnerHTML&&"__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function qn(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Bn(e,t){var n=Dn(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=d[t];for(var r=0;r<t.length;r++)Mn(t[r],e,n)}function Hn(){}function zn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Qn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function Kn(e,t){var n,r=Qn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=Qn(r)}}function Gn(){for(var e=window,t=zn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=zn((e=t.contentWindow).document)}return t}function Yn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var $n=null,Xn=null;function Jn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Zn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var er="function"==typeof setTimeout?setTimeout:void 0,tr="function"==typeof clearTimeout?clearTimeout:void 0;function nr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function rr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var ir=Math.random().toString(36).slice(2),or="__reactInternalInstance$"+ir,ar="__reactEventHandlers$"+ir,sr="__reactContainere$"+ir;function ur(e){var t=e[or];if(t)return t;for(var n=e.parentNode;n;){if(t=n[sr]||n[or]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=rr(e);null!==e;){if(n=e[or])return n;e=rr(e)}return t}n=(e=n).parentNode}return null}function cr(e){return!(e=e[or]||e[sr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function lr(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function fr(e){return e[ar]||null}var hr=null,pr=null,dr=null;function vr(){if(dr)return dr;var e,t,n=pr,r=n.length,i="value"in hr?hr.value:hr.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return dr=i.slice(e,1<t?1-t:void 0)}var yr=Lt.extend({data:null}),gr=Lt.extend({data:null}),mr=[9,13,27,32],br=Z&&"CompositionEvent"in window,_r=null;Z&&"documentMode"in document&&(_r=document.documentMode);var wr=Z&&"TextEvent"in window&&!_r,Er=Z&&(!br||_r&&8<_r&&11>=_r),Sr=String.fromCharCode(32),Cr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},Tr=!1;function kr(e,t){switch(e){case"keyup":return-1!==mr.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function xr(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Ir=!1;var Pr={eventTypes:Cr,extractEvents:function(e,t,n,r){var i;if(br)e:{switch(e){case"compositionstart":var o=Cr.compositionStart;break e;case"compositionend":o=Cr.compositionEnd;break e;case"compositionupdate":o=Cr.compositionUpdate;break e}o=void 0}else Ir?kr(e,n)&&(o=Cr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=Cr.compositionStart);return o?(Er&&"ko"!==n.locale&&(Ir||o!==Cr.compositionStart?o===Cr.compositionEnd&&Ir&&(i=vr()):(pr="value"in(hr=r)?hr.value:hr.textContent,Ir=!0)),o=yr.getPooled(o,t,n,r),i?o.data=i:null!==(i=xr(n))&&(o.data=i),Rt(o),i=o):i=null,(e=wr?function(e,t){switch(e){case"compositionend":return xr(t);case"keypress":return 32!==t.which?null:(Tr=!0,Sr);case"textInput":return(e=t.data)===Sr&&Tr?null:e;default:return null}}(e,n):function(e,t){if(Ir)return"compositionend"===e||!br&&kr(e,t)?(e=vr(),dr=pr=hr=null,Ir=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=gr.getPooled(Cr.beforeInput,t,n,r)).data=e,Rt(t)):t=null,null===i?t:null===t?i:[i,t]}},Or={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Nr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Or[e.type]:"textarea"===t}var Ar={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function Rr(e,t,n){return(e=Lt.getPooled(Ar.change,e,t,n)).type="change",ie(n),Rt(e),e}var Dr=null,Mr=null;function Lr(e){O(e)}function Fr(e){if(Te(lr(e)))return e}function jr(e,t){if("change"===e)return t}var Ur=!1;function Wr(){Dr&&(Dr.detachEvent("onpropertychange",Vr),Mr=Dr=null)}function Vr(e){if("value"===e.propertyName&&Fr(Mr))if(e=Rr(Mr,e,xt(e)),le)O(e);else{le=!0;try{ae(Lr,e)}finally{le=!1,he()}}}function qr(e,t,n){"focus"===e?(Wr(),Mr=n,(Dr=t).attachEvent("onpropertychange",Vr)):"blur"===e&&Wr()}function Br(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Fr(Mr)}function Hr(e,t){if("click"===e)return Fr(t)}function zr(e,t){if("input"===e||"change"===e)return Fr(t)}Z&&(Ur=An("input")&&(!document.documentMode||9<document.documentMode));var Qr,Kr={eventTypes:Ar,_isInputEventSupported:Ur,extractEvents:function(e,t,n,r){var i=t?lr(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=jr;else if(Nr(i))if(Ur)a=zr;else{a=Br;var s=qr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Hr);if(a&&(a=a(e,t)))return Rr(a,n,r);s&&s(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Ne(i,"number",i.value)}},Gr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Yr={eventTypes:Gr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;if(i=r.window===r?r:(i=r.ownerDocument)?i.defaultView||i.parentWindow:window,a?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?ur(t):null)&&(t!==(o=tt(t))||5!==t.tag&&6!==t.tag)&&(t=null)):a=null,a===t)return null;if("mouseout"===e||"mouseover"===e)var s=tn,u=Gr.mouseLeave,c=Gr.mouseEnter,l="mouse";else"pointerout"!==e&&"pointerover"!==e||(s=nn,u=Gr.pointerLeave,c=Gr.pointerEnter,l="pointer");if(e=null==a?i:lr(a),i=null==t?i:lr(t),(u=s.getPooled(u,a,n,r)).type=l+"leave",u.target=e,u.relatedTarget=i,(r=s.getPooled(c,t,n,r)).type=l+"enter",r.target=i,r.relatedTarget=e,l=t,(s=a)&&l)e:{for(e=l,a=0,t=c=s;t;t=It(t))a++;for(t=0,i=e;i;i=It(i))t++;for(;0<a-t;)c=It(c),a--;for(;0<t-a;)e=It(e),t--;for(;a--;){if(c===e||c===e.alternate)break e;c=It(c),e=It(e)}c=null}else c=null;for(e=c,c=[];s&&s!==e&&(null===(a=s.alternate)||a!==e);)c.push(s),s=It(s);for(s=[];l&&l!==e&&(null===(a=l.alternate)||a!==e);)s.push(l),l=It(l);for(l=0;l<c.length;l++)Nt(c[l],"bubbled",u);for(l=s.length;0<l--;)Nt(s[l],"captured",r);return n===Qr?(Qr=null,[u]):(Qr=n,[u,r])}};var $r="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},Xr=Object.prototype.hasOwnProperty;function Jr(e,t){if($r(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!Xr.call(t,n[r])||!$r(e[n[r]],t[n[r]]))return!1;return!0}var Zr=Z&&"documentMode"in document&&11>=document.documentMode,ei={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ti=null,ni=null,ri=null,ii=!1;function oi(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return ii||null==ti||ti!==zn(n)?null:("selectionStart"in(n=ti)&&Yn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},ri&&Jr(ri,n)?null:(ri=n,(e=Lt.getPooled(ei.select,ni,e,t)).type="select",e.target=ti,Rt(e),e))}var ai={eventTypes:ei,extractEvents:function(e,t,n,r){var i,o=r.window===r?r.document:9===r.nodeType?r:r.ownerDocument;if(!(i=!o)){e:{o=Dn(o),i=d.onSelect;for(var a=0;a<i.length;a++)if(!o.has(i[a])){o=!1;break e}o=!0}i=!o}if(i)return null;switch(o=t?lr(t):window,e){case"focus":(Nr(o)||"true"===o.contentEditable)&&(ti=o,ni=t,ri=null);break;case"blur":ri=ni=ti=null;break;case"mousedown":ii=!0;break;case"contextmenu":case"mouseup":case"dragend":return ii=!1,oi(n,r);case"selectionchange":if(Zr)break;case"keydown":case"keyup":return oi(n,r)}return null}};N.injectEventPluginOrder("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),E=fr,S=cr,C=lr,N.injectEventPluginsByName({SimpleEventPlugin:mn,EnterLeaveEventPlugin:Yr,ChangeEventPlugin:Kr,SelectEventPlugin:ai,BeforeInputEventPlugin:Pr}),new Set;var si=[],ui=-1;function ci(e){0>ui||(e.current=si[ui],si[ui]=null,ui--)}function li(e,t){ui++,si[ui]=e.current,e.current=t}var fi={},hi={current:fi},pi={current:!1},di=fi;function vi(e,t){var n=e.type.contextTypes;if(!n)return fi;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function yi(e){return null!=(e=e.childContextTypes)}function gi(e){ci(pi),ci(hi)}function mi(e){ci(pi),ci(hi)}function bi(e,t,n){if(hi.current!==fi)throw Error(a(168));li(hi,t),li(pi,n)}function _i(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,X(t)||"Unknown",o));return i({},n,{},r)}function wi(e){var t=e.stateNode;return t=t&&t.__reactInternalMemoizedMergedChildContext||fi,di=hi.current,li(hi,t),li(pi,pi.current),!0}function Ei(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(t=_i(e,t,di),r.__reactInternalMemoizedMergedChildContext=t,ci(pi),ci(hi),li(hi,t)):ci(pi),li(pi,n)}var Si=o.unstable_runWithPriority,Ci=o.unstable_scheduleCallback,Ti=o.unstable_cancelCallback,ki=o.unstable_shouldYield,xi=o.unstable_requestPaint,Ii=o.unstable_now,Pi=o.unstable_getCurrentPriorityLevel,Oi=o.unstable_ImmediatePriority,Ni=o.unstable_UserBlockingPriority,Ai=o.unstable_NormalPriority,Ri=o.unstable_LowPriority,Di=o.unstable_IdlePriority,Mi={},Li=void 0!==xi?xi:function(){},Fi=null,ji=null,Ui=!1,Wi=Ii(),Vi=1e4>Wi?Ii:function(){return Ii()-Wi};function qi(){switch(Pi()){case Oi:return 99;case Ni:return 98;case Ai:return 97;case Ri:return 96;case Di:return 95;default:throw Error(a(332))}}function Bi(e){switch(e){case 99:return Oi;case 98:return Ni;case 97:return Ai;case 96:return Ri;case 95:return Di;default:throw Error(a(332))}}function Hi(e,t){return e=Bi(e),Si(e,t)}function zi(e,t,n){return e=Bi(e),Ci(e,t,n)}function Qi(e){return null===Fi?(Fi=[e],ji=Ci(Oi,Gi)):Fi.push(e),Mi}function Ki(){if(null!==ji){var e=ji;ji=null,Ti(e)}Gi()}function Gi(){if(!Ui&&null!==Fi){Ui=!0;var e=0;try{var t=Fi;Hi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Fi=null}catch(t){throw null!==Fi&&(Fi=Fi.slice(e+1)),Ci(Oi,Ki),t}finally{Ui=!1}}}var Yi=3;function $i(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Xi(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Ji={current:null},Zi=null,eo=null,to=null;function no(){to=eo=Zi=null}function ro(e,t){var n=e.type._context;li(Ji,n._currentValue),n._currentValue=t}function io(e){var t=Ji.current;ci(Ji),e.type._context._currentValue=t}function oo(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function ao(e,t){Zi=e,to=eo=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Va=!0),e.firstContext=null)}function so(e,t){if(to!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(to=e,t=1073741823),t={context:e,observedBits:t,next:null},null===eo){if(null===Zi)throw Error(a(308));eo=t,Zi.dependencies={expirationTime:0,firstContext:t,responders:null}}else eo=eo.next=t;return e._currentValue}var uo=!1;function co(e){return{baseState:e,firstUpdate:null,lastUpdate:null,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function lo(e){return{baseState:e.baseState,firstUpdate:e.firstUpdate,lastUpdate:e.lastUpdate,firstCapturedUpdate:null,lastCapturedUpdate:null,firstEffect:null,lastEffect:null,firstCapturedEffect:null,lastCapturedEffect:null}}function fo(e,t){return{expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null,nextEffect:null}}function ho(e,t){null===e.lastUpdate?e.firstUpdate=e.lastUpdate=t:(e.lastUpdate.next=t,e.lastUpdate=t)}function po(e,t){var n=e.alternate;if(null===n){var r=e.updateQueue,i=null;null===r&&(r=e.updateQueue=co(e.memoizedState))}else r=e.updateQueue,i=n.updateQueue,null===r?null===i?(r=e.updateQueue=co(e.memoizedState),i=n.updateQueue=co(n.memoizedState)):r=e.updateQueue=lo(i):null===i&&(i=n.updateQueue=lo(r));null===i||r===i?ho(r,t):null===r.lastUpdate||null===i.lastUpdate?(ho(r,t),ho(i,t)):(ho(r,t),i.lastUpdate=t)}function vo(e,t){var n=e.updateQueue;null===(n=null===n?e.updateQueue=co(e.memoizedState):yo(e,n)).lastCapturedUpdate?n.firstCapturedUpdate=n.lastCapturedUpdate=t:(n.lastCapturedUpdate.next=t,n.lastCapturedUpdate=t)}function yo(e,t){var n=e.alternate;return null!==n&&t===n.updateQueue&&(t=e.updateQueue=lo(t)),t}function go(e,t,n,r,o,a){switch(n.tag){case 1:return"function"==typeof(e=n.payload)?e.call(a,r,o):e;case 3:e.effectTag=-4097&e.effectTag|64;case 0:if(null==(o="function"==typeof(e=n.payload)?e.call(a,r,o):e))break;return i({},r,o);case 2:uo=!0}return r}function mo(e,t,n,r,i){uo=!1;for(var o=(t=yo(e,t)).baseState,a=null,s=0,u=t.firstUpdate,c=o;null!==u;){var l=u.expirationTime;l<i?(null===a&&(a=u,o=c),s<l&&(s=l)):(fu(l,u.suspenseConfig),c=go(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastEffect?t.firstEffect=t.lastEffect=u:(t.lastEffect.nextEffect=u,t.lastEffect=u))),u=u.next}for(l=null,u=t.firstCapturedUpdate;null!==u;){var f=u.expirationTime;f<i?(null===l&&(l=u,null===a&&(o=c)),s<f&&(s=f)):(c=go(e,0,u,c,n,r),null!==u.callback&&(e.effectTag|=32,u.nextEffect=null,null===t.lastCapturedEffect?t.firstCapturedEffect=t.lastCapturedEffect=u:(t.lastCapturedEffect.nextEffect=u,t.lastCapturedEffect=u))),u=u.next}null===a&&(t.lastUpdate=null),null===l?t.lastCapturedUpdate=null:e.effectTag|=32,null===a&&null===l&&(o=c),t.baseState=o,t.firstUpdate=a,t.firstCapturedUpdate=l,hu(s),e.expirationTime=s,e.memoizedState=c}function bo(e,t,n){null!==t.firstCapturedUpdate&&(null!==t.lastUpdate&&(t.lastUpdate.next=t.firstCapturedUpdate,t.lastUpdate=t.lastCapturedUpdate),t.firstCapturedUpdate=t.lastCapturedUpdate=null),_o(t.firstEffect,n),t.firstEffect=t.lastEffect=null,_o(t.firstCapturedEffect,n),t.firstCapturedEffect=t.lastCapturedEffect=null}function _o(e,t){for(;null!==e;){var n=e.callback;if(null!==n){e.callback=null;var r=t;if("function"!=typeof n)throw Error(a(191,n));n.call(r)}e=e.nextEffect}}var wo=R.ReactCurrentBatchConfig,Eo=(new r.Component).refs;function So(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,null!==(r=e.updateQueue)&&0===e.expirationTime&&(r.baseState=n)}var Co={isMounted:function(e){return!!(e=e._reactInternalFiber)&&tt(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=Js(),i=wo.suspense;(i=fo(r=Zs(r,e,i),i)).payload=t,null!=n&&(i.callback=n),po(e,i),eu(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=Js(),i=wo.suspense;(i=fo(r=Zs(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),po(e,i),eu(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=Js(),r=wo.suspense;(r=fo(n=Zs(n,e,r),r)).tag=2,null!=t&&(r.callback=t),po(e,r),eu(e,n)}};function To(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Jr(n,r)||!Jr(i,o))}function ko(e,t,n){var r=!1,i=fi,o=t.contextType;return"object"==typeof o&&null!==o?o=so(o):(i=yi(t)?di:hi.current,o=(r=null!=(r=t.contextTypes))?vi(e,i):fi),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Co,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function xo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Co.enqueueReplaceState(t,t.state,null)}function Io(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Eo;var o=t.contextType;"object"==typeof o&&null!==o?i.context=so(o):(o=yi(t)?di:hi.current,i.context=vi(e,o)),null!==(o=e.updateQueue)&&(mo(e,o,n,i,r),i.state=e.memoizedState),"function"==typeof(o=t.getDerivedStateFromProps)&&(So(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Co.enqueueReplaceState(i,i.state,null),null!==(o=e.updateQueue)&&(mo(e,o,n,i,r),i.state=e.memoizedState)),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Po=Array.isArray;function Oo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===Eo&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function No(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function Ao(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t,n){return(e=Au(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function s(t){return e&&null===t.alternate&&(t.effectTag=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Mu(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Oo(e,t,n),r.return=e,r):((r=Ru(n.type,n.key,n.props,null,e.mode,r)).ref=Oo(e,t,n),r.return=e,r)}function l(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Lu(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Du(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function h(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Mu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case L:return(n=Ru(t.type,t.key,t.props,null,e.mode,n)).ref=Oo(e,null,t),n.return=e,n;case F:return(t=Lu(t,e.mode,n)).return=e,t}if(Po(t)||$(t))return(t=Du(t,e.mode,n,null)).return=e,t;No(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case L:return n.key===i?n.type===j?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case F:return n.key===i?l(e,t,n,r):null}if(Po(n)||$(n))return null!==i?null:f(e,t,n,r,null);No(e,n)}return null}function d(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case L:return e=e.get(null===r.key?n:r.key)||null,r.type===j?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case F:return l(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Po(r)||$(r))return f(t,e=e.get(n)||null,r,i,null);No(t,r)}return null}function v(i,a,s,u){for(var c=null,l=null,f=a,v=a=0,y=null;null!==f&&v<s.length;v++){f.index>v?(y=f,f=null):y=f.sibling;var g=p(i,f,s[v],u);if(null===g){null===f&&(f=y);break}e&&f&&null===g.alternate&&t(i,f),a=o(g,a,v),null===l?c=g:l.sibling=g,l=g,f=y}if(v===s.length)return n(i,f),c;if(null===f){for(;v<s.length;v++)null!==(f=h(i,s[v],u))&&(a=o(f,a,v),null===l?c=f:l.sibling=f,l=f);return c}for(f=r(i,f);v<s.length;v++)null!==(y=d(f,i,v,s[v],u))&&(e&&null!==y.alternate&&f.delete(null===y.key?v:y.key),a=o(y,a,v),null===l?c=y:l.sibling=y,l=y);return e&&f.forEach((function(e){return t(i,e)})),c}function y(i,s,u,c){var l=$(u);if("function"!=typeof l)throw Error(a(150));if(null==(u=l.call(u)))throw Error(a(151));for(var f=l=null,v=s,y=s=0,g=null,m=u.next();null!==v&&!m.done;y++,m=u.next()){v.index>y?(g=v,v=null):g=v.sibling;var b=p(i,v,m.value,c);if(null===b){null===v&&(v=g);break}e&&v&&null===b.alternate&&t(i,v),s=o(b,s,y),null===f?l=b:f.sibling=b,f=b,v=g}if(m.done)return n(i,v),l;if(null===v){for(;!m.done;y++,m=u.next())null!==(m=h(i,m.value,c))&&(s=o(m,s,y),null===f?l=m:f.sibling=m,f=m);return l}for(v=r(i,v);!m.done;y++,m=u.next())null!==(m=d(v,i,y,m.value,c))&&(e&&null!==m.alternate&&v.delete(null===m.key?y:m.key),s=o(m,s,y),null===f?l=m:f.sibling=m,f=m);return e&&v.forEach((function(e){return t(i,e)})),l}return function(e,r,o,u){var c="object"==typeof o&&null!==o&&o.type===j&&null===o.key;c&&(o=o.props.children);var l="object"==typeof o&&null!==o;if(l)switch(o.$$typeof){case L:e:{for(l=o.key,c=r;null!==c;){if(c.key===l){if(7===c.tag?o.type===j:c.elementType===o.type){n(e,c.sibling),(r=i(c,o.type===j?o.props.children:o.props)).ref=Oo(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===j?((r=Du(o.props.children,e.mode,u,o.key)).return=e,e=r):((u=Ru(o.type,o.key,o.props,null,e.mode,u)).ref=Oo(e,r,o),u.return=e,e=u)}return s(e);case F:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Lu(o,e.mode,u)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Mu(o,e.mode,u)).return=e,e=r),s(e);if(Po(o))return v(e,r,o,u);if($(o))return y(e,r,o,u);if(l&&No(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var Ro=Ao(!0),Do=Ao(!1),Mo={},Lo={current:Mo},Fo={current:Mo},jo={current:Mo};function Uo(e){if(e===Mo)throw Error(a(174));return e}function Wo(e,t){li(jo,t),li(Fo,e),li(Lo,Mo);var n=t.nodeType;switch(n){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Ve(null,"");break;default:t=Ve(t=(n=8===n?t.parentNode:t).namespaceURI||null,n=n.tagName)}ci(Lo),li(Lo,t)}function Vo(e){ci(Lo),ci(Fo),ci(jo)}function qo(e){Uo(jo.current);var t=Uo(Lo.current),n=Ve(t,e.type);t!==n&&(li(Fo,e),li(Lo,n))}function Bo(e){Fo.current===e&&(ci(Lo),ci(Fo))}var Ho={current:0};function zo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function Qo(e,t){return{responder:e,props:t}}var Ko=R.ReactCurrentDispatcher,Go=R.ReactCurrentBatchConfig,Yo=0,$o=null,Xo=null,Jo=null,Zo=null,ea=null,ta=null,na=0,ra=null,ia=0,oa=!1,aa=null,sa=0;function ua(){throw Error(a(321))}function ca(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!$r(e[n],t[n]))return!1;return!0}function la(e,t,n,r,i,o){if(Yo=o,$o=t,Jo=null!==e?e.memoizedState:null,Ko.current=null===Jo?Pa:Oa,t=n(r,i),oa){do{oa=!1,sa+=1,Jo=null!==e?e.memoizedState:null,ta=Zo,ra=ea=Xo=null,Ko.current=Oa,t=n(r,i)}while(oa);aa=null,sa=0}if(Ko.current=Ia,(e=$o).memoizedState=Zo,e.expirationTime=na,e.updateQueue=ra,e.effectTag|=ia,e=null!==Xo&&null!==Xo.next,Yo=0,ta=ea=Zo=Jo=Xo=$o=null,na=0,ra=null,ia=0,e)throw Error(a(300));return t}function fa(){Ko.current=Ia,Yo=0,ta=ea=Zo=Jo=Xo=$o=null,na=0,ra=null,ia=0,oa=!1,aa=null,sa=0}function ha(){var e={memoizedState:null,baseState:null,queue:null,baseUpdate:null,next:null};return null===ea?Zo=ea=e:ea=ea.next=e,ea}function pa(){if(null!==ta)ta=(ea=ta).next,Jo=null!==(Xo=Jo)?Xo.next:null;else{if(null===Jo)throw Error(a(310));var e={memoizedState:(Xo=Jo).memoizedState,baseState:Xo.baseState,queue:Xo.queue,baseUpdate:Xo.baseUpdate,next:null};ea=null===ea?Zo=e:ea.next=e,Jo=Xo.next}return ea}function da(e,t){return"function"==typeof t?t(e):t}function va(e){var t=pa(),n=t.queue;if(null===n)throw Error(a(311));if(n.lastRenderedReducer=e,0<sa){var r=n.dispatch;if(null!==aa){var i=aa.get(n);if(void 0!==i){aa.delete(n);var o=t.memoizedState;do{o=e(o,i.action),i=i.next}while(null!==i);return $r(o,t.memoizedState)||(Va=!0),t.memoizedState=o,t.baseUpdate===n.last&&(t.baseState=o),n.lastRenderedState=o,[o,r]}}return[t.memoizedState,r]}r=n.last;var s=t.baseUpdate;if(o=t.baseState,null!==s?(null!==r&&(r.next=null),r=s.next):r=null!==r?r.next:null,null!==r){var u=i=null,c=r,l=!1;do{var f=c.expirationTime;f<Yo?(l||(l=!0,u=s,i=o),f>na&&hu(na=f)):(fu(f,c.suspenseConfig),o=c.eagerReducer===e?c.eagerState:e(o,c.action)),s=c,c=c.next}while(null!==c&&c!==r);l||(u=s,i=o),$r(o,t.memoizedState)||(Va=!0),t.memoizedState=o,t.baseUpdate=u,t.baseState=i,n.lastRenderedState=o}return[t.memoizedState,n.dispatch]}function ya(e){var t=ha();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={last:null,dispatch:null,lastRenderedReducer:da,lastRenderedState:e}).dispatch=xa.bind(null,$o,e),[t.memoizedState,e]}function ga(e){return va(da)}function ma(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===ra?(ra={lastEffect:null}).lastEffect=e.next=e:null===(t=ra.lastEffect)?ra.lastEffect=e.next=e:(n=t.next,t.next=e,e.next=n,ra.lastEffect=e),e}function ba(e,t,n,r){var i=ha();ia|=e,i.memoizedState=ma(t,n,void 0,void 0===r?null:r)}function _a(e,t,n,r){var i=pa();r=void 0===r?null:r;var o=void 0;if(null!==Xo){var a=Xo.memoizedState;if(o=a.destroy,null!==r&&ca(r,a.deps))return void ma(0,n,o,r)}ia|=e,i.memoizedState=ma(t,n,o,r)}function wa(e,t){return ba(516,192,e,t)}function Ea(e,t){return _a(516,192,e,t)}function Sa(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Ca(){}function Ta(e,t){return ha().memoizedState=[e,void 0===t?null:t],e}function ka(e,t){var n=pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ca(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function xa(e,t,n){if(!(25>sa))throw Error(a(301));var r=e.alternate;if(e===$o||null!==r&&r===$o)if(oa=!0,e={expirationTime:Yo,suspenseConfig:null,action:n,eagerReducer:null,eagerState:null,next:null},null===aa&&(aa=new Map),void 0===(n=aa.get(t)))aa.set(t,e);else{for(t=n;null!==t.next;)t=t.next;t.next=e}else{var i=Js(),o=wo.suspense;o={expirationTime:i=Zs(i,e,o),suspenseConfig:o,action:n,eagerReducer:null,eagerState:null,next:null};var s=t.last;if(null===s)o.next=o;else{var u=s.next;null!==u&&(o.next=u),s.next=o}if(t.last=o,0===e.expirationTime&&(null===r||0===r.expirationTime)&&null!==(r=t.lastRenderedReducer))try{var c=t.lastRenderedState,l=r(c,n);if(o.eagerReducer=r,o.eagerState=l,$r(l,c))return}catch(e){}eu(e,i)}}var Ia={readContext:so,useCallback:ua,useContext:ua,useEffect:ua,useImperativeHandle:ua,useLayoutEffect:ua,useMemo:ua,useReducer:ua,useRef:ua,useState:ua,useDebugValue:ua,useResponder:ua,useDeferredValue:ua,useTransition:ua},Pa={readContext:so,useCallback:Ta,useContext:so,useEffect:wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ba(4,36,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ba(4,36,e,t)},useMemo:function(e,t){var n=ha();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=ha();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={last:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=xa.bind(null,$o,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},ha().memoizedState=e},useState:ya,useDebugValue:Ca,useResponder:Qo,useDeferredValue:function(e,t){var n=ya(e),r=n[0],i=n[1];return wa((function(){o.unstable_next((function(){var n=Go.suspense;Go.suspense=void 0===t?null:t;try{i(e)}finally{Go.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=ya(!1),n=t[0],r=t[1];return[Ta((function(t){r(!0),o.unstable_next((function(){var n=Go.suspense;Go.suspense=void 0===e?null:e;try{r(!1),t()}finally{Go.suspense=n}}))}),[e,n]),n]}},Oa={readContext:so,useCallback:ka,useContext:so,useEffect:Ea,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,_a(4,36,Sa.bind(null,t,e),n)},useLayoutEffect:function(e,t){return _a(4,36,e,t)},useMemo:function(e,t){var n=pa();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&ca(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)},useReducer:va,useRef:function(){return pa().memoizedState},useState:ga,useDebugValue:Ca,useResponder:Qo,useDeferredValue:function(e,t){var n=ga(),r=n[0],i=n[1];return Ea((function(){o.unstable_next((function(){var n=Go.suspense;Go.suspense=void 0===t?null:t;try{i(e)}finally{Go.suspense=n}}))}),[e,t]),r},useTransition:function(e){var t=ga(),n=t[0],r=t[1];return[ka((function(t){r(!0),o.unstable_next((function(){var n=Go.suspense;Go.suspense=void 0===e?null:e;try{r(!1),t()}finally{Go.suspense=n}}))}),[e,n]),n]}},Na=null,Aa=null,Ra=!1;function Da(e,t){var n=Ou(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ma(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function La(e){if(Ra){var t=Aa;if(t){var n=t;if(!Ma(e,t)){if(!(t=nr(n.nextSibling))||!Ma(e,t))return e.effectTag=-1025&e.effectTag|2,Ra=!1,void(Na=e);Da(Na,n)}Na=e,Aa=nr(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ra=!1,Na=e}}function Fa(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Na=e}function ja(e){if(e!==Na)return!1;if(!Ra)return Fa(e),Ra=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Zn(t,e.memoizedProps))for(t=Aa;t;)Da(e,t),t=nr(t.nextSibling);if(Fa(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Aa=nr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Aa=null}}else Aa=Na?nr(e.stateNode.nextSibling):null;return!0}function Ua(){Aa=Na=null,Ra=!1}var Wa=R.ReactCurrentOwner,Va=!1;function qa(e,t,n,r){t.child=null===e?Do(t,null,n,r):Ro(t,e.child,n,r)}function Ba(e,t,n,r,i){n=n.render;var o=t.ref;return ao(t,i),r=la(e,t,n,r,o,i),null===e||Va?(t.effectTag|=1,qa(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),os(e,t,i))}function Ha(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Nu(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ru(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,za(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Jr)(i,r)&&e.ref===t.ref)?os(e,t,o):(t.effectTag|=1,(e=Au(a,r)).ref=t.ref,e.return=t,t.child=e)}function za(e,t,n,r,i,o){return null!==e&&Jr(e.memoizedProps,r)&&e.ref===t.ref&&(Va=!1,i<o)?os(e,t,o):Ka(e,t,n,r,o)}function Qa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ka(e,t,n,r,i){var o=yi(n)?di:hi.current;return o=vi(t,o),ao(t,i),n=la(e,t,n,r,o,i),null===e||Va?(t.effectTag|=1,qa(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),os(e,t,i))}function Ga(e,t,n,r,i){if(yi(n)){var o=!0;wi(t)}else o=!1;if(ao(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),ko(t,n,r),Io(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var u=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=so(c):c=vi(t,c=yi(n)?di:hi.current);var l=n.getDerivedStateFromProps,f="function"==typeof l||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==c)&&xo(t,a,r,c),uo=!1;var h=t.memoizedState;u=a.state=h;var p=t.updateQueue;null!==p&&(mo(t,p,r,a,i),u=t.memoizedState),s!==r||h!==u||pi.current||uo?("function"==typeof l&&(So(t,n,l,r),u=t.memoizedState),(s=uo||To(t,n,s,r,h,u,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=u),a.props=r,a.state=u,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,s=t.memoizedProps,a.props=t.type===t.elementType?s:Xi(t.type,s),u=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=so(c):c=vi(t,c=yi(n)?di:hi.current),(f="function"==typeof(l=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||u!==c)&&xo(t,a,r,c),uo=!1,u=t.memoizedState,h=a.state=u,null!==(p=t.updateQueue)&&(mo(t,p,r,a,i),h=t.memoizedState),s!==r||u!==h||pi.current||uo?("function"==typeof l&&(So(t,n,l,r),h=t.memoizedState),(l=uo||To(t,n,s,r,u,h,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,h,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,h,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=h),a.props=r,a.state=h,a.context=c,r=l):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&u===e.memoizedState||(t.effectTag|=256),r=!1);return Ya(e,t,n,r,o,i)}function Ya(e,t,n,r,i,o){Qa(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&Ei(t,n,!1),os(e,t,o);r=t.stateNode,Wa.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=Ro(t,e.child,null,o),t.child=Ro(t,null,s,o)):qa(e,t,s,o),t.memoizedState=r.state,i&&Ei(t,n,!0),t.child}function $a(e){var t=e.stateNode;t.pendingContext?bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bi(0,t.context,!1),Wo(e,t.containerInfo)}var Xa,Ja,Za,es={dehydrated:null,retryTime:0};function ts(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Ho.current,s=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(s=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),li(Ho,1&a),null===e){if(void 0!==o.fallback&&La(t),s){if(s=o.fallback,(o=Du(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Du(s,i,n,null)).return=t,o.sibling=n,t.memoizedState=es,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=Do(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,s){if(o=o.fallback,(n=Au(e,e.pendingProps)).return=t,0==(2&t.mode)&&(s=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=s;null!==s;)s.return=n,s=s.sibling;return(i=Au(i,o,i.expirationTime)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=es,t.child=n,i}return n=Ro(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,s){if(s=o.fallback,(o=Du(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Du(s,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=es,t.child=o,n}return t.memoizedState=null,t.child=Ro(t,e,o.children,n)}function ns(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),oo(e.return,t)}function rs(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function is(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(qa(e,t,r.children,n),0!=(2&(r=Ho.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&ns(e,n);else if(19===e.tag)ns(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(li(Ho,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===zo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),rs(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===zo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}rs(t,!0,n,null,o,t.lastEffect);break;case"together":rs(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function os(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&hu(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Au(e=t.child,e.pendingProps,e.expirationTime),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Au(e,e.pendingProps,e.expirationTime)).return=t;n.sibling=null}return t.child}function as(e){e.effectTag|=4}function ss(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function us(e){switch(e.tag){case 1:yi(e.type)&&gi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Vo(),mi(),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Bo(e),null;case 13:return ci(Ho),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return ci(Ho),null;case 4:return Vo(),null;case 10:return io(e),null;default:return null}}function cs(e,t){return{value:e,source:t,stack:J(t)}}Xa=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Ja=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var s,u,c=t.stateNode;switch(Uo(Lo.current),e=null,n){case"input":a=ke(c,a),r=ke(c,r),e=[];break;case"option":a=Ae(c,a),r=Ae(c,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=De(c,a),r=De(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=Hn)}for(s in Vn(n,r),n=null,a)if(!r.hasOwnProperty(s)&&a.hasOwnProperty(s)&&null!=a[s])if("style"===s)for(u in c=a[s])c.hasOwnProperty(u)&&(n||(n={}),n[u]="");else"dangerouslySetInnerHTML"!==s&&"children"!==s&&"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(p.hasOwnProperty(s)?e||(e=[]):(e=e||[]).push(s,null));for(s in r){var l=r[s];if(c=null!=a?a[s]:void 0,r.hasOwnProperty(s)&&l!==c&&(null!=l||null!=c))if("style"===s)if(c){for(u in c)!c.hasOwnProperty(u)||l&&l.hasOwnProperty(u)||(n||(n={}),n[u]="");for(u in l)l.hasOwnProperty(u)&&c[u]!==l[u]&&(n||(n={}),n[u]=l[u])}else n||(e||(e=[]),e.push(s,n)),n=l;else"dangerouslySetInnerHTML"===s?(l=l?l.__html:void 0,c=c?c.__html:void 0,null!=l&&c!==l&&(e=e||[]).push(s,""+l)):"children"===s?c===l||"string"!=typeof l&&"number"!=typeof l||(e=e||[]).push(s,""+l):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&(p.hasOwnProperty(s)?(null!=l&&Bn(o,s),e||c===l||(e=[])):(e=e||[]).push(s,l))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&as(t)}},Za=function(e,t,n,r){n!==r&&as(t)};var ls="function"==typeof WeakSet?WeakSet:Set;function fs(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=J(n)),null!==n&&X(n.type),t=t.value,null!==e&&1===e.tag&&X(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function hs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Cu(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:ds(2,0,t);break;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}break;case 3:case 5:case 6:case 4:case 17:break;default:throw Error(a(163))}}function ds(e,t,n){if(null!==(n=null!==(n=n.updateQueue)?n.lastEffect:null)){var r=n=n.next;do{if(0!=(r.tag&e)){var i=r.destroy;r.destroy=void 0,void 0!==i&&i()}0!=(r.tag&t)&&(i=r.create,r.destroy=i()),r=r.next}while(r!==n)}}function vs(e,t,n){switch("function"==typeof Iu&&Iu(t),t.tag){case 0:case 11:case 14:case 15:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Hi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){Cu(i,e)}}e=e.next}while(e!==r)}))}break;case 1:hs(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){Cu(e,t)}}(t,n);break;case 5:hs(t);break;case 4:bs(e,t,n)}}function ys(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,null!==t&&ys(t)}function gs(e){return 5===e.tag||3===e.tag||4===e.tag}function ms(e){e:{for(var t=e.return;null!==t;){if(gs(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(He(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||gs(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}for(var i=e;;){var o=5===i.tag||6===i.tag;if(o){var s=o?i.stateNode:i.stateNode.instance;if(n)if(r){var u=s;s=n,8===(o=t).nodeType?o.parentNode.insertBefore(u,s):o.insertBefore(u,s)}else t.insertBefore(s,n);else r?(8===(u=t).nodeType?(o=u.parentNode).insertBefore(s,u):(o=u).appendChild(s),null!=(u=u._reactRootContainer)||null!==o.onclick||(o.onclick=Hn)):t.appendChild(s)}else if(4!==i.tag&&null!==i.child){i.child.return=i,i=i.child;continue}if(i===e)break;for(;null===i.sibling;){if(null===i.return||i.return===e)return;i=i.return}i.sibling.return=i.return,i=i.sibling}}function bs(e,t,n){for(var r,i,o=t,s=!1;;){if(!s){s=o.return;e:for(;;){if(null===s)throw Error(a(160));switch(r=s.stateNode,s.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}s=s.return}s=!0}if(5===o.tag||6===o.tag){e:for(var u=e,c=o,l=n,f=c;;)if(vs(u,f,l),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(u=r,c=o.stateNode,8===u.nodeType?u.parentNode.removeChild(c):u.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(vs(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(s=!1)}o.sibling.return=o.return,o=o.sibling}}function _s(e,t){switch(t.tag){case 0:case 11:case 14:case 15:ds(4,8,t);break;case 1:break;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[ar]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Ie(n,r),qn(e,i),t=qn(e,r),i=0;i<o.length;i+=2){var s=o[i],u=o[i+1];"style"===s?Un(n,u):"dangerouslySetInnerHTML"===s?Be(n,u):"children"===s?He(n,u):Ee(n,s,u,t)}switch(e){case"input":Pe(n,r);break;case"textarea":Le(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Re(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Re(n,!!r.multiple,r.defaultValue,!0):Re(n,!!r.multiple,r.multiple?[]:"",!1))}}}break;case 6:if(null===t.stateNode)throw Error(a(162));t.stateNode.nodeValue=t.memoizedProps;break;case 3:(t=t.stateNode).hydrate&&(t.hydrate=!1,kt(t.containerInfo));break;case 12:break;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Ws=Vi()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=jn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break e;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}ws(t);break;case 19:ws(t);break;case 17:case 20:case 21:break;default:throw Error(a(163))}}function ws(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new ls),t.forEach((function(t){var r=ku.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var Es="function"==typeof WeakMap?WeakMap:Map;function Ss(e,t,n){(n=fo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qs||(qs=!0,Bs=r),fs(e,t)},n}function Cs(e,t,n){(n=fo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return fs(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Hs?Hs=new Set([this]):Hs.add(this),fs(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var Ts,ks=Math.ceil,xs=R.ReactCurrentDispatcher,Is=R.ReactCurrentOwner,Ps=0,Os=null,Ns=null,As=0,Rs=0,Ds=null,Ms=1073741823,Ls=1073741823,Fs=null,js=0,Us=!1,Ws=0,Vs=null,qs=!1,Bs=null,Hs=null,zs=!1,Qs=null,Ks=90,Gs=null,Ys=0,$s=null,Xs=0;function Js(){return 0!=(48&Ps)?1073741821-(Vi()/10|0):0!==Xs?Xs:Xs=1073741821-(Vi()/10|0)}function Zs(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=qi();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&Ps))return As;if(null!==n)e=$i(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=$i(e,150,100);break;case 97:case 96:e=$i(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Os&&e===As&&--e,e}function eu(e,t){if(50<Ys)throw Ys=0,$s=null,Error(a(185));if(null!==(e=tu(e,t))){var n=qi();1073741823===t?0!=(8&Ps)&&0==(48&Ps)?ou(e):(ru(e),0===Ps&&Ki()):ru(e),0==(4&Ps)||98!==n&&99!==n||(null===Gs?Gs=new Map([[e,t]]):(void 0===(n=Gs.get(e))||n>t)&&Gs.set(e,t))}}function tu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Os===i&&(hu(t),4===Rs&&Uu(i,As)),Wu(i,t)),i}function nu(e){var t=e.lastExpiredTime;return 0!==t?t:ju(e,t=e.firstPendingTime)?(t=e.lastPingedTime)>(e=e.nextKnownPendingLevel)?t:e:t}function ru(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Qi(ou.bind(null,e));else{var t=nu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=Js();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Mi&&Ti(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Qi(ou.bind(null,e)):zi(r,iu.bind(null,e),{timeout:10*(1073741821-t)-Vi()}),e.callbackNode=t}}}function iu(e,t){if(Xs=0,t)return Vu(e,t=Js()),ru(e),null;var n=nu(e);if(0!==n){if(t=e.callbackNode,0!=(48&Ps))throw Error(a(327));if(wu(),e===Os&&n===As||uu(e,n),null!==Ns){var r=Ps;Ps|=16;for(var i=lu();;)try{du();break}catch(t){cu(e,t)}if(no(),Ps=r,xs.current=i,1===Rs)throw t=Ds,uu(e,n),Uu(e,n),ru(e),t;if(null===Ns)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Rs,Os=null,r){case 0:case 1:throw Error(a(345));case 2:Vu(e,2<n?2:n);break;case 3:if(Uu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=gu(i)),1073741823===Ms&&10<(i=Ws+500-Vi())){if(Us){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,uu(e,n);break}}if(0!==(o=nu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=er(mu.bind(null,e),i);break}mu(e);break;case 4:if(Uu(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=gu(i)),Us&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,uu(e,n);break}if(0!==(i=nu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Ls?r=10*(1073741821-Ls)-Vi():1073741823===Ms?r=0:(r=10*(1073741821-Ms)-5e3,0>(r=(i=Vi())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*ks(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=er(mu.bind(null,e),r);break}mu(e);break;case 5:if(1073741823!==Ms&&null!==Fs){o=Ms;var s=Fs;if(0>=(r=0|s.busyMinDurationMs)?r=0:(i=0|s.busyDelayMs,r=(o=Vi()-(10*(1073741821-o)-(0|s.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Uu(e,n),e.timeoutHandle=er(mu.bind(null,e),r);break}}mu(e);break;default:throw Error(a(329))}if(ru(e),e.callbackNode===t)return iu.bind(null,e)}}return null}function ou(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,e.finishedExpirationTime===t)mu(e);else{if(0!=(48&Ps))throw Error(a(327));if(wu(),e===Os&&t===As||uu(e,t),null!==Ns){var n=Ps;Ps|=16;for(var r=lu();;)try{pu();break}catch(t){cu(e,t)}if(no(),Ps=n,xs.current=r,1===Rs)throw n=Ds,uu(e,t),Uu(e,t),ru(e),n;if(null!==Ns)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Os=null,mu(e),ru(e)}}return null}function au(e,t){var n=Ps;Ps|=1;try{return e(t)}finally{0===(Ps=n)&&Ki()}}function su(e,t){var n=Ps;Ps&=-2,Ps|=8;try{return e(t)}finally{0===(Ps=n)&&Ki()}}function uu(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,tr(n)),null!==Ns)for(n=Ns.return;null!==n;){var r=n;switch(r.tag){case 1:var i=r.type.childContextTypes;null!=i&&gi();break;case 3:Vo(),mi();break;case 5:Bo(r);break;case 4:Vo();break;case 13:case 19:ci(Ho);break;case 10:io(r)}n=n.return}Os=e,Ns=Au(e.current,null),As=t,Rs=0,Ds=null,Ls=Ms=1073741823,Fs=null,js=0,Us=!1}function cu(e,t){for(;;){try{if(no(),fa(),null===Ns||null===Ns.return)return Rs=1,Ds=t,null;e:{var n=e,r=Ns.return,i=Ns,o=t;if(t=As,i.effectTag|=2048,i.firstEffect=i.lastEffect=null,null!==o&&"object"==typeof o&&"function"==typeof o.then){var a=o,s=0!=(1&Ho.current),u=r;do{var c;if(c=13===u.tag){var l=u.memoizedState;if(null!==l)c=null!==l.dehydrated;else{var f=u.memoizedProps;c=void 0!==f.fallback&&(!0!==f.unstable_avoidThisFallback||!s)}}if(c){var h=u.updateQueue;if(null===h){var p=new Set;p.add(a),u.updateQueue=p}else h.add(a);if(0==(2&u.mode)){if(u.effectTag|=64,i.effectTag&=-2981,1===i.tag)if(null===i.alternate)i.tag=17;else{var d=fo(1073741823,null);d.tag=2,po(i,d)}i.expirationTime=1073741823;break e}o=void 0,i=t;var v=n.pingCache;if(null===v?(v=n.pingCache=new Es,o=new Set,v.set(a,o)):void 0===(o=v.get(a))&&(o=new Set,v.set(a,o)),!o.has(i)){o.add(i);var y=Tu.bind(null,n,a,i);a.then(y,y)}u.effectTag|=4096,u.expirationTime=t;break e}u=u.return}while(null!==u);o=Error((X(i.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+J(i))}5!==Rs&&(Rs=2),o=cs(o,i),u=r;do{switch(u.tag){case 3:a=o,u.effectTag|=4096,u.expirationTime=t,vo(u,Ss(u,a,t));break e;case 1:a=o;var g=u.type,m=u.stateNode;if(0==(64&u.effectTag)&&("function"==typeof g.getDerivedStateFromError||null!==m&&"function"==typeof m.componentDidCatch&&(null===Hs||!Hs.has(m)))){u.effectTag|=4096,u.expirationTime=t,vo(u,Cs(u,a,t));break e}}u=u.return}while(null!==u)}Ns=yu(Ns)}catch(e){t=e;continue}break}}function lu(){var e=xs.current;return xs.current=Ia,null===e?Ia:e}function fu(e,t){e<Ms&&2<e&&(Ms=e),null!==t&&e<Ls&&2<e&&(Ls=e,Fs=t)}function hu(e){e>js&&(js=e)}function pu(){for(;null!==Ns;)Ns=vu(Ns)}function du(){for(;null!==Ns&&!ki();)Ns=vu(Ns)}function vu(e){var t=Ts(e.alternate,e,As);return e.memoizedProps=e.pendingProps,null===t&&(t=yu(e)),Is.current=null,t}function yu(e){Ns=e;do{var t=Ns.alternate;if(e=Ns.return,0==(2048&Ns.effectTag)){e:{var n=t,r=As,o=(t=Ns).pendingProps;switch(t.tag){case 2:case 16:break;case 15:case 0:break;case 1:yi(t.type)&&gi();break;case 3:Vo(),mi(),(o=t.stateNode).pendingContext&&(o.context=o.pendingContext,o.pendingContext=null),(null===n||null===n.child)&&ja(t)&&as(t);break;case 5:Bo(t),r=Uo(jo.current);var s=t.type;if(null!==n&&null!=t.stateNode)Ja(n,t,s,o,r),n.ref!==t.ref&&(t.effectTag|=128);else if(o){var u=Uo(Lo.current);if(ja(t)){var c=(o=t).stateNode;n=o.type;var l=o.memoizedProps,f=r;switch(c[or]=o,c[ar]=l,s=void 0,r=c,n){case"iframe":case"object":case"embed":Tn("load",r);break;case"video":case"audio":for(c=0;c<et.length;c++)Tn(et[c],r);break;case"source":Tn("error",r);break;case"img":case"image":case"link":Tn("error",r),Tn("load",r);break;case"form":Tn("reset",r),Tn("submit",r);break;case"details":Tn("toggle",r);break;case"input":xe(r,l),Tn("invalid",r),Bn(f,"onChange");break;case"select":r._wrapperState={wasMultiple:!!l.multiple},Tn("invalid",r),Bn(f,"onChange");break;case"textarea":Me(r,l),Tn("invalid",r),Bn(f,"onChange")}for(s in Vn(n,l),c=null,l)l.hasOwnProperty(s)&&(u=l[s],"children"===s?"string"==typeof u?r.textContent!==u&&(c=["children",u]):"number"==typeof u&&r.textContent!==""+u&&(c=["children",""+u]):p.hasOwnProperty(s)&&null!=u&&Bn(f,s));switch(n){case"input":Ce(r),Oe(r,l,!0);break;case"textarea":Ce(r),Fe(r);break;case"select":case"option":break;default:"function"==typeof l.onClick&&(r.onclick=Hn)}s=c,o.updateQueue=s,(o=null!==s)&&as(t)}else{n=t,f=s,l=o,c=9===r.nodeType?r:r.ownerDocument,u===je&&(u=We(f)),u===je?"script"===f?((l=c.createElement("div")).innerHTML="<script><\/script>",c=l.removeChild(l.firstChild)):"string"==typeof l.is?c=c.createElement(f,{is:l.is}):(c=c.createElement(f),"select"===f&&(f=c,l.multiple?f.multiple=!0:l.size&&(f.size=l.size))):c=c.createElementNS(u,f),(l=c)[or]=n,l[ar]=o,Xa(l,t),t.stateNode=l;var h=r,d=qn(f=s,n=o);switch(f){case"iframe":case"object":case"embed":Tn("load",l),r=n;break;case"video":case"audio":for(r=0;r<et.length;r++)Tn(et[r],l);r=n;break;case"source":Tn("error",l),r=n;break;case"img":case"image":case"link":Tn("error",l),Tn("load",l),r=n;break;case"form":Tn("reset",l),Tn("submit",l),r=n;break;case"details":Tn("toggle",l),r=n;break;case"input":xe(l,n),r=ke(l,n),Tn("invalid",l),Bn(h,"onChange");break;case"option":r=Ae(l,n);break;case"select":l._wrapperState={wasMultiple:!!n.multiple},r=i({},n,{value:void 0}),Tn("invalid",l),Bn(h,"onChange");break;case"textarea":Me(l,n),r=De(l,n),Tn("invalid",l),Bn(h,"onChange");break;default:r=n}Vn(f,r),c=void 0,u=f;var v=l,y=r;for(c in y)if(y.hasOwnProperty(c)){var g=y[c];"style"===c?Un(v,g):"dangerouslySetInnerHTML"===c?null!=(g=g?g.__html:void 0)&&Be(v,g):"children"===c?"string"==typeof g?("textarea"!==u||""!==g)&&He(v,g):"number"==typeof g&&He(v,""+g):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(p.hasOwnProperty(c)?null!=g&&Bn(h,c):null!=g&&Ee(v,c,g,d))}switch(f){case"input":Ce(l),Oe(l,n,!1);break;case"textarea":Ce(l),Fe(l);break;case"option":null!=n.value&&l.setAttribute("value",""+we(n.value));break;case"select":(r=l).multiple=!!n.multiple,null!=(l=n.value)?Re(r,!!n.multiple,l,!1):null!=n.defaultValue&&Re(r,!!n.multiple,n.defaultValue,!0);break;default:"function"==typeof r.onClick&&(l.onclick=Hn)}(o=Jn(s,o))&&as(t)}null!==t.ref&&(t.effectTag|=128)}else if(null===t.stateNode)throw Error(a(166));break;case 6:if(n&&null!=t.stateNode)Za(0,t,n.memoizedProps,o);else{if("string"!=typeof o&&null===t.stateNode)throw Error(a(166));r=Uo(jo.current),Uo(Lo.current),ja(t)?(s=(o=t).stateNode,r=o.memoizedProps,s[or]=o,(o=s.nodeValue!==r)&&as(t)):(s=t,(o=(9===r.nodeType?r:r.ownerDocument).createTextNode(o))[or]=s,t.stateNode=o)}break;case 11:break;case 13:if(ci(Ho),o=t.memoizedState,0!=(64&t.effectTag)){t.expirationTime=r;break e}o=null!==o,s=!1,null===n?void 0!==t.memoizedProps.fallback&&ja(t):(s=null!==(r=n.memoizedState),o||null===r||null!==(r=n.child.sibling)&&(null!==(l=t.firstEffect)?(t.firstEffect=r,r.nextEffect=l):(t.firstEffect=t.lastEffect=r,r.nextEffect=null),r.effectTag=8)),o&&!s&&0!=(2&t.mode)&&(null===n&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Ho.current)?0===Rs&&(Rs=3):(0!==Rs&&3!==Rs||(Rs=4),0!==js&&null!==Os&&(Uu(Os,As),Wu(Os,js)))),(o||s)&&(t.effectTag|=4);break;case 7:case 8:case 12:break;case 4:Vo();break;case 10:io(t);break;case 9:case 14:break;case 17:yi(t.type)&&gi();break;case 19:if(ci(Ho),null===(o=t.memoizedState))break;if(s=0!=(64&t.effectTag),null===(l=o.rendering)){if(s)ss(o,!1);else if(0!==Rs||null!==n&&0!=(64&n.effectTag))for(n=t.child;null!==n;){if(null!==(l=zo(n))){for(t.effectTag|=64,ss(o,!1),null!==(s=l.updateQueue)&&(t.updateQueue=s,t.effectTag|=4),null===o.lastEffect&&(t.firstEffect=null),t.lastEffect=o.lastEffect,o=r,s=t.child;null!==s;)n=o,(r=s).effectTag&=2,r.nextEffect=null,r.firstEffect=null,r.lastEffect=null,null===(l=r.alternate)?(r.childExpirationTime=0,r.expirationTime=n,r.child=null,r.memoizedProps=null,r.memoizedState=null,r.updateQueue=null,r.dependencies=null):(r.childExpirationTime=l.childExpirationTime,r.expirationTime=l.expirationTime,r.child=l.child,r.memoizedProps=l.memoizedProps,r.memoizedState=l.memoizedState,r.updateQueue=l.updateQueue,n=l.dependencies,r.dependencies=null===n?null:{expirationTime:n.expirationTime,firstContext:n.firstContext,responders:n.responders}),s=s.sibling;li(Ho,1&Ho.current|2),t=t.child;break e}n=n.sibling}}else{if(!s)if(null!==(n=zo(l))){if(t.effectTag|=64,s=!0,null!==(r=n.updateQueue)&&(t.updateQueue=r,t.effectTag|=4),ss(o,!0),null===o.tail&&"hidden"===o.tailMode&&!l.alternate){null!==(t=t.lastEffect=o.lastEffect)&&(t.nextEffect=null);break}}else Vi()>o.tailExpiration&&1<r&&(t.effectTag|=64,s=!0,ss(o,!1),t.expirationTime=t.childExpirationTime=r-1);o.isBackwards?(l.sibling=t.child,t.child=l):(null!==(r=o.last)?r.sibling=l:t.child=l,o.last=l)}if(null!==o.tail){0===o.tailExpiration&&(o.tailExpiration=Vi()+500),r=o.tail,o.rendering=r,o.tail=r.sibling,o.lastEffect=t.lastEffect,r.sibling=null,o=Ho.current,li(Ho,o=s?1&o|2:1&o),t=r;break e}break;case 20:case 21:break;default:throw Error(a(156,t.tag))}t=null}if(o=Ns,1===As||1!==o.childExpirationTime){for(s=0,r=o.child;null!==r;)(n=r.expirationTime)>s&&(s=n),(l=r.childExpirationTime)>s&&(s=l),r=r.sibling;o.childExpirationTime=s}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Ns.firstEffect),null!==Ns.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Ns.firstEffect),e.lastEffect=Ns.lastEffect),1<Ns.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Ns:e.firstEffect=Ns,e.lastEffect=Ns))}else{if(null!==(t=us(Ns)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Ns.sibling))return t;Ns=e}while(null!==Ns);return 0===Rs&&(Rs=5),null}function gu(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function mu(e){var t=qi();return Hi(99,bu.bind(null,e,t)),null}function bu(e,t){do{wu()}while(null!==Qs);if(0!=(48&Ps))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=gu(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Os&&(Ns=Os=null,As=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=Ps;Ps|=32,Is.current=null,$n=Cn;var s=Gn();if(Yn(s)){if("selectionStart"in s)var u={start:s.selectionStart,end:s.selectionEnd};else e:{var c=(u=(u=s.ownerDocument)&&u.defaultView||window).getSelection&&u.getSelection();if(c&&0!==c.rangeCount){u=c.anchorNode;var l=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{u.nodeType,f.nodeType}catch(e){u=null;break e}var h=0,p=-1,d=-1,v=0,y=0,g=s,m=null;t:for(;;){for(var b;g!==u||0!==l&&3!==g.nodeType||(p=h+l),g!==f||0!==c&&3!==g.nodeType||(d=h+c),3===g.nodeType&&(h+=g.nodeValue.length),null!==(b=g.firstChild);)m=g,g=b;for(;;){if(g===s)break t;if(m===u&&++v===l&&(p=h),m===f&&++y===c&&(d=h),null!==(b=g.nextSibling))break;m=(g=m).parentNode}g=b}u=-1===p||-1===d?null:{start:p,end:d}}else u=null}u=u||{start:0,end:0}}else u=null;Xn={focusedElem:s,selectionRange:u},Cn=!1,Vs=i;do{try{_u()}catch(e){if(null===Vs)throw Error(a(330));Cu(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=i;do{try{for(s=e,u=t;null!==Vs;){var _=Vs.effectTag;if(16&_&&He(Vs.stateNode,""),128&_){var w=Vs.alternate;if(null!==w){var E=w.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&_){case 2:ms(Vs),Vs.effectTag&=-3;break;case 6:ms(Vs),Vs.effectTag&=-3,_s(Vs.alternate,Vs);break;case 1024:Vs.effectTag&=-1025;break;case 1028:Vs.effectTag&=-1025,_s(Vs.alternate,Vs);break;case 4:_s(Vs.alternate,Vs);break;case 8:bs(s,l=Vs,u),ys(l)}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));Cu(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);if(E=Xn,w=Gn(),_=E.focusedElem,u=E.selectionRange,w!==_&&_&&_.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(_.ownerDocument.documentElement,_)){null!==u&&Yn(_)&&(w=u.start,void 0===(E=u.end)&&(E=w),"selectionStart"in _?(_.selectionStart=w,_.selectionEnd=Math.min(E,_.value.length)):(E=(w=_.ownerDocument||document)&&w.defaultView||window).getSelection&&(E=E.getSelection(),l=_.textContent.length,s=Math.min(u.start,l),u=void 0===u.end?s:Math.min(u.end,l),!E.extend&&s>u&&(l=u,u=s,s=l),l=Kn(_,s),f=Kn(_,u),l&&f&&(1!==E.rangeCount||E.anchorNode!==l.node||E.anchorOffset!==l.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((w=w.createRange()).setStart(l.node,l.offset),E.removeAllRanges(),s>u?(E.addRange(w),E.extend(f.node,f.offset)):(w.setEnd(f.node,f.offset),E.addRange(w))))),w=[];for(E=_;E=E.parentNode;)1===E.nodeType&&w.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof _.focus&&_.focus(),_=0;_<w.length;_++)(E=w[_]).element.scrollLeft=E.left,E.element.scrollTop=E.top}Xn=null,Cn=!!$n,$n=null,e.current=n,Vs=i;do{try{for(_=r;null!==Vs;){var S=Vs.effectTag;if(36&S){var C=Vs.alternate;switch(E=_,(w=Vs).tag){case 0:case 11:case 15:ds(16,32,w);break;case 1:var T=w.stateNode;if(4&w.effectTag)if(null===C)T.componentDidMount();else{var k=w.elementType===w.type?C.memoizedProps:Xi(w.type,C.memoizedProps);T.componentDidUpdate(k,C.memoizedState,T.__reactInternalSnapshotBeforeUpdate)}var x=w.updateQueue;null!==x&&bo(0,x,T);break;case 3:var I=w.updateQueue;if(null!==I){if(s=null,null!==w.child)switch(w.child.tag){case 5:s=w.child.stateNode;break;case 1:s=w.child.stateNode}bo(0,I,s)}break;case 5:var P=w.stateNode;null===C&&4&w.effectTag&&Jn(w.type,w.memoizedProps)&&P.focus();break;case 6:case 4:case 12:break;case 13:if(null===w.memoizedState){var O=w.alternate;if(null!==O){var N=O.memoizedState;if(null!==N){var A=N.dehydrated;null!==A&&kt(A)}}}break;case 19:case 17:case 20:case 21:break;default:throw Error(a(163))}}if(128&S){w=void 0;var R=Vs.ref;if(null!==R){var D=Vs.stateNode;switch(Vs.tag){case 5:w=D;break;default:w=D}"function"==typeof R?R(w):R.current=w}}Vs=Vs.nextEffect}}catch(e){if(null===Vs)throw Error(a(330));Cu(Vs,e),Vs=Vs.nextEffect}}while(null!==Vs);Vs=null,Li(),Ps=o}else e.current=n;if(zs)zs=!1,Qs=e,Ks=t;else for(Vs=i;null!==Vs;)t=Vs.nextEffect,Vs.nextEffect=null,Vs=t;if(0===(t=e.firstPendingTime)&&(Hs=null),1073741823===t?e===$s?Ys++:(Ys=0,$s=e):Ys=0,"function"==typeof xu&&xu(n.stateNode,r),ru(e),qs)throw qs=!1,e=Bs,Bs=null,e;return 0!=(8&Ps)?null:(Ki(),null)}function _u(){for(;null!==Vs;){var e=Vs.effectTag;0!=(256&e)&&ps(Vs.alternate,Vs),0==(512&e)||zs||(zs=!0,zi(97,(function(){return wu(),null}))),Vs=Vs.nextEffect}}function wu(){if(90!==Ks){var e=97<Ks?97:Ks;return Ks=90,Hi(e,Eu)}}function Eu(){if(null===Qs)return!1;var e=Qs;if(Qs=null,0!=(48&Ps))throw Error(a(331));var t=Ps;for(Ps|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:ds(128,0,n),ds(0,64,n)}}catch(t){if(null===e)throw Error(a(330));Cu(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return Ps=t,Ki(),!0}function Su(e,t,n){po(e,t=Ss(e,t=cs(n,t),1073741823)),null!==(e=tu(e,1073741823))&&ru(e)}function Cu(e,t){if(3===e.tag)Su(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Su(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Hs||!Hs.has(r))){po(n,e=Cs(n,e=cs(t,e),1073741823)),null!==(n=tu(n,1073741823))&&ru(n);break}}n=n.return}}function Tu(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Os===e&&As===n?4===Rs||3===Rs&&1073741823===Ms&&Vi()-Ws<500?uu(e,As):Us=!0:ju(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,e.finishedExpirationTime===n&&(e.finishedExpirationTime=0,e.finishedWork=null),ru(e)))}function ku(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Zs(t=Js(),e,null)),null!==(e=tu(e,t))&&ru(e)}Ts=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||pi.current)Va=!0;else{if(r<n){switch(Va=!1,t.tag){case 3:$a(t),Ua();break;case 5:if(qo(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:yi(t.type)&&wi(t);break;case 4:Wo(t,t.stateNode.containerInfo);break;case 10:ro(t,t.memoizedProps.value);break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?ts(e,t,n):(li(Ho,1&Ho.current),null!==(t=os(e,t,n))?t.sibling:null);li(Ho,1&Ho.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return is(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),li(Ho,Ho.current),!r)return null}return os(e,t,n)}Va=!1}}else Va=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=vi(t,hi.current),ao(t,n),i=la(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,fa(),yi(r)){var o=!0;wi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null;var s=r.getDerivedStateFromProps;"function"==typeof s&&So(t,r,s,e),i.updater=Co,t.stateNode=i,i._reactInternalFiber=t,Io(t,r,e,n),t=Ya(null,t,r,!0,o,n)}else t.tag=0,qa(null,t,i,n),t=t.child;return t;case 16:if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Nu(e)?1:0;if(null!=e){if((e=e.$$typeof)===H)return 11;if(e===K)return 14}return 2}(i),e=Xi(i,e),o){case 0:t=Ka(null,t,i,e,n);break;case 1:t=Ga(null,t,i,e,n);break;case 11:t=Ba(null,t,i,e,n);break;case 14:t=Ha(null,t,i,Xi(i.type,e),r,n);break;default:throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ka(e,t,r,i=t.elementType===r?i:Xi(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ga(e,t,r,i=t.elementType===r?i:Xi(r,i),n);case 3:if($a(t),null===(r=t.updateQueue))throw Error(a(282));if(i=null!==(i=t.memoizedState)?i.element:null,mo(t,r,t.pendingProps,null,n),(r=t.memoizedState.element)===i)Ua(),t=os(e,t,n);else{if((i=t.stateNode.hydrate)&&(Aa=nr(t.stateNode.containerInfo.firstChild),Na=t,i=Ra=!0),i)for(n=Do(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else qa(e,t,r,n),Ua();t=t.child}return t;case 5:return qo(t),null===e&&La(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,Zn(r,i)?s=null:null!==o&&Zn(r,o)&&(t.effectTag|=16),Qa(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(qa(e,t,s,n),t=t.child),t;case 6:return null===e&&La(t),null;case 13:return ts(e,t,n);case 4:return Wo(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Ro(t,null,r,n):qa(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Ba(e,t,r,i=t.elementType===r?i:Xi(r,i),n);case 7:return qa(e,t,t.pendingProps,n),t.child;case 8:case 12:return qa(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(r=t.type._context,i=t.pendingProps,s=t.memoizedProps,ro(t,o=i.value),null!==s){var u=s.value;if(0===(o=$r(u,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,o):1073741823))){if(s.children===i.children&&!pi.current){t=os(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var c=u.dependencies;if(null!==c){s=u.child;for(var l=c.firstContext;null!==l;){if(l.context===r&&0!=(l.observedBits&o)){1===u.tag&&((l=fo(n,null)).tag=2,po(u,l)),u.expirationTime<n&&(u.expirationTime=n),null!==(l=u.alternate)&&l.expirationTime<n&&(l.expirationTime=n),oo(u.return,n),c.expirationTime<n&&(c.expirationTime=n);break}l=l.next}}else s=10===u.tag&&u.type===t.type?null:u.child;if(null!==s)s.return=u;else for(s=u;null!==s;){if(s===t){s=null;break}if(null!==(u=s.sibling)){u.return=s.return,s=u;break}s=s.return}u=s}}qa(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,ao(t,n),r=r(i=so(i,o.unstable_observedBits)),t.effectTag|=1,qa(e,t,r,n),t.child;case 14:return o=Xi(i=t.type,t.pendingProps),Ha(e,t,i,o=Xi(i.type,o),r,n);case 15:return za(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Xi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,yi(r)?(e=!0,wi(t)):e=!1,ao(t,n),ko(t,r,i),Io(t,r,i,n),Ya(null,t,r,!0,e,n);case 19:return is(e,t,n)}throw Error(a(156,t.tag))};var xu=null,Iu=null;function Pu(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Ou(e,t,n,r){return new Pu(e,t,n,r)}function Nu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Au(e,t){var n=e.alternate;return null===n?((n=Ou(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ru(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Nu(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case j:return Du(n.children,i,o,t);case B:s=8,i|=7;break;case U:s=8,i|=1;break;case W:return(e=Ou(12,n,t,8|i)).elementType=W,e.type=W,e.expirationTime=o,e;case z:return(e=Ou(13,n,t,i)).type=z,e.elementType=z,e.expirationTime=o,e;case Q:return(e=Ou(19,n,t,i)).elementType=Q,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case V:s=10;break e;case q:s=9;break e;case H:s=11;break e;case K:s=14;break e;case G:s=16,r=null;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Ou(s,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Du(e,t,n,r){return(e=Ou(7,e,r,t)).expirationTime=n,e}function Mu(e,t,n){return(e=Ou(6,e,null,t)).expirationTime=n,e}function Lu(e,t,n){return(t=Ou(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fu(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function ju(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Uu(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Wu(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Vu(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function qu(e,t,n,r){var i=t.current,o=Js(),s=wo.suspense;o=Zs(o,i,s);e:if(n){t:{if(tt(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(yi(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(a(171))}if(1===n.tag){var c=n.type;if(yi(c)){n=_i(n,c,u);break e}}n=u}else n=fi;return null===t.context?t.context=n:t.pendingContext=n,(t=fo(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),po(i,t),eu(i,o),o}function Bu(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function Hu(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function zu(e,t){Hu(e,t),(e=e.alternate)&&Hu(e,t)}function Qu(e,t,n){var r=new Fu(e,t,n=null!=n&&!0===n.hydrate),i=Ou(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,e[sr]=r.current,n&&0!==t&&function(e){var t=Dn(e);yt.forEach((function(n){Mn(n,e,t)})),gt.forEach((function(n){Mn(n,e,t)}))}(9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function Ku(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Gu(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Bu(a);s.call(e)}}qu(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Qu(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var u=i;i=function(){var e=Bu(a);u.call(e)}}su((function(){qu(t,a,e,i)}))}return Bu(a)}function Yu(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:F,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function $u(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Ku(t))throw Error(a(200));return Yu(e,t,null,n)}Qu.prototype.render=function(e,t){qu(e,this._internalRoot,null,void 0===t?null:t)},Qu.prototype.unmount=function(e){var t=this._internalRoot,n=void 0===e?null:e,r=t.containerInfo;qu(null,t,null,(function(){r[sr]=null,null!==n&&n()}))},ot=function(e){if(13===e.tag){var t=$i(Js(),150,100);eu(e,t),zu(e,t)}},at=function(e){if(13===e.tag){Js();var t=Yi++;eu(e,t),zu(e,t)}},st=function(e){if(13===e.tag){var t=Js();eu(e,t=Zs(t,e,null)),zu(e,t)}},ee=function(e,t,n){switch(t){case"input":if(Pe(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=fr(r);if(!i)throw Error(a(90));Te(r),Pe(r,i)}}}break;case"textarea":Le(e,n);break;case"select":null!=(t=n.value)&&Re(e,!!n.multiple,t,!1)}},ae=au,se=function(e,t,n,r){var i=Ps;Ps|=4;try{return Hi(98,e.bind(null,t,n,r))}finally{0===(Ps=i)&&Ki()}},ue=function(){0==(49&Ps)&&(function(){if(null!==Gs){var e=Gs;Gs=null,e.forEach((function(e,t){Vu(t,e),ru(t)})),Ki()}}(),wu())},ce=function(e,t){var n=Ps;Ps|=2;try{return e(t)}finally{0===(Ps=n)&&Ki()}};var Xu,Ju,Zu={createPortal:$u,findDOMNode:function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=it(t))?null:e.stateNode},hydrate:function(e,t,n){if(!Ku(t))throw Error(a(200));return Gu(null,e,t,!0,n)},render:function(e,t,n){if(!Ku(t))throw Error(a(200));return Gu(null,e,t,!1,n)},unstable_renderSubtreeIntoContainer:function(e,t,n,r){if(!Ku(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Gu(e,t,n,!1,r)},unmountComponentAtNode:function(e){if(!Ku(e))throw Error(a(40));return!!e._reactRootContainer&&(su((function(){Gu(null,null,e,!1,(function(){e._reactRootContainer=null,e[sr]=null}))})),!0)},unstable_createPortal:function(){return $u.apply(void 0,arguments)},unstable_batchedUpdates:au,flushSync:function(e,t){if(0!=(48&Ps))throw Error(a(187));var n=Ps;Ps|=1;try{return Hi(99,e.bind(null,t))}finally{Ps=n,Ki()}},__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED:{Events:[cr,lr,fr,N.injectEventPluginsByName,h,Rt,function(e){x(e,At)},ie,oe,On,O,wu,{current:!1}]}};Ju=(Xu={findFiberByHostInstance:ur,bundleType:0,version:"16.12.0",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xu=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},Iu=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Xu,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:R.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=it(e))?null:e.stateNode},findFiberByHostInstance:function(e){return Ju?Ju(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}));var ec={default:Zu},tc=ec&&Zu||ec;e.exports=tc.default||tc},function(e,t,n){"use strict";e.exports=n(364)},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,s;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var u=null,c=null,l=function(){if(null!==u)try{var e=t.unstable_now();u(!0,e),u=null}catch(e){throw setTimeout(l,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==u?setTimeout(r,0,e):(u=e,setTimeout(l,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},s=t.unstable_forceFrameRate=function(){}}else{var h=window.performance,p=window.Date,d=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var y=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof y&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof h&&"function"==typeof h.now)t.unstable_now=function(){return h.now()};else{var g=p.now();t.unstable_now=function(){return p.now()-g}}var m=!1,b=null,_=-1,w=5,E=0;a=function(){return t.unstable_now()>=E},s=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):w=0<e?Math.floor(1e3/e):5};var S=new MessageChannel,C=S.port2;S.port1.onmessage=function(){if(null!==b){var e=t.unstable_now();E=e+w;try{b(!0,e)?C.postMessage(null):(m=!1,b=null)}catch(e){throw C.postMessage(null),e}}else m=!1},r=function(e){b=e,m||(m=!0,C.postMessage(null))},i=function(e,n){_=d((function(){e(t.unstable_now())}),n)},o=function(){v(_),_=-1}}function T(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),i=e[r];if(!(void 0!==i&&0<I(i,t)))break e;e[r]=t,e[n]=i,n=r}}function k(e){return void 0===(e=e[0])?null:e}function x(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,u=e[s];if(void 0!==a&&0>I(a,n))void 0!==u&&0>I(u,a)?(e[r]=u,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==u&&0>I(u,n)))break e;e[r]=u,e[s]=n,r=s}}}return t}return null}function I(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],O=[],N=1,A=null,R=3,D=!1,M=!1,L=!1;function F(e){for(var t=k(O);null!==t;){if(null===t.callback)x(O);else{if(!(t.startTime<=e))break;x(O),t.sortIndex=t.expirationTime,T(P,t)}t=k(O)}}function j(e){if(L=!1,F(e),!M)if(null!==k(P))M=!0,r(U);else{var t=k(O);null!==t&&i(j,t.startTime-e)}}function U(e,n){M=!1,L&&(L=!1,o()),D=!0;var r=R;try{for(F(n),A=k(P);null!==A&&(!(A.expirationTime>n)||e&&!a());){var s=A.callback;if(null!==s){A.callback=null,R=A.priorityLevel;var u=s(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof u?A.callback=u:A===k(P)&&x(P),F(n)}else x(P);A=k(P)}if(null!==A)var c=!0;else{var l=k(O);null!==l&&i(j,l.startTime-n),c=!1}return c}finally{A=null,R=r,D=!1}}function W(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var V=s;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var s=t.unstable_now();if("object"==typeof a&&null!==a){var u=a.delay;u="number"==typeof u&&0<u?s+u:s,a="number"==typeof a.timeout?a.timeout:W(e)}else a=W(e),u=s;return e={id:N++,callback:n,priorityLevel:e,startTime:u,expirationTime:a=u+a,sortIndex:-1},u>s?(e.sortIndex=u,T(O,e),null===k(P)&&e===k(O)&&(L?o():L=!0,i(j,u-s))):(e.sortIndex=a,T(P,e),M||D||(M=!0,r(U))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();F(e);var n=k(P);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||a()},t.unstable_requestPaint=V,t.unstable_continueExecution=function(){M||D||(M=!0,r(U))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return k(P)},t.unstable_Profiling=null},function(e,t,n){"use strict";var r=n(366);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.12.0
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */Object.defineProperty(t,"__esModule",{value:!0});var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,s=r?Symbol.for("react.strict_mode"):60108,u=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,l=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,h=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,d=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,y=r?Symbol.for("react.memo"):60115,g=r?Symbol.for("react.lazy"):60116,m=r?Symbol.for("react.fundamental"):60117,b=r?Symbol.for("react.responder"):60118,_=r?Symbol.for("react.scope"):60119;function w(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case h:case a:case u:case s:case d:return e;default:switch(e=e&&e.$$typeof){case l:case p:case g:case y:case c:return e;default:return t}}case o:return t}}}function E(e){return w(e)===h}t.typeOf=w,t.AsyncMode=f,t.ConcurrentMode=h,t.ContextConsumer=l,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=g,t.Memo=y,t.Portal=o,t.Profiler=u,t.StrictMode=s,t.Suspense=d,t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===h||e===u||e===s||e===d||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===g||e.$$typeof===y||e.$$typeof===c||e.$$typeof===l||e.$$typeof===p||e.$$typeof===m||e.$$typeof===b||e.$$typeof===_)},t.isAsyncMode=function(e){return E(e)||w(e)===f},t.isConcurrentMode=E,t.isContextConsumer=function(e){return w(e)===l},t.isContextProvider=function(e){return w(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return w(e)===p},t.isFragment=function(e){return w(e)===a},t.isLazy=function(e){return w(e)===g},t.isMemo=function(e){return w(e)===y},t.isPortal=function(e){return w(e)===o},t.isProfiler=function(e){return w(e)===u},t.isStrictMode=function(e){return w(e)===s},t.isSuspense=function(e){return w(e)===d}},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.history=void 0;var r=f(n(1)),i=n(62),o=n(19),a=f(n(371)),s=f(n(378)),u=f(n(379)),c=f(n(380)),l=f(n(382));function f(e){return e&&e.__esModule?e:{default:e}}var h=t.history=(0,o.createBrowserHistory)();t.default=function(){return r.default.createElement(i.Router,{history:h},r.default.createElement("div",null,r.default.createElement(i.Switch,null,r.default.createElement(l.default,{path:"/",component:a.default,exact:!0}),r.default.createElement(c.default,{path:"/dashboard",component:s.default}),r.default.createElement(i.Route,{component:u.default}))))}},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LoginPage=void 0;var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r},a=n(61),s=n(109);var u=t.LoginPage=function(e){var t=e.startLogin;return o.default.createElement("div",{className:"box-layout"},o.default.createElement("div",{className:"box-layout__box"},o.default.createElement("h1",{className:"box-layout__title"},"Boilerplate"),o.default.createElement("p",null,"Tag line for app."),o.default.createElement("button",{className:"btn btn--blue",onClick:t},"Login with Google")))};t.default=(0,a.connect)(void 0,(function(e){return{startLogin:function(){return e((0,s.startLogin)())}}}))(u)},function(e,t,n){"use strict";var r,i=(r=n(2))&&"object"==typeof r&&"default"in r?r.default:r;
/**
 * @license
 * Copyright 2018 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
i.registerVersion("firebase","7.6.2","app"),e.exports=i},function(e,t,n){"use strict";n.r(t);n(374)},function(e,t,n){"use strict";(function(e){var t=n(2),r=n.n(t);(function(){var t,n="function"==typeof Object.defineProperties?Object.defineProperty:function(e,t,n){e!=Array.prototype&&e!=Object.prototype&&(e[t]=n.value)},i="undefined"!=typeof window&&window===this?this:void 0!==e&&null!=e?e:this;function o(e){var t=0;return function(){return t<e.length?{done:!1,value:e[t++]}:{done:!0}}}function a(e){var t="undefined"!=typeof Symbol&&Symbol.iterator&&e[Symbol.iterator];return t?t.call(e):{next:o(e)}}!function(e,t){if(t){var r=i;e=e.split(".");for(var o=0;o<e.length-1;o++){var a=e[o];a in r||(r[a]={}),r=r[a]}(t=t(o=r[e=e[e.length-1]]))!=o&&null!=t&&n(r,e,{configurable:!0,writable:!0,value:t})}}("Promise",(function(e){function t(e){this.b=0,this.c=void 0,this.a=[];var t=this.f();try{e(t.resolve,t.reject)}catch(e){t.reject(e)}}function n(){this.a=null}function r(e){return e instanceof t?e:new t((function(t){t(e)}))}if(e)return e;n.prototype.b=function(e){if(null==this.a){this.a=[];var t=this;this.c((function(){t.g()}))}this.a.push(e)};var o=i.setTimeout;n.prototype.c=function(e){o(e,0)},n.prototype.g=function(){for(;this.a&&this.a.length;){var e=this.a;this.a=[];for(var t=0;t<e.length;++t){var n=e[t];e[t]=null;try{n()}catch(e){this.f(e)}}}this.a=null},n.prototype.f=function(e){this.c((function(){throw e}))},t.prototype.f=function(){function e(e){return function(r){n||(n=!0,e.call(t,r))}}var t=this,n=!1;return{resolve:e(this.m),reject:e(this.g)}},t.prototype.m=function(e){if(e===this)this.g(new TypeError("A Promise cannot resolve to itself"));else if(e instanceof t)this.o(e);else{e:switch(typeof e){case"object":var n=null!=e;break e;case"function":n=!0;break e;default:n=!1}n?this.u(e):this.h(e)}},t.prototype.u=function(e){var t=void 0;try{t=e.then}catch(e){return void this.g(e)}"function"==typeof t?this.v(t,e):this.h(e)},t.prototype.g=function(e){this.i(2,e)},t.prototype.h=function(e){this.i(1,e)},t.prototype.i=function(e,t){if(0!=this.b)throw Error("Cannot settle("+e+", "+t+"): Promise already settled in state"+this.b);this.b=e,this.c=t,this.l()},t.prototype.l=function(){if(null!=this.a){for(var e=0;e<this.a.length;++e)s.b(this.a[e]);this.a=null}};var s=new n;return t.prototype.o=function(e){var t=this.f();e.La(t.resolve,t.reject)},t.prototype.v=function(e,t){var n=this.f();try{e.call(t,n.resolve,n.reject)}catch(e){n.reject(e)}},t.prototype.then=function(e,n){function r(e,t){return"function"==typeof e?function(t){try{i(e(t))}catch(e){o(e)}}:t}var i,o,a=new t((function(e,t){i=e,o=t}));return this.La(r(e,i),r(n,o)),a},t.prototype.catch=function(e){return this.then(void 0,e)},t.prototype.La=function(e,t){function n(){switch(r.b){case 1:e(r.c);break;case 2:t(r.c);break;default:throw Error("Unexpected state: "+r.b)}}var r=this;null==this.a?s.b(n):this.a.push(n)},t.resolve=r,t.reject=function(e){return new t((function(t,n){n(e)}))},t.race=function(e){return new t((function(t,n){for(var i=a(e),o=i.next();!o.done;o=i.next())r(o.value).La(t,n)}))},t.all=function(e){var n=a(e),i=n.next();return i.done?r([]):new t((function(e,t){function o(t){return function(n){a[t]=n,0==--s&&e(a)}}var a=[],s=0;do{a.push(void 0),s++,r(i.value).La(o(a.length-1),t),i=n.next()}while(!i.done)}))},t}));var s=s||{},u=this||self;function c(e){return"string"==typeof e}function l(e){return"boolean"==typeof e}var f=/^[\w+/_-]+[=]{0,2}$/,h=null;function p(){}function d(e){var t=typeof e;if("object"==t){if(!e)return"null";if(e instanceof Array)return"array";if(e instanceof Object)return t;var n=Object.prototype.toString.call(e);if("[object Window]"==n)return"object";if("[object Array]"==n||"number"==typeof e.length&&void 0!==e.splice&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("splice"))return"array";if("[object Function]"==n||void 0!==e.call&&void 0!==e.propertyIsEnumerable&&!e.propertyIsEnumerable("call"))return"function"}else if("function"==t&&void 0===e.call)return"object";return t}function v(e){return null===e}function y(e){return"array"==d(e)}function g(e){var t=d(e);return"array"==t||"object"==t&&"number"==typeof e.length}function m(e){return"function"==d(e)}function b(e){var t=typeof e;return"object"==t&&null!=e||"function"==t}var _="closure_uid_"+(1e9*Math.random()>>>0),w=0;function E(e,t,n){return e.call.apply(e.bind,arguments)}function S(e,t,n){if(!e)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),e.apply(t,n)}}return function(){return e.apply(t,arguments)}}function C(e,t,n){return(C=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?E:S).apply(null,arguments)}function T(e,t){var n=Array.prototype.slice.call(arguments,1);return function(){var t=n.slice();return t.push.apply(t,arguments),e.apply(this,t)}}var k=Date.now||function(){return+new Date};function x(e,t){function n(){}n.prototype=t.prototype,e.qb=t.prototype,e.prototype=new n,e.prototype.constructor=e,e.gd=function(e,n,r){for(var i=Array(arguments.length-2),o=2;o<arguments.length;o++)i[o-2]=arguments[o];return t.prototype[n].apply(e,i)}}function I(e){if(!e)return!1;try{return!!e.$goog_Thenable}catch(e){return!1}}function P(e){if(Error.captureStackTrace)Error.captureStackTrace(this,P);else{var t=Error().stack;t&&(this.stack=t)}e&&(this.message=String(e))}function O(e,t){for(var n="",r=(e=e.split("%s")).length-1,i=0;i<r;i++)n+=e[i]+(i<t.length?t[i]:"%s");P.call(this,n+e[r])}function N(e,t){throw new O("Failure"+(e?": "+e:""),Array.prototype.slice.call(arguments,1))}function A(e,t){this.c=e,this.f=t,this.b=0,this.a=null}function R(e,t){e.f(t),100>e.b&&(e.b++,t.next=e.a,e.a=t)}function D(){this.b=this.a=null}x(P,Error),P.prototype.name="CustomError",x(O,P),O.prototype.name="AssertionError",A.prototype.get=function(){if(0<this.b){this.b--;var e=this.a;this.a=e.next,e.next=null}else e=this.c();return e};var M=new A((function(){return new F}),(function(e){e.reset()}));function L(){var e=He,t=null;return e.a&&(t=e.a,e.a=e.a.next,e.a||(e.b=null),t.next=null),t}function F(){this.next=this.b=this.a=null}function j(e,t){e:{try{var n=e&&e.ownerDocument,r=n&&(n.defaultView||n.parentWindow);if((r=r||u).Element&&r.Location){var i=r;break e}}catch(e){}i=null}if(i&&void 0!==i[t]&&(!e||!(e instanceof i[t])&&(e instanceof i.Location||e instanceof i.Element))){if(b(e))try{var o=e.constructor.displayName||e.constructor.name||Object.prototype.toString.call(e)}catch(e){o="<object could not be stringified>"}else o=void 0===e?"undefined":null===e?"null":typeof e;N("Argument is not a %s (or a non-Element, non-Location mock); got: %s",t,o)}}D.prototype.add=function(e,t){var n=M.get();n.set(e,t),this.b?this.b.next=n:this.a=n,this.b=n},F.prototype.set=function(e,t){this.a=e,this.b=t,this.next=null},F.prototype.reset=function(){this.next=this.b=this.a=null};var U=Array.prototype.indexOf?function(e,t){return Array.prototype.indexOf.call(e,t,void 0)}:function(e,t){if(c(e))return c(t)&&1==t.length?e.indexOf(t,0):-1;for(var n=0;n<e.length;n++)if(n in e&&e[n]===t)return n;return-1},W=Array.prototype.forEach?function(e,t,n){Array.prototype.forEach.call(e,t,n)}:function(e,t,n){for(var r=e.length,i=c(e)?e.split(""):e,o=0;o<r;o++)o in i&&t.call(n,i[o],o,e)};var V=Array.prototype.map?function(e,t){return Array.prototype.map.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=Array(n),i=c(e)?e.split(""):e,o=0;o<n;o++)o in i&&(r[o]=t.call(void 0,i[o],o,e));return r},q=Array.prototype.some?function(e,t){return Array.prototype.some.call(e,t,void 0)}:function(e,t){for(var n=e.length,r=c(e)?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e))return!0;return!1};function B(e,t){return 0<=U(e,t)}function H(e,t){var n;return(n=0<=(t=U(e,t)))&&Array.prototype.splice.call(e,t,1),n}function z(e,t){!function(e,t){for(var n=c(e)?e.split(""):e,r=e.length-1;0<=r;--r)r in n&&t.call(void 0,n[r],r,e)}(e,(function(n,r){t.call(void 0,n,r,e)&&1==Array.prototype.splice.call(e,r,1).length&&0}))}function Q(e){return Array.prototype.concat.apply([],arguments)}function K(e){var t=e.length;if(0<t){for(var n=Array(t),r=0;r<t;r++)n[r]=e[r];return n}return[]}function G(e,t){for(var n in e)t.call(void 0,e[n],n,e)}function Y(e){for(var t in e)return!1;return!0}function $(e){var t,n={};for(t in e)n[t]=e[t];return n}var X="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function J(e,t){for(var n,r,i=1;i<arguments.length;i++){for(n in r=arguments[i])e[n]=r[n];for(var o=0;o<X.length;o++)n=X[o],Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}}function Z(e,t){this.a=e===ne&&t||"",this.b=te}function ee(e){return e instanceof Z&&e.constructor===Z&&e.b===te?e.a:(N("expected object of type Const, got '"+e+"'"),"type_error:Const")}Z.prototype.qa=!0,Z.prototype.pa=function(){return this.a},Z.prototype.toString=function(){return"Const{"+this.a+"}"};var te={},ne={},re=new Z(ne,"");function ie(){this.a="",this.b=ce}function oe(e){return e instanceof ie&&e.constructor===ie&&e.b===ce?e.a:(N("expected object of type TrustedResourceUrl, got '"+e+"' of type "+d(e)),"type_error:TrustedResourceUrl")}function ae(e,t){var n=ee(e);if(!ue.test(n))throw Error("Invalid TrustedResourceUrl format: "+n);return le(e=n.replace(se,(function(e,r){if(!Object.prototype.hasOwnProperty.call(t,r))throw Error('Found marker, "'+r+'", in format string, "'+n+'", but no valid label mapping found in args: '+JSON.stringify(t));return(e=t[r])instanceof Z?ee(e):encodeURIComponent(String(e))})))}ie.prototype.qa=!0,ie.prototype.pa=function(){return this.a.toString()},ie.prototype.toString=function(){return"TrustedResourceUrl{"+this.a+"}"};var se=/%{(\w+)}/g,ue=/^((https:)?\/\/[0-9a-z.:[\]-]+\/|\/[^/\\]|[^:/\\%]+\/|[^:/\\%]*[?#]|about:blank#)/i,ce={};function le(e){var t=new ie;return t.a=e,t}var fe=String.prototype.trim?function(e){return e.trim()}:function(e){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(e)[1]},he=/&/g,pe=/</g,de=/>/g,ve=/"/g,ye=/'/g,ge=/\x00/g,me=/[\x00&<>"']/;function be(e,t){return-1!=e.indexOf(t)}function _e(e,t){return e<t?-1:e>t?1:0}function we(){this.a="",this.b=ke}function Ee(e){return e instanceof we&&e.constructor===we&&e.b===ke?e.a:(N("expected object of type SafeUrl, got '"+e+"' of type "+d(e)),"type_error:SafeUrl")}we.prototype.qa=!0,we.prototype.pa=function(){return this.a.toString()},we.prototype.toString=function(){return"SafeUrl{"+this.a+"}"};var Se=/^(?:(?:https?|mailto|ftp):|[^:/?#]*(?:[/?#]|$))/i;function Ce(e){return e instanceof we?e:(e="object"==typeof e&&e.qa?e.pa():String(e),Se.test(e)||(e="about:invalid#zClosurez"),xe(e))}var Te,ke={};function xe(e){var t=new we;return t.a=e,t}xe("about:blank");e:{var Ie=u.navigator;if(Ie){var Pe=Ie.userAgent;if(Pe){Te=Pe;break e}}Te=""}function Oe(e){return be(Te,e)}function Ne(){this.a="",this.b=Re}function Ae(e){return e instanceof Ne&&e.constructor===Ne&&e.b===Re?e.a:(N("expected object of type SafeHtml, got '"+e+"' of type "+d(e)),"type_error:SafeHtml")}Ne.prototype.qa=!0,Ne.prototype.pa=function(){return this.a.toString()},Ne.prototype.toString=function(){return"SafeHtml{"+this.a+"}"};var Re={};function De(e){var t=new Ne;return t.a=e,t}De("<!DOCTYPE html>");var Me,Le,Fe=De("");function je(e,t){for(var n=e.split("%s"),r="",i=Array.prototype.slice.call(arguments,1);i.length&&1<n.length;)r+=n.shift()+i.shift();return r+n.join("%s")}function Ue(e){return me.test(e)&&(-1!=e.indexOf("&")&&(e=e.replace(he,"&amp;")),-1!=e.indexOf("<")&&(e=e.replace(pe,"&lt;")),-1!=e.indexOf(">")&&(e=e.replace(de,"&gt;")),-1!=e.indexOf('"')&&(e=e.replace(ve,"&quot;")),-1!=e.indexOf("'")&&(e=e.replace(ye,"&#39;")),-1!=e.indexOf("\0")&&(e=e.replace(ge,"&#0;"))),e}function We(e){u.setTimeout((function(){throw e}),0)}function Ve(){var e=u.MessageChannel;if(void 0===e&&"undefined"!=typeof window&&window.postMessage&&window.addEventListener&&!Oe("Presto")&&(e=function(){var e=document.createElement("IFRAME");e.style.display="none",function(e){var t=le(ee(re));j(e,"HTMLIFrameElement"),e.src=oe(t).toString()}(e),document.documentElement.appendChild(e);var t=e.contentWindow;(e=t.document).open(),e.write(Ae(Fe)),e.close();var n="callImmediate"+Math.random(),r="file:"==t.location.protocol?"*":t.location.protocol+"//"+t.location.host;e=C((function(e){"*"!=r&&e.origin!=r||e.data!=n||this.port1.onmessage()}),this),t.addEventListener("message",e,!1),this.port1={},this.port2={postMessage:function(){t.postMessage(n,r)}}}),void 0!==e&&!Oe("Trident")&&!Oe("MSIE")){var t=new e,n={},r=n;return t.port1.onmessage=function(){if(void 0!==n.next){var e=(n=n.next).yb;n.yb=null,e()}},function(e){r.next={yb:e},r=r.next,t.port2.postMessage(0)}}return"undefined"!=typeof document&&"onreadystatechange"in document.createElement("SCRIPT")?function(e){var t=document.createElement("SCRIPT");t.onreadystatechange=function(){t.onreadystatechange=null,t.parentNode.removeChild(t),t=null,e(),e=null},document.documentElement.appendChild(t)}:function(e){u.setTimeout(e,0)}}function qe(e,t){Le||function(){if(u.Promise&&u.Promise.resolve){var e=u.Promise.resolve(void 0);Le=function(){e.then(ze)}}else Le=function(){var e=ze;!m(u.setImmediate)||u.Window&&u.Window.prototype&&!Oe("Edge")&&u.Window.prototype.setImmediate==u.setImmediate?(Me||(Me=Ve()),Me(e)):u.setImmediate(e)}}(),Be||(Le(),Be=!0),He.add(e,t)}De("<br>");var Be=!1,He=new D;function ze(){for(var e;e=L();){try{e.a.call(e.b)}catch(e){We(e)}R(M,e)}Be=!1}function Qe(e,t){if(this.a=Ke,this.i=void 0,this.f=this.b=this.c=null,this.g=this.h=!1,e!=p)try{var n=this;e.call(t,(function(e){ot(n,Ge,e)}),(function(e){if(!(e instanceof ht))try{if(e instanceof Error)throw e;throw Error("Promise rejected.")}catch(e){}ot(n,Ye,e)}))}catch(e){ot(this,Ye,e)}}var Ke=0,Ge=2,Ye=3;function $e(){this.next=this.f=this.b=this.g=this.a=null,this.c=!1}$e.prototype.reset=function(){this.f=this.b=this.g=this.a=null,this.c=!1};var Xe=new A((function(){return new $e}),(function(e){e.reset()}));function Je(e,t,n){var r=Xe.get();return r.g=e,r.b=t,r.f=n,r}function Ze(e){if(e instanceof Qe)return e;var t=new Qe(p);return ot(t,Ge,e),t}function et(e){return new Qe((function(t,n){n(e)}))}function tt(e,t,n){at(e,t,n,null)||qe(T(t,e))}function nt(e){return new Qe((function(t){var n=e.length,r=[];if(n)for(var i=function(e,i,o){n--,r[e]=i?{Gb:!0,value:o}:{Gb:!1,reason:o},0==n&&t(r)},o=0;o<e.length;o++)tt(e[o],T(i,o,!0),T(i,o,!1));else t(r)}))}function rt(e,t){e.b||e.a!=Ge&&e.a!=Ye||st(e),e.f?e.f.next=t:e.b=t,e.f=t}function it(e,t,n,r){var i=Je(null,null,null);return i.a=new Qe((function(e,o){i.g=t?function(n){try{var i=t.call(r,n);e(i)}catch(e){o(e)}}:e,i.b=n?function(t){try{var i=n.call(r,t);void 0===i&&t instanceof ht?o(t):e(i)}catch(e){o(e)}}:o})),i.a.c=e,rt(e,i),i.a}function ot(e,t,n){e.a==Ke&&(e===n&&(t=Ye,n=new TypeError("Promise cannot resolve to itself")),e.a=1,at(n,e.Oc,e.Pc,e)||(e.i=n,e.a=t,e.c=null,st(e),t!=Ye||n instanceof ht||function(e,t){e.g=!0,qe((function(){e.g&&ft.call(null,t)}))}(e,n)))}function at(e,t,n,r){if(e instanceof Qe)return rt(e,Je(t||p,n||null,r)),!0;if(I(e))return e.then(t,n,r),!0;if(b(e))try{var i=e.then;if(m(i))return function(e,t,n,r,i){function o(e){a||(a=!0,r.call(i,e))}var a=!1;try{t.call(e,(function(e){a||(a=!0,n.call(i,e))}),o)}catch(e){o(e)}}(e,i,t,n,r),!0}catch(e){return n.call(r,e),!0}return!1}function st(e){e.h||(e.h=!0,qe(e.Zb,e))}function ut(e){var t=null;return e.b&&(t=e.b,e.b=t.next,t.next=null),e.b||(e.f=null),t}function ct(e,t,n,r){if(n==Ye&&t.b&&!t.c)for(;e&&e.g;e=e.c)e.g=!1;if(t.a)t.a.c=null,lt(t,n,r);else try{t.c?t.g.call(t.f):lt(t,n,r)}catch(e){ft.call(null,e)}R(Xe,t)}function lt(e,t,n){t==Ge?e.g.call(e.f,n):e.b&&e.b.call(e.f,n)}Qe.prototype.then=function(e,t,n){return it(this,m(e)?e:null,m(t)?t:null,n)},Qe.prototype.$goog_Thenable=!0,(t=Qe.prototype).ka=function(e,t){return(e=Je(e,e,t)).c=!0,rt(this,e),this},t.s=function(e,t){return it(this,null,e,t)},t.cancel=function(e){this.a==Ke&&qe((function(){!function e(t,n){if(t.a==Ke)if(t.c){var r=t.c;if(r.b){for(var i=0,o=null,a=null,s=r.b;s&&(s.c||(i++,s.a==t&&(o=s),!(o&&1<i)));s=s.next)o||(a=s);o&&(r.a==Ke&&1==i?e(r,n):(a?((i=a).next==r.f&&(r.f=i),i.next=i.next.next):ut(r),ct(r,o,Ye,n)))}t.c=null}else ot(t,Ye,n)}(this,new ht(e))}),this)},t.Oc=function(e){this.a=Ke,ot(this,Ge,e)},t.Pc=function(e){this.a=Ke,ot(this,Ye,e)},t.Zb=function(){for(var e;e=ut(this);)ct(this,e,this.a,this.i);this.h=!1};var ft=We;function ht(e){P.call(this,e)}function pt(){0!=dt&&(vt[this[_]||(this[_]=++w)]=this),this.va=this.va,this.la=this.la}x(ht,P),ht.prototype.name="cancel";var dt=0,vt={};function yt(e){if(!e.va&&(e.va=!0,e.za(),0!=dt)){var t=e[_]||(e[_]=++w);if(0!=dt&&e.la&&0<e.la.length)throw Error(e+" did not empty its onDisposeCallbacks queue. This probably means it overrode dispose() or disposeInternal() without calling the superclass' method.");delete vt[t]}}function gt(e){return gt[" "](e),e}pt.prototype.va=!1,pt.prototype.za=function(){if(this.la)for(;this.la.length;)this.la.shift()()},gt[" "]=p;var mt,bt,_t=Oe("Opera"),wt=Oe("Trident")||Oe("MSIE"),Et=Oe("Edge"),St=Et||wt,Ct=Oe("Gecko")&&!(be(Te.toLowerCase(),"webkit")&&!Oe("Edge"))&&!(Oe("Trident")||Oe("MSIE"))&&!Oe("Edge"),Tt=be(Te.toLowerCase(),"webkit")&&!Oe("Edge");function kt(){var e=u.document;return e?e.documentMode:void 0}e:{var xt="",It=(bt=Te,Ct?/rv:([^\);]+)(\)|;)/.exec(bt):Et?/Edge\/([\d\.]+)/.exec(bt):wt?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(bt):Tt?/WebKit\/(\S+)/.exec(bt):_t?/(?:Version)[ \/]?(\S+)/.exec(bt):void 0);if(It&&(xt=It?It[1]:""),wt){var Pt=kt();if(null!=Pt&&Pt>parseFloat(xt)){mt=String(Pt);break e}}mt=xt}var Ot,Nt={};function At(e){return function(e,t){var n=Nt;return Object.prototype.hasOwnProperty.call(n,e)?n[e]:n[e]=t(e)}(e,(function(){for(var t=0,n=fe(String(mt)).split("."),r=fe(String(e)).split("."),i=Math.max(n.length,r.length),o=0;0==t&&o<i;o++){var a=n[o]||"",s=r[o]||"";do{if(a=/(\d*)(\D*)(.*)/.exec(a)||["","","",""],s=/(\d*)(\D*)(.*)/.exec(s)||["","","",""],0==a[0].length&&0==s[0].length)break;t=_e(0==a[1].length?0:parseInt(a[1],10),0==s[1].length?0:parseInt(s[1],10))||_e(0==a[2].length,0==s[2].length)||_e(a[2],s[2]),a=a[3],s=s[3]}while(0==t)}return 0<=t}))}Ot=u.document&&wt?kt():void 0;var Rt=Object.freeze||function(e){return e},Dt=!wt||9<=Number(Ot),Mt=wt&&!At("9"),Lt=function(){if(!u.addEventListener||!Object.defineProperty)return!1;var e=!1,t=Object.defineProperty({},"passive",{get:function(){e=!0}});try{u.addEventListener("test",p,t),u.removeEventListener("test",p,t)}catch(e){}return e}();function Ft(e,t){this.type=e,this.b=this.target=t,this.Mb=!0}function jt(e,t){if(Ft.call(this,e?e.type:""),this.relatedTarget=this.b=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.pointerId=0,this.pointerType="",this.a=null,e){var n=this.type=e.type,r=e.changedTouches&&e.changedTouches.length?e.changedTouches[0]:null;if(this.target=e.target||e.srcElement,this.b=t,t=e.relatedTarget){if(Ct){e:{try{gt(t.nodeName);var i=!0;break e}catch(e){}i=!1}i||(t=null)}}else"mouseover"==n?t=e.fromElement:"mouseout"==n&&(t=e.toElement);this.relatedTarget=t,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==e.clientX?e.clientX:e.pageX,this.clientY=void 0!==e.clientY?e.clientY:e.pageY,this.screenX=e.screenX||0,this.screenY=e.screenY||0),this.button=e.button,this.key=e.key||"",this.ctrlKey=e.ctrlKey,this.altKey=e.altKey,this.shiftKey=e.shiftKey,this.metaKey=e.metaKey,this.pointerId=e.pointerId||0,this.pointerType=c(e.pointerType)?e.pointerType:Ut[e.pointerType]||"",this.a=e,e.defaultPrevented&&this.preventDefault()}}Ft.prototype.preventDefault=function(){this.Mb=!1},x(jt,Ft);var Ut=Rt({2:"touch",3:"pen",4:"mouse"});jt.prototype.preventDefault=function(){jt.qb.preventDefault.call(this);var e=this.a;if(e.preventDefault)e.preventDefault();else if(e.returnValue=!1,Mt)try{(e.ctrlKey||112<=e.keyCode&&123>=e.keyCode)&&(e.keyCode=-1)}catch(e){}},jt.prototype.f=function(){return this.a};var Wt="closure_listenable_"+(1e6*Math.random()|0),Vt=0;function qt(e,t,n,r,i){this.listener=e,this.proxy=null,this.src=t,this.type=n,this.capture=!!r,this.Pa=i,this.key=++Vt,this.ta=this.Ka=!1}function Bt(e){e.ta=!0,e.listener=null,e.proxy=null,e.src=null,e.Pa=null}function Ht(e){this.src=e,this.a={},this.b=0}function zt(e,t){var n=t.type;n in e.a&&H(e.a[n],t)&&(Bt(t),0==e.a[n].length&&(delete e.a[n],e.b--))}function Qt(e,t,n,r){for(var i=0;i<e.length;++i){var o=e[i];if(!o.ta&&o.listener==t&&o.capture==!!n&&o.Pa==r)return i}return-1}Ht.prototype.add=function(e,t,n,r,i){var o=e.toString();(e=this.a[o])||(e=this.a[o]=[],this.b++);var a=Qt(e,t,r,i);return-1<a?(t=e[a],n||(t.Ka=!1)):((t=new qt(t,this.src,o,!!r,i)).Ka=n,e.push(t)),t};var Kt="closure_lm_"+(1e6*Math.random()|0),Gt={};function Yt(e,t,n,r,i){if(r&&r.once)Xt(e,t,n,r,i);else if(y(t))for(var o=0;o<t.length;o++)Yt(e,t[o],n,r,i);else n=sn(n),e&&e[Wt]?cn(e,t,n,b(r)?!!r.capture:!!r,i):$t(e,t,n,!1,r,i)}function $t(e,t,n,r,i,o){if(!t)throw Error("Invalid event type");var a=b(i)?!!i.capture:!!i,s=on(e);if(s||(e[Kt]=s=new Ht(e)),!(n=s.add(t,n,r,a,o)).proxy){if(r=function(){var e=rn,t=Dt?function(n){return e.call(t.src,t.listener,n)}:function(n){if(!(n=e.call(t.src,t.listener,n)))return n};return t}(),n.proxy=r,r.src=e,r.listener=n,e.addEventListener)Lt||(i=a),void 0===i&&(i=!1),e.addEventListener(t.toString(),r,i);else if(e.attachEvent)e.attachEvent(en(t.toString()),r);else{if(!e.addListener||!e.removeListener)throw Error("addEventListener and attachEvent are unavailable.");e.addListener(r)}0}}function Xt(e,t,n,r,i){if(y(t))for(var o=0;o<t.length;o++)Xt(e,t[o],n,r,i);else n=sn(n),e&&e[Wt]?ln(e,t,n,b(r)?!!r.capture:!!r,i):$t(e,t,n,!0,r,i)}function Jt(e,t,n,r,i){if(y(t))for(var o=0;o<t.length;o++)Jt(e,t[o],n,r,i);else r=b(r)?!!r.capture:!!r,n=sn(n),e&&e[Wt]?(e=e.u,(t=String(t).toString())in e.a&&(-1<(n=Qt(o=e.a[t],n,r,i))&&(Bt(o[n]),Array.prototype.splice.call(o,n,1),0==o.length&&(delete e.a[t],e.b--)))):e&&(e=on(e))&&(t=e.a[t.toString()],e=-1,t&&(e=Qt(t,n,r,i)),(n=-1<e?t[e]:null)&&Zt(n))}function Zt(e){if("number"!=typeof e&&e&&!e.ta){var t=e.src;if(t&&t[Wt])zt(t.u,e);else{var n=e.type,r=e.proxy;t.removeEventListener?t.removeEventListener(n,r,e.capture):t.detachEvent?t.detachEvent(en(n),r):t.addListener&&t.removeListener&&t.removeListener(r),(n=on(t))?(zt(n,e),0==n.b&&(n.src=null,t[Kt]=null)):Bt(e)}}}function en(e){return e in Gt?Gt[e]:Gt[e]="on"+e}function tn(e,t,n,r){var i=!0;if((e=on(e))&&(t=e.a[t.toString()]))for(t=t.concat(),e=0;e<t.length;e++){var o=t[e];o&&o.capture==n&&!o.ta&&(o=nn(o,r),i=i&&!1!==o)}return i}function nn(e,t){var n=e.listener,r=e.Pa||e.src;return e.Ka&&Zt(e),n.call(r,t)}function rn(e,t){if(e.ta)return!0;if(!Dt){if(!t)e:{t=["window","event"];for(var n=u,r=0;r<t.length;r++)if(null==(n=n[t[r]])){t=null;break e}t=n}if(t=new jt(r=t,this),n=!0,!(0>r.keyCode||null!=r.returnValue)){e:{var i=!1;if(0==r.keyCode)try{r.keyCode=-1;break e}catch(e){i=!0}(i||null==r.returnValue)&&(r.returnValue=!0)}for(r=[],i=t.b;i;i=i.parentNode)r.push(i);for(e=e.type,i=r.length-1;0<=i;i--){t.b=r[i];var o=tn(r[i],e,!0,t);n=n&&o}for(i=0;i<r.length;i++)t.b=r[i],o=tn(r[i],e,!1,t),n=n&&o}return n}return nn(e,new jt(t,this))}function on(e){return(e=e[Kt])instanceof Ht?e:null}var an="__closure_events_fn_"+(1e9*Math.random()>>>0);function sn(e){return m(e)?e:(e[an]||(e[an]=function(t){return e.handleEvent(t)}),e[an])}function un(){pt.call(this),this.u=new Ht(this),this.Sb=this,this.Xa=null}function cn(e,t,n,r,i){e.u.add(String(t),n,!1,r,i)}function ln(e,t,n,r,i){e.u.add(String(t),n,!0,r,i)}function fn(e,t,n,r){if(!(t=e.u.a[String(t)]))return!0;t=t.concat();for(var i=!0,o=0;o<t.length;++o){var a=t[o];if(a&&!a.ta&&a.capture==n){var s=a.listener,u=a.Pa||a.src;a.Ka&&zt(e.u,a),i=!1!==s.call(u,r)&&i}}return i&&0!=r.Mb}function hn(e,t,n){if(m(e))n&&(e=C(e,n));else{if(!e||"function"!=typeof e.handleEvent)throw Error("Invalid listener argument");e=C(e.handleEvent,e)}return 2147483647<Number(t)?-1:u.setTimeout(e,t||0)}function pn(e){var t=null;return new Qe((function(n,r){-1==(t=hn((function(){n(void 0)}),e))&&r(Error("Failed to schedule timer."))})).s((function(e){throw u.clearTimeout(t),e}))}function dn(e){if(e.U&&"function"==typeof e.U)return e.U();if(c(e))return e.split("");if(g(e)){for(var t=[],n=e.length,r=0;r<n;r++)t.push(e[r]);return t}for(r in t=[],n=0,e)t[n++]=e[r];return t}function vn(e){if(e.X&&"function"==typeof e.X)return e.X();if(!e.U||"function"!=typeof e.U){if(g(e)||c(e)){var t=[];e=e.length;for(var n=0;n<e;n++)t.push(n);return t}for(var r in t=[],n=0,e)t[n++]=r;return t}}function yn(e,t){this.b={},this.a=[],this.c=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(e)if(e instanceof yn)for(n=e.X(),r=0;r<n.length;r++)this.set(n[r],e.get(n[r]));else for(r in e)this.set(r,e[r])}function gn(e){if(e.c!=e.a.length){for(var t=0,n=0;t<e.a.length;){var r=e.a[t];mn(e.b,r)&&(e.a[n++]=r),t++}e.a.length=n}if(e.c!=e.a.length){var i={};for(n=t=0;t<e.a.length;)mn(i,r=e.a[t])||(e.a[n++]=r,i[r]=1),t++;e.a.length=n}}function mn(e,t){return Object.prototype.hasOwnProperty.call(e,t)}x(un,pt),un.prototype[Wt]=!0,un.prototype.addEventListener=function(e,t,n,r){Yt(this,e,t,n,r)},un.prototype.removeEventListener=function(e,t,n,r){Jt(this,e,t,n,r)},un.prototype.dispatchEvent=function(e){var t,n=this.Xa;if(n)for(t=[];n;n=n.Xa)t.push(n);n=this.Sb;var r=e.type||e;if(c(e))e=new Ft(e,n);else if(e instanceof Ft)e.target=e.target||n;else{var i=e;J(e=new Ft(r,n),i)}if(i=!0,t)for(var o=t.length-1;0<=o;o--){var a=e.b=t[o];i=fn(a,r,!0,e)&&i}if(i=fn(a=e.b=n,r,!0,e)&&i,i=fn(a,r,!1,e)&&i,t)for(o=0;o<t.length;o++)i=fn(a=e.b=t[o],r,!1,e)&&i;return i},un.prototype.za=function(){if(un.qb.za.call(this),this.u){var e,t=this.u;for(e in t.a){for(var n=t.a[e],r=0;r<n.length;r++)Bt(n[r]);delete t.a[e],t.b--}}this.Xa=null},(t=yn.prototype).U=function(){gn(this);for(var e=[],t=0;t<this.a.length;t++)e.push(this.b[this.a[t]]);return e},t.X=function(){return gn(this),this.a.concat()},t.clear=function(){this.b={},this.c=this.a.length=0},t.get=function(e,t){return mn(this.b,e)?this.b[e]:t},t.set=function(e,t){mn(this.b,e)||(this.c++,this.a.push(e)),this.b[e]=t},t.forEach=function(e,t){for(var n=this.X(),r=0;r<n.length;r++){var i=n[r],o=this.get(i);e.call(t,o,i,this)}};var bn=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^/?#]*)@)?([^/#?]*?)(?::([0-9]+))?(?=[/#?]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function _n(e,t){var n;this.b=this.i=this.f="",this.l=null,this.g=this.c="",this.h=!1,e instanceof _n?(this.h=void 0!==t?t:e.h,wn(this,e.f),this.i=e.i,this.b=e.b,En(this,e.l),this.c=e.c,Sn(this,qn(e.a)),this.g=e.g):e&&(n=String(e).match(bn))?(this.h=!!t,wn(this,n[1]||"",!0),this.i=In(n[2]||""),this.b=In(n[3]||"",!0),En(this,n[4]),this.c=In(n[5]||"",!0),Sn(this,n[6]||"",!0),this.g=In(n[7]||"")):(this.h=!!t,this.a=new Ln(null,this.h))}function wn(e,t,n){e.f=n?In(t,!0):t,e.f&&(e.f=e.f.replace(/:$/,""))}function En(e,t){if(t){if(t=Number(t),isNaN(t)||0>t)throw Error("Bad port number "+t);e.l=t}else e.l=null}function Sn(e,t,n){t instanceof Ln?(e.a=t,function(e,t){t&&!e.f&&(Fn(e),e.c=null,e.a.forEach((function(e,t){var n=t.toLowerCase();t!=n&&(Un(this,t),Vn(this,n,e))}),e)),e.f=t}(e.a,e.h)):(n||(t=Pn(t,Dn)),e.a=new Ln(t,e.h))}function Cn(e,t,n){e.a.set(t,n)}function Tn(e,t){return e.a.get(t)}function kn(e){return e instanceof _n?new _n(e):new _n(e,void 0)}function xn(e,t){var n=new _n(null,void 0);return wn(n,"https"),e&&(n.b=e),t&&(n.c=t),n}function In(e,t){return e?t?decodeURI(e.replace(/%25/g,"%2525")):decodeURIComponent(e):""}function Pn(e,t,n){return c(e)?(e=encodeURI(e).replace(t,On),n&&(e=e.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),e):null}function On(e){return"%"+((e=e.charCodeAt(0))>>4&15).toString(16)+(15&e).toString(16)}_n.prototype.toString=function(){var e=[],t=this.f;t&&e.push(Pn(t,Nn,!0),":");var n=this.b;return(n||"file"==t)&&(e.push("//"),(t=this.i)&&e.push(Pn(t,Nn,!0),"@"),e.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.l)&&e.push(":",String(n))),(n=this.c)&&(this.b&&"/"!=n.charAt(0)&&e.push("/"),e.push(Pn(n,"/"==n.charAt(0)?Rn:An,!0))),(n=this.a.toString())&&e.push("?",n),(n=this.g)&&e.push("#",Pn(n,Mn)),e.join("")},_n.prototype.resolve=function(e){var t=new _n(this),n=!!e.f;n?wn(t,e.f):n=!!e.i,n?t.i=e.i:n=!!e.b,n?t.b=e.b:n=null!=e.l;var r=e.c;if(n)En(t,e.l);else if(n=!!e.c){if("/"!=r.charAt(0))if(this.b&&!this.c)r="/"+r;else{var i=t.c.lastIndexOf("/");-1!=i&&(r=t.c.substr(0,i+1)+r)}if(".."==(i=r)||"."==i)r="";else if(be(i,"./")||be(i,"/.")){r=0==i.lastIndexOf("/",0),i=i.split("/");for(var o=[],a=0;a<i.length;){var s=i[a++];"."==s?r&&a==i.length&&o.push(""):".."==s?((1<o.length||1==o.length&&""!=o[0])&&o.pop(),r&&a==i.length&&o.push("")):(o.push(s),r=!0)}r=o.join("/")}else r=i}return n?t.c=r:n=""!==e.a.toString(),n?Sn(t,qn(e.a)):n=!!e.g,n&&(t.g=e.g),t};var Nn=/[#\/\?@]/g,An=/[#\?:]/g,Rn=/[#\?]/g,Dn=/[#\?@]/g,Mn=/#/g;function Ln(e,t){this.b=this.a=null,this.c=e||null,this.f=!!t}function Fn(e){e.a||(e.a=new yn,e.b=0,e.c&&function(e,t){if(e){e=e.split("&");for(var n=0;n<e.length;n++){var r=e[n].indexOf("="),i=null;if(0<=r){var o=e[n].substring(0,r);i=e[n].substring(r+1)}else o=e[n];t(o,i?decodeURIComponent(i.replace(/\+/g," ")):"")}}}(e.c,(function(t,n){e.add(decodeURIComponent(t.replace(/\+/g," ")),n)})))}function jn(e){var t=vn(e);if(void 0===t)throw Error("Keys are undefined");var n=new Ln(null,void 0);e=dn(e);for(var r=0;r<t.length;r++){var i=t[r],o=e[r];y(o)?Vn(n,i,o):n.add(i,o)}return n}function Un(e,t){Fn(e),t=Bn(e,t),mn(e.a.b,t)&&(e.c=null,e.b-=e.a.get(t).length,mn((e=e.a).b,t)&&(delete e.b[t],e.c--,e.a.length>2*e.c&&gn(e)))}function Wn(e,t){return Fn(e),t=Bn(e,t),mn(e.a.b,t)}function Vn(e,t,n){Un(e,t),0<n.length&&(e.c=null,e.a.set(Bn(e,t),K(n)),e.b+=n.length)}function qn(e){var t=new Ln;return t.c=e.c,e.a&&(t.a=new yn(e.a),t.b=e.b),t}function Bn(e,t){return t=String(t),e.f&&(t=t.toLowerCase()),t}(t=Ln.prototype).add=function(e,t){Fn(this),this.c=null,e=Bn(this,e);var n=this.a.get(e);return n||this.a.set(e,n=[]),n.push(t),this.b+=1,this},t.clear=function(){this.a=this.c=null,this.b=0},t.forEach=function(e,t){Fn(this),this.a.forEach((function(n,r){W(n,(function(n){e.call(t,n,r,this)}),this)}),this)},t.X=function(){Fn(this);for(var e=this.a.U(),t=this.a.X(),n=[],r=0;r<t.length;r++)for(var i=e[r],o=0;o<i.length;o++)n.push(t[r]);return n},t.U=function(e){Fn(this);var t=[];if(c(e))Wn(this,e)&&(t=Q(t,this.a.get(Bn(this,e))));else{e=this.a.U();for(var n=0;n<e.length;n++)t=Q(t,e[n])}return t},t.set=function(e,t){return Fn(this),this.c=null,Wn(this,e=Bn(this,e))&&(this.b-=this.a.get(e).length),this.a.set(e,[t]),this.b+=1,this},t.get=function(e,t){return e&&0<(e=this.U(e)).length?String(e[0]):t},t.toString=function(){if(this.c)return this.c;if(!this.a)return"";for(var e=[],t=this.a.X(),n=0;n<t.length;n++){var r=t[n],i=encodeURIComponent(String(r));r=this.U(r);for(var o=0;o<r.length;o++){var a=i;""!==r[o]&&(a+="="+encodeURIComponent(String(r[o]))),e.push(a)}}return this.c=e.join("&")};var Hn=!wt||9<=Number(Ot);function zn(e){var t=document;return c(e)?t.getElementById(e):e}function Qn(e,t){G(t,(function(t,n){t&&"object"==typeof t&&t.qa&&(t=t.pa()),"style"==n?e.style.cssText=t:"class"==n?e.className=t:"for"==n?e.htmlFor=t:Kn.hasOwnProperty(n)?e.setAttribute(Kn[n],t):0==n.lastIndexOf("aria-",0)||0==n.lastIndexOf("data-",0)?e.setAttribute(n,t):e[n]=t}))}var Kn={cellpadding:"cellPadding",cellspacing:"cellSpacing",colspan:"colSpan",frameborder:"frameBorder",height:"height",maxlength:"maxLength",nonce:"nonce",role:"role",rowspan:"rowSpan",type:"type",usemap:"useMap",valign:"vAlign",width:"width"};function Gn(e,t,n){function r(n){n&&t.appendChild(c(n)?e.createTextNode(n):n)}for(var i=2;i<n.length;i++){var o=n[i];!g(o)||b(o)&&0<o.nodeType?r(o):W(Yn(o)?K(o):o,r)}}function Yn(e){if(e&&"number"==typeof e.length){if(b(e))return"function"==typeof e.item||"string"==typeof e.item;if(m(e))return"function"==typeof e.item}return!1}function $n(e){var t=[];return function e(t,n,r){if(null==n)r.push("null");else{if("object"==typeof n){if(y(n)){var i=n;n=i.length,r.push("[");for(var o="",a=0;a<n;a++)r.push(o),e(t,i[a],r),o=",";return void r.push("]")}if(!(n instanceof String||n instanceof Number||n instanceof Boolean)){for(i in r.push("{"),o="",n)Object.prototype.hasOwnProperty.call(n,i)&&("function"!=typeof(a=n[i])&&(r.push(o),er(i,r),r.push(":"),e(t,a,r),o=","));return void r.push("}")}n=n.valueOf()}switch(typeof n){case"string":er(n,r);break;case"number":r.push(isFinite(n)&&!isNaN(n)?String(n):"null");break;case"boolean":r.push(String(n));break;case"function":r.push("null");break;default:throw Error("Unknown type: "+typeof n)}}}(new Xn,e,t),t.join("")}function Xn(){}var Jn={'"':'\\"',"\\":"\\\\","/":"\\/","\b":"\\b","\f":"\\f","\n":"\\n","\r":"\\r","\t":"\\t","\v":"\\u000b"},Zn=/\uffff/.test("￿")?/[\\"\x00-\x1f\x7f-\uffff]/g:/[\\"\x00-\x1f\x7f-\xff]/g;function er(e,t){t.push('"',e.replace(Zn,(function(e){var t=Jn[e];return t||(t="\\u"+(65536|e.charCodeAt(0)).toString(16).substr(1),Jn[e]=t),t})),'"')}function tr(){var e=_r();return wt&&!!Ot&&11==Ot||/Edge\/\d+/.test(e)}function nr(){return u.window&&u.window.location.href||self&&self.location&&self.location.href||""}function rr(e,t){t=t||u.window;var n="about:blank";e&&(n=Ee(Ce(e)).toString()),t.location.href=n}function ir(e){return!!((e=(e||_r()).toLowerCase()).match(/android/)||e.match(/webos/)||e.match(/iphone|ipad|ipod/)||e.match(/blackberry/)||e.match(/windows phone/)||e.match(/iemobile/))}function or(e){e=e||u.window;try{e.close()}catch(e){}}function ar(e,t,n){var r=Math.floor(1e9*Math.random()).toString();t=t||500,n=n||600;var i=(window.screen.availHeight-n)/2,o=(window.screen.availWidth-t)/2;for(a in t={width:t,height:n,top:0<i?i:0,left:0<o?o:0,location:!0,resizable:!0,statusbar:!0,toolbar:!1},n=_r().toLowerCase(),r&&(t.target=r,be(n,"crios/")&&(t.target="_blank")),gr(_r())==vr&&(e=e||"http://localhost",t.scrollbars=!0),n=e||"",(e=t)||(e={}),r=window,t=n instanceof we?n:Ce(void 0!==n.href?n.href:String(n)),n=e.target||n.target,i=[],e)switch(a){case"width":case"height":case"top":case"left":i.push(a+"="+e[a]);break;case"target":case"noopener":case"noreferrer":break;default:i.push(a+"="+(e[a]?1:0))}var a=i.join(",");if((Oe("iPhone")&&!Oe("iPod")&&!Oe("iPad")||Oe("iPad")||Oe("iPod"))&&r.navigator&&r.navigator.standalone&&n&&"_self"!=n?(j(a=r.document.createElement("A"),"HTMLAnchorElement"),t instanceof we||t instanceof we||(t="object"==typeof t&&t.qa?t.pa():String(t),Se.test(t)||(t="about:invalid#zClosurez"),t=xe(t)),a.href=Ee(t),a.setAttribute("target",n),e.noreferrer&&a.setAttribute("rel","noreferrer"),(e=document.createEvent("MouseEvent")).initMouseEvent("click",!0,!0,r,1),a.dispatchEvent(e),a={}):e.noreferrer?(a=r.open("",n,a),e=Ee(t).toString(),a&&(St&&be(e,";")&&(e="'"+e.replace(/'/g,"%27")+"'"),a.opener=null,e=De('<meta name="referrer" content="no-referrer"><meta http-equiv="refresh" content="0; url='+Ue(e)+'">'),a.document.write(Ae(e)),a.document.close())):(a=r.open(Ee(t).toString(),n,a))&&e.noopener&&(a.opener=null),a)try{a.focus()}catch(e){}return a}var sr=/^\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}$/,ur=/^[^@]+@[^@]+$/;function cr(){var e=null;return new Qe((function(t){"complete"==u.document.readyState?t():(e=function(){t()},Xt(window,"load",e))})).s((function(t){throw Jt(window,"load",e),t}))}function lr(e){return e=e||_r(),!("file:"!==Tr()&&"ionic:"!==Tr()||!e.toLowerCase().match(/iphone|ipad|ipod|android/))}function fr(){var e=u.window;try{return!(!e||e==e.top)}catch(e){return!1}}function hr(){return void 0!==u.WorkerGlobalScope&&"function"==typeof u.importScripts}function pr(){return r.a.INTERNAL.hasOwnProperty("reactNative")?"ReactNative":r.a.INTERNAL.hasOwnProperty("node")?"Node":hr()?"Worker":"Browser"}function dr(){var e=pr();return"ReactNative"===e||"Node"===e}var vr="Firefox",yr="Chrome";function gr(e){var t=e.toLowerCase();return be(t,"opera/")||be(t,"opr/")||be(t,"opios/")?"Opera":be(t,"iemobile")?"IEMobile":be(t,"msie")||be(t,"trident/")?"IE":be(t,"edge/")?"Edge":be(t,"firefox/")?vr:be(t,"silk/")?"Silk":be(t,"blackberry")?"Blackberry":be(t,"webos")?"Webos":!be(t,"safari/")||be(t,"chrome/")||be(t,"crios/")||be(t,"android")?!be(t,"chrome/")&&!be(t,"crios/")||be(t,"edge/")?be(t,"android")?"Android":(e=e.match(/([a-zA-Z\d\.]+)\/[a-zA-Z\d\.]*$/))&&2==e.length?e[1]:"Other":yr:"Safari"}var mr={Wc:"FirebaseCore-web",Yc:"FirebaseUI-web"};function br(e,t){t=t||[];var n,r=[],i={};for(n in mr)i[mr[n]]=!0;for(n=0;n<t.length;n++)void 0!==i[t[n]]&&(delete i[t[n]],r.push(t[n]));return r.sort(),(t=r).length||(t=["FirebaseCore-web"]),"Browser"===(r=pr())?r=gr(i=_r()):"Worker"===r&&(r=gr(i=_r())+"-"+r),r+"/JsCore/"+e+"/"+t.join(",")}function _r(){return u.navigator&&u.navigator.userAgent||""}function wr(e,t){e=e.split("."),t=t||u;for(var n=0;n<e.length&&"object"==typeof t&&null!=t;n++)t=t[e[n]];return n!=e.length&&(t=void 0),t}function Er(){try{var e=u.localStorage,t=Or();if(e)return e.setItem(t,"1"),e.removeItem(t),!tr()||!!u.indexedDB}catch(e){return hr()&&!!u.indexedDB}return!1}function Sr(){return(Cr()||"chrome-extension:"===Tr()||lr())&&!dr()&&Er()&&!hr()}function Cr(){return"http:"===Tr()||"https:"===Tr()}function Tr(){return u.location&&u.location.protocol||null}function kr(e){return!ir(e=e||_r())&&gr(e)!=vr}function xr(e){return void 0===e?null:$n(e)}function Ir(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&null!==e[t]&&void 0!==e[t]&&(n[t]=e[t]);return n}function Pr(e){if(null!==e)return JSON.parse(e)}function Or(e){return e||Math.floor(1e9*Math.random()).toString()}function Nr(e){return"Safari"!=gr(e=e||_r())&&!e.toLowerCase().match(/iphone|ipad|ipod/)}function Ar(){var e=u.___jsl;if(e&&e.H)for(var t in e.H)if(e.H[t].r=e.H[t].r||[],e.H[t].L=e.H[t].L||[],e.H[t].r=e.H[t].L.concat(),e.CP)for(var n=0;n<e.CP.length;n++)e.CP[n]=null}function Rr(e,t){if(e>t)throw Error("Short delay should be less than long delay!");this.a=e,this.c=t,e=_r(),t=pr(),this.b=ir(e)||"ReactNative"===t}function Dr(){var e=u.document;return!e||void 0===e.visibilityState||"visible"==e.visibilityState}function Mr(e){try{var t=new Date(parseInt(e,10));if(!isNaN(t.getTime())&&!/[^0-9]/.test(e))return t.toUTCString()}catch(e){}return null}function Lr(){return!(!wr("fireauth.oauthhelper",u)&&!wr("fireauth.iframe",u))}Rr.prototype.get=function(){var e=u.navigator;return!e||"boolean"!=typeof e.onLine||!Cr()&&"chrome-extension:"!==Tr()&&void 0===e.connection||e.onLine?this.b?this.c:this.a:Math.min(5e3,this.a)};var Fr,jr={};function Ur(e){jr[e]||(jr[e]=!0,"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(e))}try{var Wr={};Object.defineProperty(Wr,"abcd",{configurable:!0,enumerable:!0,value:1}),Object.defineProperty(Wr,"abcd",{configurable:!0,enumerable:!0,value:2}),Fr=2==Wr.abcd}catch(bt){Fr=!1}function Vr(e,t,n){Fr?Object.defineProperty(e,t,{configurable:!0,enumerable:!0,value:n}):e[t]=n}function qr(e,t){if(t)for(var n in t)t.hasOwnProperty(n)&&Vr(e,n,t[n])}function Br(e){var t={};return qr(t,e),t}function Hr(e){var t=e;if("object"==typeof e&&null!=e)for(var n in t="length"in e?[]:{},e)Vr(t,n,Hr(e[n]));return t}function zr(e){var t={},n=e[Kr],r=e[Gr];if(!(e=e[Yr])||e!=Qr&&!n)throw Error("Invalid provider user info!");t[Xr]=r||null,t[$r]=n||null,Vr(this,Zr,e),Vr(this,Jr,Hr(t))}var Qr="EMAIL_SIGNIN",Kr="email",Gr="newEmail",Yr="requestType",$r="email",Xr="fromEmail",Jr="data",Zr="operation";function ei(e,t){this.code=ni+e,this.message=t||ri[e]||""}function ti(e){var t=e&&e.code;return t?new ei(t.substring(ni.length),e.message):null}x(ei,Error),ei.prototype.A=function(){return{code:this.code,message:this.message}},ei.prototype.toJSON=function(){return this.A()};var ni="auth/",ri={"admin-restricted-operation":"This operation is restricted to administrators only.","argument-error":"","app-not-authorized":"This app, identified by the domain where it's hosted, is not authorized to use Firebase Authentication with the provided API key. Review your key configuration in the Google API console.","app-not-installed":"The requested mobile application corresponding to the identifier (Android package name or iOS bundle ID) provided is not installed on this device.","captcha-check-failed":"The reCAPTCHA response token provided is either invalid, expired, already used or the domain associated with it does not match the list of whitelisted domains.","code-expired":"The SMS code has expired. Please re-send the verification code to try again.","cordova-not-ready":"Cordova framework is not ready.","cors-unsupported":"This browser is not supported.","credential-already-in-use":"This credential is already associated with a different user account.","custom-token-mismatch":"The custom token corresponds to a different audience.","requires-recent-login":"This operation is sensitive and requires recent authentication. Log in again before retrying this request.","dynamic-link-not-activated":"Please activate Dynamic Links in the Firebase Console and agree to the terms and conditions.","email-already-in-use":"The email address is already in use by another account.","expired-action-code":"The action code has expired. ","cancelled-popup-request":"This operation has been cancelled due to another conflicting popup being opened.","internal-error":"An internal error has occurred.","invalid-app-credential":"The phone verification request contains an invalid application verifier. The reCAPTCHA token response is either invalid or expired.","invalid-app-id":"The mobile app identifier is not registed for the current project.","invalid-user-token":"This user's credential isn't valid for this project. This can happen if the user's token has been tampered with, or if the user isn't for the project associated with this API key.","invalid-auth-event":"An internal error has occurred.","invalid-verification-code":"The SMS verification code used to create the phone auth credential is invalid. Please resend the verification code sms and be sure use the verification code provided by the user.","invalid-continue-uri":"The continue URL provided in the request is invalid.","invalid-cordova-configuration":"The following Cordova plugins must be installed to enable OAuth sign-in: cordova-plugin-buildinfo, cordova-universal-links-plugin, cordova-plugin-browsertab, cordova-plugin-inappbrowser and cordova-plugin-customurlscheme.","invalid-custom-token":"The custom token format is incorrect. Please check the documentation.","invalid-dynamic-link-domain":"The provided dynamic link domain is not configured or authorized for the current project.","invalid-email":"The email address is badly formatted.","invalid-api-key":"Your API key is invalid, please check you have copied it correctly.","invalid-cert-hash":"The SHA-1 certificate hash provided is invalid.","invalid-credential":"The supplied auth credential is malformed or has expired.","invalid-message-payload":"The email template corresponding to this action contains invalid characters in its message. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-oauth-provider":"EmailAuthProvider is not supported for this operation. This operation only supports OAuth providers.","invalid-oauth-client-id":"The OAuth client ID provided is either invalid or does not match the specified API key.","unauthorized-domain":"This domain is not authorized for OAuth operations for your Firebase project. Edit the list of authorized domains from the Firebase console.","invalid-action-code":"The action code is invalid. This can happen if the code is malformed, expired, or has already been used.","wrong-password":"The password is invalid or the user does not have a password.","invalid-persistence-type":"The specified persistence type is invalid. It can only be local, session or none.","invalid-phone-number":"The format of the phone number provided is incorrect. Please enter the phone number in a format that can be parsed into E.164 format. E.164 phone numbers are written in the format [+][country code][subscriber number including area code].","invalid-provider-id":"The specified provider ID is invalid.","invalid-recipient-email":"The email corresponding to this action failed to send as the provided recipient email address is invalid.","invalid-sender":"The email template corresponding to this action contains an invalid sender email or name. Please fix by going to the Auth email templates section in the Firebase Console.","invalid-verification-id":"The verification ID used to create the phone auth credential is invalid.","invalid-tenant-id":"The Auth instance's tenant ID is invalid.","missing-android-pkg-name":"An Android Package Name must be provided if the Android App is required to be installed.","auth-domain-config-required":"Be sure to include authDomain when calling firebase.initializeApp(), by following the instructions in the Firebase console.","missing-app-credential":"The phone verification request is missing an application verifier assertion. A reCAPTCHA response token needs to be provided.","missing-verification-code":"The phone auth credential was created with an empty SMS verification code.","missing-continue-uri":"A continue URL must be provided in the request.","missing-iframe-start":"An internal error has occurred.","missing-ios-bundle-id":"An iOS Bundle ID must be provided if an App Store ID is provided.","missing-or-invalid-nonce":"The request does not contain a valid nonce. This can occur if the SHA-256 hash of the provided raw nonce does not match the hashed nonce in the ID token payload.","missing-phone-number":"To send verification codes, provide a phone number for the recipient.","missing-verification-id":"The phone auth credential was created with an empty verification ID.","app-deleted":"This instance of FirebaseApp has been deleted.","account-exists-with-different-credential":"An account already exists with the same email address but different sign-in credentials. Sign in using a provider associated with this email address.","network-request-failed":"A network error (such as timeout, interrupted connection or unreachable host) has occurred.","no-auth-event":"An internal error has occurred.","no-such-provider":"User was not linked to an account with the given provider.","null-user":"A null user object was provided as the argument for an operation which requires a non-null user object.","operation-not-allowed":"The given sign-in provider is disabled for this Firebase project. Enable it in the Firebase console, under the sign-in method tab of the Auth section.","operation-not-supported-in-this-environment":'This operation is not supported in the environment this application is running on. "location.protocol" must be http, https or chrome-extension and web storage must be enabled.',"popup-blocked":"Unable to establish a connection with the popup. It may have been blocked by the browser.","popup-closed-by-user":"The popup has been closed by the user before finalizing the operation.","provider-already-linked":"User can only be linked to one identity for the given provider.","quota-exceeded":"The project's quota for this operation has been exceeded.","redirect-cancelled-by-user":"The redirect operation has been cancelled by the user before finalizing.","redirect-operation-pending":"A redirect sign-in operation is already pending.","rejected-credential":"The request contains malformed or mismatching credentials.","tenant-id-mismatch":"The provided tenant ID does not match the Auth instance's tenant ID",timeout:"The operation has timed out.","user-token-expired":"The user's credential is no longer valid. The user must sign in again.","too-many-requests":"We have blocked all requests from this device due to unusual activity. Try again later.","unauthorized-continue-uri":"The domain of the continue URL is not whitelisted.  Please whitelist the domain in the Firebase console.","unsupported-persistence-type":"The current environment does not support the specified persistence type.","unsupported-tenant-operation":"This operation is not supported in a multi-tenant context.","user-cancelled":"The user did not grant your application the permissions it requested.","user-not-found":"There is no user record corresponding to this identifier. The user may have been deleted.","user-disabled":"The user account has been disabled by an administrator.","user-mismatch":"The supplied credentials do not correspond to the previously signed in user.","user-signed-out":"","weak-password":"The password must be 6 characters long or more.","web-storage-unsupported":"This browser is not supported or 3rd party cookies and data may be disabled."};function ii(e){var t=Tn(e=kn(e),oi)||null,n=Tn(e,ai)||null,r=Tn(e,ci)||null;if(r=r&&fi[r]||null,!t||!n||!r)throw new ei("argument-error",oi+", "+ai+"and "+ci+" are required in a valid action code URL.");qr(this,{apiKey:t,operation:r,code:n,continueUrl:Tn(e,si)||null,languageCode:Tn(e,ui)||null,tenantId:Tn(e,li)||null})}var oi="apiKey",ai="oobCode",si="continueUrl",ui="languageCode",ci="mode",li="tenantId",fi={recoverEmail:"RECOVER_EMAIL",resetPassword:"PASSWORD_RESET",signIn:Qr,verifyEmail:"VERIFY_EMAIL"};function hi(e){try{return new ii(e)}catch(e){return null}}function pi(e){var t=e[mi];if(void 0===t)throw new ei("missing-continue-uri");if("string"!=typeof t||"string"==typeof t&&!t.length)throw new ei("invalid-continue-uri");this.h=t,this.b=this.a=null,this.g=!1;var n=e[di];if(n&&"object"==typeof n){t=n[wi];var r=n[bi];if(n=n[_i],"string"==typeof t&&t.length){if(this.a=t,void 0!==r&&"boolean"!=typeof r)throw new ei("argument-error",bi+" property must be a boolean when specified.");if(this.g=!!r,void 0!==n&&("string"!=typeof n||"string"==typeof n&&!n.length))throw new ei("argument-error",_i+" property must be a non empty string when specified.");this.b=n||null}else{if(void 0!==t)throw new ei("argument-error",wi+" property must be a non empty string when specified.");if(void 0!==r||void 0!==n)throw new ei("missing-android-pkg-name")}}else if(void 0!==n)throw new ei("argument-error",di+" property must be a non null object when specified.");if(this.f=null,(t=e[gi])&&"object"==typeof t){if("string"==typeof(t=t[Ei])&&t.length)this.f=t;else if(void 0!==t)throw new ei("argument-error",Ei+" property must be a non empty string when specified.")}else if(void 0!==t)throw new ei("argument-error",gi+" property must be a non null object when specified.");if(void 0!==(t=e[yi])&&"boolean"!=typeof t)throw new ei("argument-error",yi+" property must be a boolean when specified.");if(this.c=!!t,void 0!==(e=e[vi])&&("string"!=typeof e||"string"==typeof e&&!e.length))throw new ei("argument-error",vi+" property must be a non empty string when specified.");this.i=e||null}var di="android",vi="dynamicLinkDomain",yi="handleCodeInApp",gi="iOS",mi="url",bi="installApp",_i="minimumVersion",wi="packageName",Ei="bundleId";function Si(e){var t={};for(var n in t.continueUrl=e.h,t.canHandleCodeInApp=e.c,(t.androidPackageName=e.a)&&(t.androidMinimumVersion=e.b,t.androidInstallApp=e.g),t.iOSBundleId=e.f,t.dynamicLinkDomain=e.i,t)null===t[n]&&delete t[n];return t}var Ci=null,Ti=null;function ki(e){var t="";return function(e,t){function n(t){for(;r<e.length;){var n=e.charAt(r++),i=Ti[n];if(null!=i)return i;if(!/^[\s\xa0]*$/.test(n))throw Error("Unknown base64 encoding at char: "+n)}return t}!function(){if(!Ci){Ci={},Ti={};for(var e=0;65>e;e++)Ci[e]="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charAt(e),Ti[Ci[e]]=e,62<=e&&(Ti["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_.".charAt(e)]=e)}}();for(var r=0;;){var i=n(-1),o=n(0),a=n(64),s=n(64);if(64===s&&-1===i)break;t(i<<2|o>>4),64!=a&&(t(o<<4&240|a>>2),64!=s&&t(a<<6&192|s))}}(e,(function(e){t+=String.fromCharCode(e)})),t}function xi(e){this.f=e.sub,k(),this.a=e.provider_id||e.firebase&&e.firebase.sign_in_provider||null,this.c=e.firebase&&e.firebase.tenant||null,this.b=!!e.is_anonymous||"anonymous"==this.a}function Ii(e){return(e=Pi(e))&&e.sub&&e.iss&&e.aud&&e.exp?new xi(e):null}function Pi(e){if(!e)return null;if(3!=(e=e.split(".")).length)return null;for(var t=(4-(e=e[1]).length%4)%4,n=0;n<t;n++)e+=".";try{return JSON.parse(ki(e))}catch(e){}return null}xi.prototype.R=function(){return this.c},xi.prototype.g=function(){return this.b};var Oi,Ni={bd:{cb:"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://securetoken.googleapis.com/v1/token",id:"p"},dd:{cb:"https://staging-www.sandbox.googleapis.com/identitytoolkit/v3/relyingparty/",ib:"https://staging-securetoken.sandbox.googleapis.com/v1/token",id:"s"},ed:{cb:"https://www-googleapis-test.sandbox.google.com/identitytoolkit/v3/relyingparty/",ib:"https://test-securetoken.sandbox.googleapis.com/v1/token",id:"t"}};function Ai(e){for(var t in Ni)if(Ni[t].id===e)return{firebaseEndpoint:(e=Ni[t]).cb,secureTokenEndpoint:e.ib};return null}Oi=Ai("__EID__")?"__EID__":void 0;var Ri="oauth_consumer_key oauth_nonce oauth_signature oauth_signature_method oauth_timestamp oauth_token oauth_version".split(" "),Di=["client_id","response_type","scope","redirect_uri","state"],Mi={Xc:{Ea:"locale",sa:700,ra:600,Fa:"facebook.com",Qa:Di},Zc:{Ea:null,sa:500,ra:750,Fa:"github.com",Qa:Di},$c:{Ea:"hl",sa:515,ra:680,Fa:"google.com",Qa:Di},fd:{Ea:"lang",sa:485,ra:705,Fa:"twitter.com",Qa:Ri},Vc:{Ea:"locale",sa:600,ra:600,Fa:"apple.com",Qa:[]}};function Li(e){for(var t in Mi)if(Mi[t].Fa==e)return Mi[t];return null}function Fi(e){var t={};t["facebook.com"]=qi,t["google.com"]=Hi,t["github.com"]=Bi,t["twitter.com"]=zi;var n=e&&e[Ui];try{if(n)return t[n]?new t[n](e):new Vi(e);if(void 0!==e[ji])return new Wi(e)}catch(e){}return null}var ji="idToken",Ui="providerId";function Wi(e){var t=e[Ui];if(!t&&e[ji]){var n=Ii(e[ji]);n&&n.a&&(t=n.a)}if(!t)throw Error("Invalid additional user info!");"anonymous"!=t&&"custom"!=t||(t=null),n=!1,void 0!==e.isNewUser?n=!!e.isNewUser:"identitytoolkit#SignupNewUserResponse"===e.kind&&(n=!0),Vr(this,"providerId",t),Vr(this,"isNewUser",n)}function Vi(e){Wi.call(this,e),Vr(this,"profile",Hr((e=Pr(e.rawUserInfo||"{}"))||{}))}function qi(e){if(Vi.call(this,e),"facebook.com"!=this.providerId)throw Error("Invalid provider ID!")}function Bi(e){if(Vi.call(this,e),"github.com"!=this.providerId)throw Error("Invalid provider ID!");Vr(this,"username",this.profile&&this.profile.login||null)}function Hi(e){if(Vi.call(this,e),"google.com"!=this.providerId)throw Error("Invalid provider ID!")}function zi(e){if(Vi.call(this,e),"twitter.com"!=this.providerId)throw Error("Invalid provider ID!");Vr(this,"username",e.screenName||null)}function Qi(e){var t=kn(e),n=Tn(t,"link"),r=Tn(kn(n),"link");return t=Tn(t,"deep_link_id"),Tn(kn(t),"link")||t||r||n||e}function Ki(){}function Gi(e,t){return e.then((function(e){if(e[La]){var n=Ii(e[La]);if(!n||t!=n.f)throw new ei("user-mismatch");return e}throw new ei("user-mismatch")})).s((function(e){throw e&&e.code&&e.code==ni+"user-not-found"?new ei("user-mismatch"):e}))}function Yi(e,t){if(!t)throw new ei("internal-error","failed to construct a credential");this.a=t,Vr(this,"providerId",e),Vr(this,"signInMethod",e)}function $i(e){return{pendingToken:e.a,requestUri:"http://localhost"}}function Xi(e){if(e&&e.providerId&&e.signInMethod&&0==e.providerId.indexOf("saml.")&&e.pendingToken)try{return new Yi(e.providerId,e.pendingToken)}catch(e){}return null}function Ji(e,t,n){if(this.a=null,t.idToken||t.accessToken)t.idToken&&Vr(this,"idToken",t.idToken),t.accessToken&&Vr(this,"accessToken",t.accessToken),t.nonce&&!t.pendingToken&&Vr(this,"nonce",t.nonce),t.pendingToken&&(this.a=t.pendingToken);else{if(!t.oauthToken||!t.oauthTokenSecret)throw new ei("internal-error","failed to construct a credential");Vr(this,"accessToken",t.oauthToken),Vr(this,"secret",t.oauthTokenSecret)}Vr(this,"providerId",e),Vr(this,"signInMethod",n)}function Zi(e){var t={};return e.idToken&&(t.id_token=e.idToken),e.accessToken&&(t.access_token=e.accessToken),e.secret&&(t.oauth_token_secret=e.secret),t.providerId=e.providerId,e.nonce&&!e.a&&(t.nonce=e.nonce),t={postBody:jn(t).toString(),requestUri:"http://localhost"},e.a&&(delete t.postBody,t.pendingToken=e.a),t}function eo(e){if(e&&e.providerId&&e.signInMethod){var t={idToken:e.oauthIdToken,accessToken:e.oauthTokenSecret?null:e.oauthAccessToken,oauthTokenSecret:e.oauthTokenSecret,oauthToken:e.oauthTokenSecret&&e.oauthAccessToken,nonce:e.nonce,pendingToken:e.pendingToken};try{return new Ji(e.providerId,t,e.signInMethod)}catch(e){}}return null}function to(e,t){this.Fc=t||[],qr(this,{providerId:e,isOAuthProvider:!0}),this.zb={},this.eb=(Li(e)||{}).Ea||null,this.bb=null}function no(e){if("string"!=typeof e||0!=e.indexOf("saml."))throw new ei("argument-error",'SAML provider IDs must be prefixed with "saml."');to.call(this,e,[])}function ro(e){to.call(this,e,Di),this.a=[]}function io(){ro.call(this,"facebook.com")}function oo(e){if(!e)throw new ei("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return b(e)&&(t=e.accessToken),(new io).credential({accessToken:t})}function ao(){ro.call(this,"github.com")}function so(e){if(!e)throw new ei("argument-error","credential failed: expected 1 argument (the OAuth access token).");var t=e;return b(e)&&(t=e.accessToken),(new ao).credential({accessToken:t})}function uo(){ro.call(this,"google.com"),this.ya("profile")}function co(e,t){var n=e;return b(e)&&(n=e.idToken,t=e.accessToken),(new uo).credential({idToken:n,accessToken:t})}function lo(){to.call(this,"twitter.com",Ri)}function fo(e,t){var n=e;if(b(n)||(n={oauthToken:e,oauthTokenSecret:t}),!n.oauthToken||!n.oauthTokenSecret)throw new ei("argument-error","credential failed: expected 2 arguments (the OAuth access token and secret).");return new Ji("twitter.com",n,"twitter.com")}function ho(e,t,n){this.a=e,this.c=t,Vr(this,"providerId","password"),Vr(this,"signInMethod",n===vo.EMAIL_LINK_SIGN_IN_METHOD?vo.EMAIL_LINK_SIGN_IN_METHOD:vo.EMAIL_PASSWORD_SIGN_IN_METHOD)}function po(e){return e&&e.email&&e.password?new ho(e.email,e.password,e.signInMethod):null}function vo(){qr(this,{providerId:"password",isOAuthProvider:!1})}function yo(e,t){if(!(t=go(t)))throw new ei("argument-error","Invalid email link!");return new ho(e,t.code,vo.EMAIL_LINK_SIGN_IN_METHOD)}function go(e){return(e=hi(e=Qi(e)))&&e.operation===Qr?e:null}function mo(e){if(!(e.Va&&e.Ua||e.Ha&&e.ba))throw new ei("internal-error");this.a=e,Vr(this,"providerId","phone"),Vr(this,"signInMethod","phone")}function bo(e){if(e&&"phone"===e.providerId&&(e.verificationId&&e.verificationCode||e.temporaryProof&&e.phoneNumber)){var t={};return W(["verificationId","verificationCode","temporaryProof","phoneNumber"],(function(n){e[n]&&(t[n]=e[n])})),new mo(t)}return null}function _o(e){return e.a.Ha&&e.a.ba?{temporaryProof:e.a.Ha,phoneNumber:e.a.ba}:{sessionInfo:e.a.Va,code:e.a.Ua}}function wo(e){try{this.a=e||r.a.auth()}catch(e){throw new ei("argument-error","Either an instance of firebase.auth.Auth must be passed as an argument to the firebase.auth.PhoneAuthProvider constructor, or the default firebase App instance must be initialized via firebase.initializeApp().")}qr(this,{providerId:"phone",isOAuthProvider:!1})}function Eo(e,t){if(!e)throw new ei("missing-verification-id");if(!t)throw new ei("missing-verification-code");return new mo({Va:e,Ua:t})}function So(e){if(e.temporaryProof&&e.phoneNumber)return new mo({Ha:e.temporaryProof,ba:e.phoneNumber});var t=e&&e.providerId;if(!t||"password"===t)return null;var n=e&&e.oauthAccessToken,r=e&&e.oauthTokenSecret,i=e&&e.nonce,o=e&&e.oauthIdToken,a=e&&e.pendingToken;try{switch(t){case"google.com":return co(o,n);case"facebook.com":return oo(n);case"github.com":return so(n);case"twitter.com":return fo(n,r);default:return n||r||o||a?a?0==t.indexOf("saml.")?new Yi(t,a):new Ji(t,{pendingToken:a,idToken:e.oauthIdToken,accessToken:e.oauthAccessToken},t):new ro(t).credential({idToken:o,accessToken:n,rawNonce:i}):null}}catch(e){return null}}function Co(e){if(!e.isOAuthProvider)throw new ei("invalid-oauth-provider")}function To(e,t,n,r,i,o,a){if(this.c=e,this.b=t||null,this.g=n||null,this.f=r||null,this.i=o||null,this.h=a||null,this.a=i||null,!this.g&&!this.a)throw new ei("invalid-auth-event");if(this.g&&this.a)throw new ei("invalid-auth-event");if(this.g&&!this.f)throw new ei("invalid-auth-event")}function ko(e){return(e=e||{}).type?new To(e.type,e.eventId,e.urlResponse,e.sessionId,e.error&&ti(e.error),e.postBody,e.tenantId):null}function xo(){this.b=null,this.a=[]}x(Vi,Wi),x(qi,Vi),x(Bi,Vi),x(Hi,Vi),x(zi,Vi),Yi.prototype.na=function(e){return es(e,$i(this))},Yi.prototype.b=function(e,t){var n=$i(this);return n.idToken=t,ts(e,n)},Yi.prototype.f=function(e,t){return Gi(ns(e,$i(this)),t)},Yi.prototype.A=function(){return{providerId:this.providerId,signInMethod:this.signInMethod,pendingToken:this.a}},Ji.prototype.na=function(e){return es(e,Zi(this))},Ji.prototype.b=function(e,t){var n=Zi(this);return n.idToken=t,ts(e,n)},Ji.prototype.f=function(e,t){return Gi(ns(e,Zi(this)),t)},Ji.prototype.A=function(){var e={providerId:this.providerId,signInMethod:this.signInMethod};return this.idToken&&(e.oauthIdToken=this.idToken),this.accessToken&&(e.oauthAccessToken=this.accessToken),this.secret&&(e.oauthTokenSecret=this.secret),this.nonce&&(e.nonce=this.nonce),this.a&&(e.pendingToken=this.a),e},to.prototype.Ga=function(e){return this.zb=$(e),this},x(no,to),x(ro,to),ro.prototype.ya=function(e){return B(this.a,e)||this.a.push(e),this},ro.prototype.Hb=function(){return K(this.a)},ro.prototype.credential=function(e,t){var n;if(!(n=b(e)?{idToken:e.idToken||null,accessToken:e.accessToken||null,nonce:e.rawNonce||null}:{idToken:e||null,accessToken:t||null}).idToken&&!n.accessToken)throw new ei("argument-error","credential failed: must provide the ID token and/or the access token.");return new Ji(this.providerId,n,this.providerId)},x(io,ro),Vr(io,"PROVIDER_ID","facebook.com"),Vr(io,"FACEBOOK_SIGN_IN_METHOD","facebook.com"),x(ao,ro),Vr(ao,"PROVIDER_ID","github.com"),Vr(ao,"GITHUB_SIGN_IN_METHOD","github.com"),x(uo,ro),Vr(uo,"PROVIDER_ID","google.com"),Vr(uo,"GOOGLE_SIGN_IN_METHOD","google.com"),x(lo,to),Vr(lo,"PROVIDER_ID","twitter.com"),Vr(lo,"TWITTER_SIGN_IN_METHOD","twitter.com"),ho.prototype.na=function(e){return this.signInMethod==vo.EMAIL_LINK_SIGN_IN_METHOD?Ns(e,ls,{email:this.a,oobCode:this.c}):Ns(e,xs,{email:this.a,password:this.c})},ho.prototype.b=function(e,t){return this.signInMethod==vo.EMAIL_LINK_SIGN_IN_METHOD?Ns(e,fs,{idToken:t,email:this.a,oobCode:this.c}):Ns(e,ws,{idToken:t,email:this.a,password:this.c})},ho.prototype.f=function(e,t){return Gi(this.na(e),t)},ho.prototype.A=function(){return{email:this.a,password:this.c,signInMethod:this.signInMethod}},qr(vo,{PROVIDER_ID:"password"}),qr(vo,{EMAIL_LINK_SIGN_IN_METHOD:"emailLink"}),qr(vo,{EMAIL_PASSWORD_SIGN_IN_METHOD:"password"}),mo.prototype.na=function(e){return e.Wa(_o(this))},mo.prototype.b=function(e,t){var n=_o(this);return n.idToken=t,Ns(e,Ps,n)},mo.prototype.f=function(e,t){var n=_o(this);return n.operation="REAUTH",Gi(e=Ns(e,Os,n),t)},mo.prototype.A=function(){var e={providerId:"phone"};return this.a.Va&&(e.verificationId=this.a.Va),this.a.Ua&&(e.verificationCode=this.a.Ua),this.a.Ha&&(e.temporaryProof=this.a.Ha),this.a.ba&&(e.phoneNumber=this.a.ba),e},wo.prototype.Wa=function(e,t){var n=this.a.b;return Ze(t.verify()).then((function(r){if(!c(r))throw new ei("argument-error","An implementation of firebase.auth.ApplicationVerifier.prototype.verify() must return a firebase.Promise that resolves with a string.");switch(t.type){case"recaptcha":return function(e,t){return Ns(e,bs,t)}(n,{phoneNumber:e,recaptchaToken:r}).then((function(e){return"function"==typeof t.reset&&t.reset(),e}),(function(e){throw"function"==typeof t.reset&&t.reset(),e}));default:throw new ei("argument-error",'Only firebase.auth.ApplicationVerifiers with type="recaptcha" are currently supported.')}}))},qr(wo,{PROVIDER_ID:"phone"}),qr(wo,{PHONE_SIGN_IN_METHOD:"phone"}),To.prototype.getUid=function(){var e=[];return e.push(this.c),this.b&&e.push(this.b),this.f&&e.push(this.f),this.h&&e.push(this.h),e.join("-")},To.prototype.R=function(){return this.h},To.prototype.A=function(){return{type:this.c,eventId:this.b,urlResponse:this.g,sessionId:this.f,postBody:this.i,tenantId:this.h,error:this.a&&this.a.A()}};var Io,Po=null;function Oo(e){var t="unauthorized-domain",n=void 0,r=kn(e);e=r.b,"chrome-extension"==(r=r.f)?n=je("This chrome extension ID (chrome-extension://%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):"http"==r||"https"==r?n=je("This domain (%s) is not authorized to run this operation. Add it to the OAuth redirect domains list in the Firebase console -> Auth section -> Sign in method tab.",e):t="operation-not-supported-in-this-environment",ei.call(this,t,n)}function No(e,t,n){ei.call(this,e,n),(e=t||{}).Ab&&Vr(this,"email",e.Ab),e.ba&&Vr(this,"phoneNumber",e.ba),e.credential&&Vr(this,"credential",e.credential),e.Qb&&Vr(this,"tenantId",e.Qb)}function Ao(e){if(e.code){var t=e.code||"";0==t.indexOf(ni)&&(t=t.substring(ni.length));var n={credential:So(e),Qb:e.tenantId};if(e.email)n.Ab=e.email;else if(e.phoneNumber)n.ba=e.phoneNumber;else if(!n.credential)return new ei(t,e.message||void 0);return new No(t,n,e.message)}return null}function Ro(){}function Do(e){return e.c||(e.c=e.b())}function Mo(){}function Lo(e){if(!e.f&&"undefined"==typeof XMLHttpRequest&&"undefined"!=typeof ActiveXObject){for(var t=["MSXML2.XMLHTTP.6.0","MSXML2.XMLHTTP.3.0","MSXML2.XMLHTTP","Microsoft.XMLHTTP"],n=0;n<t.length;n++){var r=t[n];try{return new ActiveXObject(r),e.f=r}catch(e){}}throw Error("Could not create ActiveXObject. ActiveX might be disabled, or MSXML might not be installed")}return e.f}function Fo(){}function jo(){this.a=new XDomainRequest,this.readyState=0,this.onreadystatechange=null,this.responseType=this.responseText=this.response="",this.status=-1,this.statusText="",this.a.onload=C(this.fc,this),this.a.onerror=C(this.Ib,this),this.a.onprogress=C(this.gc,this),this.a.ontimeout=C(this.kc,this)}function Uo(e,t){e.readyState=t,e.onreadystatechange&&e.onreadystatechange()}function Wo(e,t,n){this.reset(e,t,n,void 0,void 0)}x(Oo,ei),x(No,ei),No.prototype.A=function(){var e={code:this.code,message:this.message};this.email&&(e.email=this.email),this.phoneNumber&&(e.phoneNumber=this.phoneNumber),this.tenantId&&(e.tenantId=this.tenantId);var t=this.credential&&this.credential.A();return t&&J(e,t),e},No.prototype.toJSON=function(){return this.A()},Ro.prototype.c=null,x(Mo,Ro),Mo.prototype.a=function(){var e=Lo(this);return e?new ActiveXObject(e):new XMLHttpRequest},Mo.prototype.b=function(){var e={};return Lo(this)&&(e[0]=!0,e[1]=!0),e},Io=new Mo,x(Fo,Ro),Fo.prototype.a=function(){var e=new XMLHttpRequest;if("withCredentials"in e)return e;if("undefined"!=typeof XDomainRequest)return new jo;throw Error("Unsupported browser")},Fo.prototype.b=function(){return{}},(t=jo.prototype).open=function(e,t,n){if(null!=n&&!n)throw Error("Only async requests are supported.");this.a.open(e,t)},t.send=function(e){if(e){if("string"!=typeof e)throw Error("Only string data is supported");this.a.send(e)}else this.a.send()},t.abort=function(){this.a.abort()},t.setRequestHeader=function(){},t.getResponseHeader=function(e){return"content-type"==e.toLowerCase()?this.a.contentType:""},t.fc=function(){this.status=200,this.response=this.responseText=this.a.responseText,Uo(this,4)},t.Ib=function(){this.status=500,this.response=this.responseText="",Uo(this,4)},t.kc=function(){this.Ib()},t.gc=function(){this.status=200,Uo(this,1)},t.getAllResponseHeaders=function(){return"content-type: "+this.a.contentType},Wo.prototype.a=null;function Vo(e){this.f=e,this.b=this.c=this.a=null}function qo(e,t){this.name=e,this.value=t}Wo.prototype.reset=function(e,t,n,r,i){"number"==typeof i||0,r||k(),delete this.a},qo.prototype.toString=function(){return this.name};var Bo=new qo("SEVERE",1e3),Ho=new qo("WARNING",900),zo=new qo("CONFIG",700),Qo=new qo("FINE",500);Vo.prototype.log=function(e,t,n){if(e.value>=function e(t){return t.c?t.c:t.a?e(t.a):(N("Root logger has no level set."),null)}(this).value)for(m(t)&&(t=t()),e=new Wo(e,String(t),this.f),n&&(e.a=n),n=this;n;)n=n.a};var Ko={},Go=null;function Yo(e){var t;if(Go||(Go=new Vo(""),Ko[""]=Go,Go.c=zo),!(t=Ko[e])){t=new Vo(e);var n=e.lastIndexOf("."),r=e.substr(n+1);(n=Yo(e.substr(0,n))).b||(n.b={}),n.b[r]=t,t.a=n,Ko[e]=t}return t}function $o(e,t){e&&e.log(Qo,t,void 0)}function Xo(e){this.f=e}function Jo(e){un.call(this),this.o=e,this.readyState=Zo,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.i=new Headers,this.b=null,this.m="GET",this.g="",this.a=!1,this.h=Yo("goog.net.FetchXmlHttp"),this.l=this.c=this.f=null}x(Xo,Ro),Xo.prototype.a=function(){return new Jo(this.f)},Xo.prototype.b=function(e){return function(){return e}}({}),x(Jo,un);var Zo=0;function ea(e){e.c.read().then(e.ec.bind(e)).catch(e.Oa.bind(e))}function ta(e,t){t&&e.f&&(e.status=e.f.status,e.statusText=e.f.statusText),e.readyState=4,e.f=null,e.c=null,e.l=null,na(e)}function na(e){e.onreadystatechange&&e.onreadystatechange.call(e)}function ra(e){un.call(this),this.headers=new yn,this.B=e||null,this.c=!1,this.w=this.a=null,this.h=this.O=this.l="",this.f=this.J=this.i=this.I=!1,this.g=0,this.o=null,this.m=ia,this.v=this.P=!1}(t=Jo.prototype).open=function(e,t){if(this.readyState!=Zo)throw this.abort(),Error("Error reopening a connection");this.m=e,this.g=t,this.readyState=1,na(this)},t.send=function(e){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.a=!0;var t={headers:this.i,method:this.m,credentials:void 0,cache:void 0};e&&(t.body=e),this.o.fetch(new Request(this.g,t)).then(this.jc.bind(this),this.Oa.bind(this))},t.abort=function(){this.response=this.responseText="",this.i=new Headers,this.status=0,this.c&&this.c.cancel("Request was aborted."),1<=this.readyState&&this.a&&4!=this.readyState&&(this.a=!1,ta(this,!1)),this.readyState=Zo},t.jc=function(e){this.a&&(this.f=e,this.b||(this.b=e.headers,this.readyState=2,na(this)),this.a&&(this.readyState=3,na(this),this.a&&("arraybuffer"===this.responseType?e.arrayBuffer().then(this.hc.bind(this),this.Oa.bind(this)):void 0!==u.ReadableStream&&"body"in e?(this.response=this.responseText="",this.c=e.body.getReader(),this.l=new TextDecoder,ea(this)):e.text().then(this.ic.bind(this),this.Oa.bind(this)))))},t.ec=function(e){if(this.a){var t=this.l.decode(e.value?e.value:new Uint8Array(0),{stream:!e.done});t&&(this.response=this.responseText+=t),e.done?ta(this,!0):na(this),3==this.readyState&&ea(this)}},t.ic=function(e){this.a&&(this.response=this.responseText=e,ta(this,!0))},t.hc=function(e){this.a&&(this.response=e,ta(this,!0))},t.Oa=function(e){var t=this.h;t&&t.log(Ho,"Failed to fetch url "+this.g,e instanceof Error?e:Error(e)),this.a&&ta(this,!0)},t.setRequestHeader=function(e,t){this.i.append(e,t)},t.getResponseHeader=function(e){return this.b?this.b.get(e.toLowerCase())||"":((e=this.h)&&e.log(Ho,"Attempting to get response header but no headers have been received for url: "+this.g,void 0),"")},t.getAllResponseHeaders=function(){if(!this.b){var e=this.h;return e&&e.log(Ho,"Attempting to get all response headers but no headers have been received for url: "+this.g,void 0),""}e=[];for(var t=this.b.entries(),n=t.next();!n.done;)n=n.value,e.push(n[0]+": "+n[1]),n=t.next();return e.join("\r\n")},x(ra,un);var ia="";ra.prototype.b=Yo("goog.net.XhrIo");var oa=/^https?$/i,aa=["POST","PUT"];function sa(e,t,n,r,i){if(e.a)throw Error("[goog.net.XhrIo] Object is active with another request="+e.l+"; newUri="+t);n=n?n.toUpperCase():"GET",e.l=t,e.h="",e.O=n,e.I=!1,e.c=!0,e.a=e.B?e.B.a():Io.a(),e.w=e.B?Do(e.B):Do(Io),e.a.onreadystatechange=C(e.Lb,e);try{$o(e.b,ya(e,"Opening Xhr")),e.J=!0,e.a.open(n,String(t),!0),e.J=!1}catch(t){return $o(e.b,ya(e,"Error opening Xhr: "+t.message)),void ca(e,t)}t=r||"";var o=new yn(e.headers);i&&function(e,t){if(e.forEach&&"function"==typeof e.forEach)e.forEach(t,void 0);else if(g(e)||c(e))W(e,t,void 0);else for(var n=vn(e),r=dn(e),i=r.length,o=0;o<i;o++)t.call(void 0,r[o],n&&n[o],e)}(i,(function(e,t){o.set(t,e)})),i=function(e){e:{for(var t=ua,n=e.length,r=c(e)?e.split(""):e,i=0;i<n;i++)if(i in r&&t.call(void 0,r[i],i,e)){t=i;break e}t=-1}return 0>t?null:c(e)?e.charAt(t):e[t]}(o.X()),r=u.FormData&&t instanceof u.FormData,!B(aa,n)||i||r||o.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),o.forEach((function(e,t){this.a.setRequestHeader(t,e)}),e),e.m&&(e.a.responseType=e.m),"withCredentials"in e.a&&e.a.withCredentials!==e.P&&(e.a.withCredentials=e.P);try{pa(e),0<e.g&&(e.v=function(e){return wt&&At(9)&&"number"==typeof e.timeout&&void 0!==e.ontimeout}(e.a),$o(e.b,ya(e,"Will abort after "+e.g+"ms if incomplete, xhr2 "+e.v)),e.v?(e.a.timeout=e.g,e.a.ontimeout=C(e.Ia,e)):e.o=hn(e.Ia,e.g,e)),$o(e.b,ya(e,"Sending request")),e.i=!0,e.a.send(t),e.i=!1}catch(t){$o(e.b,ya(e,"Send error: "+t.message)),ca(e,t)}}function ua(e){return"content-type"==e.toLowerCase()}function ca(e,t){e.c=!1,e.a&&(e.f=!0,e.a.abort(),e.f=!1),e.h=t,la(e),ha(e)}function la(e){e.I||(e.I=!0,e.dispatchEvent("complete"),e.dispatchEvent("error"))}function fa(e){if(e.c&&void 0!==s)if(e.w[1]&&4==da(e)&&2==va(e))$o(e.b,ya(e,"Local request error detected and ignored"));else if(e.i&&4==da(e))hn(e.Lb,0,e);else if(e.dispatchEvent("readystatechange"),4==da(e)){$o(e.b,ya(e,"Request complete")),e.c=!1;try{var t,n=va(e);e:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break e;default:r=!1}if(!(t=r)){var i;if(i=0===n){var o=String(e.l).match(bn)[1]||null;if(!o&&u.self&&u.self.location){var a=u.self.location.protocol;o=a.substr(0,a.length-1)}i=!oa.test(o?o.toLowerCase():"")}t=i}if(t)e.dispatchEvent("complete"),e.dispatchEvent("success");else{try{var c=2<da(e)?e.a.statusText:""}catch(t){$o(e.b,"Can not get status: "+t.message),c=""}e.h=c+" ["+va(e)+"]",la(e)}}finally{ha(e)}}}function ha(e,t){if(e.a){pa(e);var n=e.a,r=e.w[0]?p:null;e.a=null,e.w=null,t||e.dispatchEvent("ready");try{n.onreadystatechange=r}catch(t){(e=e.b)&&e.log(Bo,"Problem encountered resetting onreadystatechange: "+t.message,void 0)}}}function pa(e){e.a&&e.v&&(e.a.ontimeout=null),e.o&&(u.clearTimeout(e.o),e.o=null)}function da(e){return e.a?e.a.readyState:0}function va(e){try{return 2<da(e)?e.a.status:-1}catch(e){return-1}}function ya(e,t){return t+" ["+e.O+" "+e.l+" "+va(e)+"]"}function ga(e){var t=Ia;this.g=[],this.v=t,this.o=e||null,this.f=this.a=!1,this.c=void 0,this.u=this.w=this.i=!1,this.h=0,this.b=null,this.l=0}function ma(e,t,n){e.a=!0,e.c=n,e.f=!t,Ea(e)}function ba(e){if(e.a){if(!e.u)throw new Sa(e);e.u=!1}}function _a(e,t,n,r){e.g.push([t,n,r]),e.a&&Ea(e)}function wa(e){return q(e.g,(function(e){return m(e[1])}))}function Ea(e){if(e.h&&e.a&&wa(e)){var t=e.h,n=ka[t];n&&(u.clearTimeout(n.a),delete ka[t]),e.h=0}e.b&&(e.b.l--,delete e.b),t=e.c;for(var r=n=!1;e.g.length&&!e.i;){var i=e.g.shift(),o=i[0],a=i[1];if(i=i[2],o=e.f?a:o)try{var s=o.call(i||e.o,t);void 0!==s&&(e.f=e.f&&(s==t||s instanceof Error),e.c=t=s),(I(t)||"function"==typeof u.Promise&&t instanceof u.Promise)&&(r=!0,e.i=!0)}catch(r){t=r,e.f=!0,wa(e)||(n=!0)}}e.c=t,r&&(s=C(e.m,e,!0),r=C(e.m,e,!1),t instanceof ga?(_a(t,s,r),t.w=!0):t.then(s,r)),n&&(t=new Ta(t),ka[t.a]=t,e.h=t.a)}function Sa(){P.call(this)}function Ca(){P.call(this)}function Ta(e){this.a=u.setTimeout(C(this.c,this),0),this.b=e}(t=ra.prototype).Ia=function(){void 0!==s&&this.a&&(this.h="Timed out after "+this.g+"ms, aborting",$o(this.b,ya(this,this.h)),this.dispatchEvent("timeout"),this.abort(8))},t.abort=function(){this.a&&this.c&&($o(this.b,ya(this,"Aborting")),this.c=!1,this.f=!0,this.a.abort(),this.f=!1,this.dispatchEvent("complete"),this.dispatchEvent("abort"),ha(this))},t.za=function(){this.a&&(this.c&&(this.c=!1,this.f=!0,this.a.abort(),this.f=!1),ha(this,!0)),ra.qb.za.call(this)},t.Lb=function(){this.va||(this.J||this.i||this.f?fa(this):this.yc())},t.yc=function(){fa(this)},t.getResponse=function(){try{if(!this.a)return null;if("response"in this.a)return this.a.response;switch(this.m){case ia:case"text":return this.a.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in this.a)return this.a.mozResponseArrayBuffer}var e=this.b;return e&&e.log(Bo,"Response type "+this.m+" is not supported on this browser",void 0),null}catch(e){return $o(this.b,"Can not get response: "+e.message),null}},ga.prototype.cancel=function(e){if(this.a)this.c instanceof ga&&this.c.cancel();else{if(this.b){var t=this.b;delete this.b,e?t.cancel(e):(t.l--,0>=t.l&&t.cancel())}this.v?this.v.call(this.o,this):this.u=!0,this.a||(e=new Ca(this),ba(this),ma(this,!1,e))}},ga.prototype.m=function(e,t){this.i=!1,ma(this,e,t)},ga.prototype.then=function(e,t,n){var r,i,o=new Qe((function(e,t){r=e,i=t}));return _a(this,r,(function(e){e instanceof Ca?o.cancel():i(e)})),o.then(e,t,n)},ga.prototype.$goog_Thenable=!0,x(Sa,P),Sa.prototype.message="Deferred has already fired",Sa.prototype.name="AlreadyCalledError",x(Ca,P),Ca.prototype.message="Deferred was canceled",Ca.prototype.name="CanceledError",Ta.prototype.c=function(){throw delete ka[this.a],this.b};var ka={};function xa(e){var t={},n=t.document||document,r=oe(e).toString(),i=document.createElement("SCRIPT"),o={Nb:i,Ia:void 0},a=new ga(o),s=null,c=null!=t.timeout?t.timeout:5e3;return 0<c&&(s=window.setTimeout((function(){Pa(i,!0);var e=new Aa(Na,"Timeout reached for loading script "+r);ba(a),ma(a,!1,e)}),c),o.Ia=s),i.onload=i.onreadystatechange=function(){i.readyState&&"loaded"!=i.readyState&&"complete"!=i.readyState||(Pa(i,t.hd||!1,s),ba(a),ma(a,!0,null))},i.onerror=function(){Pa(i,!0,s);var e=new Aa(Oa,"Error while loading script "+r);ba(a),ma(a,!1,e)},J(o=t.attributes||{},{type:"text/javascript",charset:"UTF-8"}),Qn(i,o),function(e,t){j(e,"HTMLScriptElement"),e.src=oe(t),null===h&&(h=(t=(t=u.document).querySelector&&t.querySelector("script[nonce]"))&&(t=t.nonce||t.getAttribute("nonce"))&&f.test(t)?t:""),(t=h)&&e.setAttribute("nonce",t)}(i,e),function(e){var t;return(t=(e||document).getElementsByTagName("HEAD"))&&0!=t.length?t[0]:e.documentElement}(n).appendChild(i),a}function Ia(){if(this&&this.Nb){var e=this.Nb;e&&"SCRIPT"==e.tagName&&Pa(e,!0,this.Ia)}}function Pa(e,t,n){null!=n&&u.clearTimeout(n),e.onload=p,e.onerror=p,e.onreadystatechange=p,t&&window.setTimeout((function(){e&&e.parentNode&&e.parentNode.removeChild(e)}),0)}var Oa=0,Na=1;function Aa(e,t){var n="Jsloader error (code #"+e+")";t&&(n+=": "+t),P.call(this,n),this.code=e}function Ra(e){this.f=e}function Da(e,t,n){if(this.c=e,e=t||{},this.l=e.secureTokenEndpoint||"https://securetoken.googleapis.com/v1/token",this.u=e.secureTokenTimeout||Fa,this.g=$(e.secureTokenHeaders||ja),this.h=e.firebaseEndpoint||"https://www.googleapis.com/identitytoolkit/v3/relyingparty/",this.i=e.firebaseTimeout||Ua,this.a=$(e.firebaseHeaders||Wa),n&&(this.a["X-Client-Version"]=n,this.g["X-Client-Version"]=n),n="Node"==pr(),!(n=u.XMLHttpRequest||n&&r.a.INTERNAL.node&&r.a.INTERNAL.node.XMLHttpRequest)&&!hr())throw new ei("internal-error","The XMLHttpRequest compatibility library was not found.");this.f=void 0,hr()?this.f=new Xo(self):dr()?this.f=new Ra(n):this.f=new Fo,this.b=null}x(Aa,P),x(Ra,Ro),Ra.prototype.a=function(){return new this.f},Ra.prototype.b=function(){return{}};var Ma,La="idToken",Fa=new Rr(3e4,6e4),ja={"Content-Type":"application/x-www-form-urlencoded"},Ua=new Rr(3e4,6e4),Wa={"Content-Type":"application/json"};function Va(e,t){t?e.a["X-Firebase-Locale"]=t:delete e.a["X-Firebase-Locale"]}function qa(e,t){t?(e.a["X-Client-Version"]=t,e.g["X-Client-Version"]=t):(delete e.a["X-Client-Version"],delete e.g["X-Client-Version"])}function Ba(e,t,n,r,i,o,a){(function(){var e=_r();return!((e=gr(e)!=yr?null:(e=e.match(/\sChrome\/(\d+)/i))&&2==e.length?parseInt(e[1],10):null)&&30>e)&&(!wt||!Ot||9<Ot)})()||hr()?e=C(e.o,e):(Ma||(Ma=new Qe((function(e,t){!function(e,t){if(((window.gapi||{}).client||{}).request)e();else{u[za]=function(){((window.gapi||{}).client||{}).request?e():t(Error("CORS_UNSUPPORTED"))},function(e,t){_a(e,null,t,void 0)}(xa(ae(Ha,{onload:za})),(function(){t(Error("CORS_UNSUPPORTED"))}))}}(e,t)}))),e=C(e.m,e)),e(t,n,r,i,o,a)}Da.prototype.R=function(){return this.b},Da.prototype.o=function(e,t,n,r,i,o){if(hr()&&(void 0===u.fetch||void 0===u.Headers||void 0===u.Request))throw new ei("operation-not-supported-in-this-environment","fetch, Headers and Request native APIs or equivalent Polyfills must be available to support HTTP requests from a Worker environment.");var a=new ra(this.f);if(o){a.g=Math.max(0,o);var s=setTimeout((function(){a.dispatchEvent("timeout")}),o)}cn(a,"complete",(function(){s&&clearTimeout(s);var e=null;try{e=JSON.parse(function(e){try{return e.a?e.a.responseText:""}catch(t){return $o(e.b,"Can not get responseText: "+t.message),""}}(this))||null}catch(t){e=null}t&&t(e)})),ln(a,"ready",(function(){s&&clearTimeout(s),yt(this)})),ln(a,"timeout",(function(){s&&clearTimeout(s),yt(this),t&&t(null)})),sa(a,e,n,r,i)};var Ha=new Z(ne,"https://apis.google.com/js/client.js?onload=%{onload}"),za="__fcb"+Math.floor(1e6*Math.random()).toString();function Qa(e){if(!c(e=e.email)||!ur.test(e))throw new ei("invalid-email")}function Ka(e){"email"in e&&Qa(e)}function Ga(e){if(!e[La])throw new ei("internal-error")}function Ya(e){if(e.phoneNumber||e.temporaryProof){if(!e.phoneNumber||!e.temporaryProof)throw new ei("internal-error")}else{if(!e.sessionInfo)throw new ei("missing-verification-id");if(!e.code)throw new ei("missing-verification-code")}}Da.prototype.m=function(e,t,n,r,i){var o=this;Ma.then((function(){window.gapi.client.setApiKey(o.c);var a=window.gapi.auth.getToken();window.gapi.auth.setToken(null),window.gapi.client.request({path:e,method:n,body:r,headers:i,authType:"none",callback:function(e){window.gapi.auth.setToken(a),t&&t(e)}})})).s((function(e){t&&t({error:{message:e&&e.message||"CORS_UNSUPPORTED"}})}))},Da.prototype.ob=function(){return Ns(this,Es,{})},Da.prototype.rb=function(e,t){return Ns(this,_s,{idToken:e,email:t})},Da.prototype.sb=function(e,t){return Ns(this,ws,{idToken:e,password:t})};var $a={displayName:"DISPLAY_NAME",photoUrl:"PHOTO_URL"};function Xa(e){if(!e.requestUri||!e.sessionId&&!e.postBody&&!e.pendingToken)throw new ei("internal-error")}function Ja(e,t){return t.oauthIdToken&&t.providerId&&0==t.providerId.indexOf("oidc.")&&!t.pendingToken&&(e.sessionId?t.nonce=e.sessionId:e.postBody&&(Wn(e=new Ln(e.postBody),"nonce")&&(t.nonce=e.get("nonce")))),t}function Za(e){var t=null;if(e.needConfirmation?(e.code="account-exists-with-different-credential",t=Ao(e)):"FEDERATED_USER_ID_ALREADY_LINKED"==e.errorMessage?(e.code="credential-already-in-use",t=Ao(e)):"EMAIL_EXISTS"==e.errorMessage?(e.code="email-already-in-use",t=Ao(e)):e.errorMessage&&(t=As(e.errorMessage)),t)throw t;if(!e[La])throw new ei("internal-error")}function es(e,t){return t.returnIdpCredential=!0,Ns(e,Ss,t)}function ts(e,t){return t.returnIdpCredential=!0,Ns(e,Ts,t)}function ns(e,t){return t.returnIdpCredential=!0,t.autoCreate=!1,Ns(e,Cs,t)}function rs(e){if(!e.oobCode)throw new ei("invalid-action-code")}(t=Da.prototype).tb=function(e,t){var n={idToken:e},r=[];return G($a,(function(e,i){var o=t[i];null===o?r.push(e):i in t&&(n[i]=o)})),r.length&&(n.deleteAttribute=r),Ns(this,_s,n)},t.kb=function(e,t){return J(e={requestType:"PASSWORD_RESET",email:e},t),Ns(this,vs,e)},t.lb=function(e,t){return J(e={requestType:"EMAIL_SIGNIN",email:e},t),Ns(this,ps,e)},t.jb=function(e,t){return J(e={requestType:"VERIFY_EMAIL",idToken:e},t),Ns(this,ds,e)},t.Wa=function(e){return Ns(this,Is,e)},t.ab=function(e,t){return Ns(this,ms,{oobCode:e,newPassword:t})},t.Ma=function(e){return Ns(this,os,{oobCode:e})},t.Ya=function(e){return Ns(this,is,{oobCode:e})};var is={endpoint:"setAccountInfo",D:rs,fa:"email",F:!0},os={endpoint:"resetPassword",D:rs,K:function(e){var t=e.requestType;if(!t||!e.email&&"EMAIL_SIGNIN"!=t)throw new ei("internal-error")},F:!0},as={endpoint:"signupNewUser",D:function(e){if(Qa(e),!e.password)throw new ei("weak-password")},K:Ga,T:!0,F:!0},ss={endpoint:"createAuthUri",F:!0},us={endpoint:"deleteAccount",V:["idToken"]},cs={endpoint:"setAccountInfo",V:["idToken","deleteProvider"],D:function(e){if(!y(e.deleteProvider))throw new ei("internal-error")}},ls={endpoint:"emailLinkSignin",V:["email","oobCode"],D:Qa,K:Ga,T:!0,F:!0},fs={endpoint:"emailLinkSignin",V:["idToken","email","oobCode"],D:Qa,K:Ga,T:!0},hs={endpoint:"getAccountInfo"},ps={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(e){if("EMAIL_SIGNIN"!=e.requestType)throw new ei("internal-error");Qa(e)},fa:"email",F:!0},ds={endpoint:"getOobConfirmationCode",V:["idToken","requestType"],D:function(e){if("VERIFY_EMAIL"!=e.requestType)throw new ei("internal-error")},fa:"email",F:!0},vs={endpoint:"getOobConfirmationCode",V:["requestType"],D:function(e){if("PASSWORD_RESET"!=e.requestType)throw new ei("internal-error");Qa(e)},fa:"email",F:!0},ys={wb:!0,endpoint:"getProjectConfig",Kb:"GET"},gs={wb:!0,endpoint:"getRecaptchaParam",Kb:"GET",K:function(e){if(!e.recaptchaSiteKey)throw new ei("internal-error")}},ms={endpoint:"resetPassword",D:rs,fa:"email",F:!0},bs={endpoint:"sendVerificationCode",V:["phoneNumber","recaptchaToken"],fa:"sessionInfo",F:!0},_s={endpoint:"setAccountInfo",V:["idToken"],D:Ka,T:!0},ws={endpoint:"setAccountInfo",V:["idToken"],D:function(e){if(Ka(e),!e.password)throw new ei("weak-password")},K:Ga,T:!0},Es={endpoint:"signupNewUser",K:Ga,T:!0,F:!0},Ss={endpoint:"verifyAssertion",D:Xa,Ra:Ja,K:Za,T:!0,F:!0},Cs={endpoint:"verifyAssertion",D:Xa,Ra:Ja,K:function(e){if(e.errorMessage&&"USER_NOT_FOUND"==e.errorMessage)throw new ei("user-not-found");if(e.errorMessage)throw As(e.errorMessage);if(!e[La])throw new ei("internal-error")},T:!0,F:!0},Ts={endpoint:"verifyAssertion",D:function(e){if(Xa(e),!e.idToken)throw new ei("internal-error")},Ra:Ja,K:Za,T:!0},ks={endpoint:"verifyCustomToken",D:function(e){if(!e.token)throw new ei("invalid-custom-token")},K:Ga,T:!0,F:!0},xs={endpoint:"verifyPassword",D:function(e){if(Qa(e),!e.password)throw new ei("wrong-password")},K:Ga,T:!0,F:!0},Is={endpoint:"verifyPhoneNumber",D:Ya,K:Ga,F:!0},Ps={endpoint:"verifyPhoneNumber",D:function(e){if(!e.idToken)throw new ei("internal-error");Ya(e)},K:function(e){if(e.temporaryProof)throw e.code="credential-already-in-use",Ao(e);Ga(e)}},Os={Yb:{USER_NOT_FOUND:"user-not-found"},endpoint:"verifyPhoneNumber",D:Ya,K:Ga,F:!0};function Ns(e,t,n){if(!function(e,t){if(!t||!t.length)return!0;if(!e)return!1;for(var n=0;n<t.length;n++){var r=e[t[n]];if(null==r||""===r)return!1}return!0}(n,t.V))return et(new ei("internal-error"));var r,i=t.Kb||"POST";return Ze(n).then(t.D).then((function(){return t.T&&(n.returnSecureToken=!0),t.F&&e.b&&void 0===n.tenantId&&(n.tenantId=e.b),function(e,t,n,r,i,o){var a=kn(e.h+t);Cn(a,"key",e.c),o&&Cn(a,"cb",k().toString());var s="GET"==n;if(s)for(var u in r)r.hasOwnProperty(u)&&Cn(a,u,r[u]);return new Qe((function(t,o){Ba(e,a.toString(),(function(e){e?e.error?o(Rs(e,i||{})):t(e):o(new ei("network-request-failed"))}),n,s?void 0:$n(Ir(r)),e.a,e.i.get())}))}(e,t.endpoint,i,n,t.Yb,t.wb||!1)})).then((function(e){return r=e,t.Ra?t.Ra(n,r):r})).then(t.K).then((function(){if(!t.fa)return r;if(!(t.fa in r))throw new ei("internal-error");return r[t.fa]}))}function As(e){return Rs({error:{errors:[{message:e}],code:400,message:e}})}function Rs(e,t){var n=(e.error&&e.error.errors&&e.error.errors[0]||{}).reason||"",r={keyInvalid:"invalid-api-key",ipRefererBlocked:"app-not-authorized"};if(n=r[n]?new ei(r[n]):null)return n;for(var i in n=e.error&&e.error.message||"",J(r={INVALID_CUSTOM_TOKEN:"invalid-custom-token",CREDENTIAL_MISMATCH:"custom-token-mismatch",MISSING_CUSTOM_TOKEN:"internal-error",INVALID_IDENTIFIER:"invalid-email",MISSING_CONTINUE_URI:"internal-error",INVALID_EMAIL:"invalid-email",INVALID_PASSWORD:"wrong-password",USER_DISABLED:"user-disabled",MISSING_PASSWORD:"internal-error",EMAIL_EXISTS:"email-already-in-use",PASSWORD_LOGIN_DISABLED:"operation-not-allowed",INVALID_IDP_RESPONSE:"invalid-credential",INVALID_PENDING_TOKEN:"invalid-credential",FEDERATED_USER_ID_ALREADY_LINKED:"credential-already-in-use",MISSING_OR_INVALID_NONCE:"missing-or-invalid-nonce",INVALID_MESSAGE_PAYLOAD:"invalid-message-payload",INVALID_RECIPIENT_EMAIL:"invalid-recipient-email",INVALID_SENDER:"invalid-sender",EMAIL_NOT_FOUND:"user-not-found",RESET_PASSWORD_EXCEED_LIMIT:"too-many-requests",EXPIRED_OOB_CODE:"expired-action-code",INVALID_OOB_CODE:"invalid-action-code",MISSING_OOB_CODE:"internal-error",INVALID_PROVIDER_ID:"invalid-provider-id",CREDENTIAL_TOO_OLD_LOGIN_AGAIN:"requires-recent-login",INVALID_ID_TOKEN:"invalid-user-token",TOKEN_EXPIRED:"user-token-expired",USER_NOT_FOUND:"user-token-expired",CORS_UNSUPPORTED:"cors-unsupported",DYNAMIC_LINK_NOT_ACTIVATED:"dynamic-link-not-activated",INVALID_APP_ID:"invalid-app-id",TOO_MANY_ATTEMPTS_TRY_LATER:"too-many-requests",WEAK_PASSWORD:"weak-password",OPERATION_NOT_ALLOWED:"operation-not-allowed",USER_CANCELLED:"user-cancelled",CAPTCHA_CHECK_FAILED:"captcha-check-failed",INVALID_APP_CREDENTIAL:"invalid-app-credential",INVALID_CODE:"invalid-verification-code",INVALID_PHONE_NUMBER:"invalid-phone-number",INVALID_SESSION_INFO:"invalid-verification-id",INVALID_TEMPORARY_PROOF:"invalid-credential",MISSING_APP_CREDENTIAL:"missing-app-credential",MISSING_CODE:"missing-verification-code",MISSING_PHONE_NUMBER:"missing-phone-number",MISSING_SESSION_INFO:"missing-verification-id",QUOTA_EXCEEDED:"quota-exceeded",SESSION_EXPIRED:"code-expired",REJECTED_CREDENTIAL:"rejected-credential",INVALID_CONTINUE_URI:"invalid-continue-uri",MISSING_ANDROID_PACKAGE_NAME:"missing-android-pkg-name",MISSING_IOS_BUNDLE_ID:"missing-ios-bundle-id",UNAUTHORIZED_DOMAIN:"unauthorized-continue-uri",INVALID_DYNAMIC_LINK_DOMAIN:"invalid-dynamic-link-domain",INVALID_OAUTH_CLIENT_ID:"invalid-oauth-client-id",INVALID_CERT_HASH:"invalid-cert-hash",UNSUPPORTED_TENANT_OPERATION:"unsupported-tenant-operation",INVALID_TENANT_ID:"invalid-tenant-id",TENANT_ID_MISMATCH:"tenant-id-mismatch",ADMIN_ONLY_OPERATION:"admin-restricted-operation"},t||{}),t=(t=n.match(/^[^\s]+\s*:\s*([\s\S]*)$/))&&1<t.length?t[1]:void 0,r)if(0===n.indexOf(i))return new ei(r[i],t);return!t&&e&&(t=xr(e)),new ei("internal-error",t)}function Ds(e){this.b=e,this.a=null,this.gb=function(e){return(js||(js=new Qe((function(e,t){function n(){Ar(),wr("gapi.load")("gapi.iframes",{callback:e,ontimeout:function(){Ar(),t(Error("Network Error"))},timeout:Ls.get()})}if(wr("gapi.iframes.Iframe"))e();else if(wr("gapi.load"))n();else{var r="__iframefcb"+Math.floor(1e6*Math.random()).toString();u[r]=function(){wr("gapi.load")?n():t(Error("Network Error"))},Ze(xa(r=ae(Ms,{onload:r}))).s((function(){t(Error("Network Error"))}))}})).s((function(e){throw js=null,e})))).then((function(){return new Qe((function(t,n){wr("gapi.iframes.getContext")().open({where:document.body,url:e.b,messageHandlersFilter:wr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"),attributes:{style:{position:"absolute",top:"-100px",width:"1px",height:"1px"}},dontclear:!0},(function(r){function i(){clearTimeout(o),t()}e.a=r,e.a.restyle({setHideOnLeave:!1});var o=setTimeout((function(){n(Error("Network Error"))}),Fs.get());r.ping(i).then(i,(function(){n(Error("Network Error"))}))}))}))}))}(this)}var Ms=new Z(ne,"https://apis.google.com/js/api.js?onload=%{onload}"),Ls=new Rr(3e4,6e4),Fs=new Rr(5e3,15e3),js=null;function Us(e,t,n){this.i=e,this.g=t,this.h=n,this.f=null,this.a=xn(this.i,"/__/auth/iframe"),Cn(this.a,"apiKey",this.g),Cn(this.a,"appName",this.h),this.b=null,this.c=[]}function Ws(e,t,n,r,i){this.o=e,this.m=t,this.c=n,this.u=r,this.i=this.g=this.l=null,this.a=i,this.h=this.f=null}function Vs(e){try{return r.a.app(e).auth().Ca()}catch(e){return[]}}function qs(e,t,n,r,i){this.u=e,this.f=t,this.b=n,this.c=r||null,this.h=i||null,this.m=this.o=this.v=null,this.g=[],this.l=this.a=null}function Bs(e){var t=nr();return function(e){return Ns(e,ys,{}).then((function(e){return e.authorizedDomains||[]}))}(e).then((function(e){e:{var n=kn(t),r=n.f;n=n.b;for(var i=0;i<e.length;i++){var o=e[i],a=n,s=r;if(0==o.indexOf("chrome-extension://")?a=kn(o).b==a&&"chrome-extension"==s:"http"!=s&&"https"!=s?a=!1:sr.test(o)?a=a==o:(o=o.split(".").join("\\."),a=new RegExp("^(.+\\."+o+"|"+o+")$","i").test(a)),a){e=!0;break e}}e=!1}if(!e)throw new Oo(nr())}))}function Hs(e){return e.l?e.l:(e.l=cr().then((function(){if(!e.o){var t=e.c,n=e.h,r=Vs(e.b),i=new Us(e.u,e.f,e.b);i.f=t,i.b=n,i.c=K(r||[]),e.o=i.toString()}e.i=new Ds(e.o),function(e){if(!e.i)throw Error("IfcHandler must be initialized!");!function(e,t){e.gb.then((function(){e.a.register("authEvent",t,wr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}(e.i,(function(t){var n={};if(t&&t.authEvent){var r=!1;for(t=ko(t.authEvent),n=0;n<e.g.length;n++)r=e.g[n](t)||r;return(n={}).status=r?"ACK":"ERROR",Ze(n)}return n.status="ERROR",Ze(n)}))}(e)})),e.l)}function zs(e){return e.m||(e.v=e.c?br(e.c,Vs(e.b)):null,e.m=new Da(e.f,Ai(e.h),e.v)),e.m}function Qs(e,t,n,r,i,o,a,s,u,c,l){return(e=new Ws(e,t,n,r,i)).l=o,e.g=a,e.i=s,e.b=$(u||null),e.f=c,e.nb(l).toString()}function Ks(e){if(this.a=e||r.a.INTERNAL.reactNative&&r.a.INTERNAL.reactNative.AsyncStorage,!this.a)throw new ei("internal-error","The React Native compatibility library was not found.");this.type="asyncStorage"}function Gs(e){this.b=e,this.a={},this.f=C(this.c,this)}Us.prototype.toString=function(){return this.f?Cn(this.a,"v",this.f):Un(this.a.a,"v"),this.b?Cn(this.a,"eid",this.b):Un(this.a.a,"eid"),this.c.length?Cn(this.a,"fw",this.c.join(",")):Un(this.a.a,"fw"),this.a.toString()},Ws.prototype.nb=function(e){return this.h=e,this},Ws.prototype.toString=function(){var e=xn(this.o,"/__/auth/handler");if(Cn(e,"apiKey",this.m),Cn(e,"appName",this.c),Cn(e,"authType",this.u),this.a.isOAuthProvider){var t=this.a;try{var n=r.a.app(this.c).auth().ha()}catch(e){n=null}for(var i in t.bb=n,Cn(e,"providerId",this.a.providerId),n=Ir((t=this.a).zb))n[i]=n[i].toString();i=t.Fc,n=$(n);for(var o=0;o<i.length;o++){var a=i[o];a in n&&delete n[a]}t.eb&&t.bb&&!n[t.eb]&&(n[t.eb]=t.bb),Y(n)||Cn(e,"customParameters",xr(n))}if("function"==typeof this.a.Hb&&((t=this.a.Hb()).length&&Cn(e,"scopes",t.join(","))),this.l?Cn(e,"redirectUrl",this.l):Un(e.a,"redirectUrl"),this.g?Cn(e,"eventId",this.g):Un(e.a,"eventId"),this.i?Cn(e,"v",this.i):Un(e.a,"v"),this.b)for(var s in this.b)this.b.hasOwnProperty(s)&&!Tn(e,s)&&Cn(e,s,this.b[s]);return this.h?Cn(e,"tid",this.h):Un(e.a,"tid"),this.f?Cn(e,"eid",this.f):Un(e.a,"eid"),(s=Vs(this.c)).length&&Cn(e,"fw",s.join(",")),e.toString()},(t=qs.prototype).Fb=function(e,t,n){var r=new ei("popup-closed-by-user"),i=new ei("web-storage-unsupported"),o=this,a=!1;return this.ia().then((function(){(function(e){var t={type:"webStorageSupport"};return Hs(e).then((function(){return function(e,t){return e.gb.then((function(){return new Qe((function(n){e.a.send(t.type,t,n,wr("gapi.iframes.CROSS_ORIGIN_IFRAMES_FILTER"))}))}))}(e.i,t)})).then((function(e){if(e&&e.length&&void 0!==e[0].webStorageSupport)return e[0].webStorageSupport;throw Error()}))})(o).then((function(n){n||(e&&or(e),t(i),a=!0)}))})).s((function(){})).then((function(){if(!a)return function(e){return new Qe((function(t){return function n(){pn(2e3).then((function(){if(e&&!e.closed)return n();t()}))}()}))}(e)})).then((function(){if(!a)return pn(n).then((function(){t(r)}))}))},t.Ob=function(){var e=_r();return!kr(e)&&!Nr(e)},t.Jb=function(){return!1},t.Db=function(e,t,n,r,i,o,a,s){if(!e)return et(new ei("popup-blocked"));if(a&&!kr())return this.ia().s((function(t){or(e),i(t)})),r(),Ze();this.a||(this.a=Bs(zs(this)));var u=this;return this.a.then((function(){var t=u.ia().s((function(t){throw or(e),i(t),t}));return r(),t})).then((function(){(Co(n),a)||rr(Qs(u.u,u.f,u.b,t,n,null,o,u.c,void 0,u.h,s),e)})).s((function(e){throw"auth/network-request-failed"==e.code&&(u.a=null),e}))},t.Eb=function(e,t,n,r){this.a||(this.a=Bs(zs(this)));var i=this;return this.a.then((function(){Co(t),rr(Qs(i.u,i.f,i.b,e,t,nr(),n,i.c,void 0,i.h,r))})).s((function(e){throw"auth/network-request-failed"==e.code&&(i.a=null),e}))},t.ia=function(){var e=this;return Hs(this).then((function(){return e.i.gb})).s((function(){throw e.a=null,new ei("network-request-failed")}))},t.Rb=function(){return!0},t.Aa=function(e){this.g.push(e)},t.Na=function(e){z(this.g,(function(t){return t==e}))},(t=Ks.prototype).get=function(e){return Ze(this.a.getItem(e)).then((function(e){return e&&Pr(e)}))},t.set=function(e,t){return Ze(this.a.setItem(e,xr(t)))},t.S=function(e){return Ze(this.a.removeItem(e))},t.$=function(){},t.ea=function(){};var Ys,$s=[];function Xs(e,t,n){Y(e.a)&&e.b.addEventListener("message",e.f),void 0===e.a[t]&&(e.a[t]=[]),e.a[t].push(n)}function Js(e){this.a=e}function Zs(e){this.c=e,this.b=!1,this.a=[]}function eu(e,t,n,r){var i,o,a,s,u=n||{},c=null;if(e.b)return et(Error("connection_unavailable"));var l=r?800:50,f="undefined"!=typeof MessageChannel?new MessageChannel:null;return new Qe((function(n,r){f?(i=Math.floor(Math.random()*Math.pow(10,20)).toString(),f.port1.start(),a=setTimeout((function(){r(Error("unsupported_event"))}),l),c={messageChannel:f,onMessage:o=function(e){e.data.eventId===i&&("ack"===e.data.status?(clearTimeout(a),s=setTimeout((function(){r(Error("timeout"))}),3e3)):"done"===e.data.status?(clearTimeout(s),void 0!==e.data.response?n(e.data.response):r(Error("unknown_error"))):(clearTimeout(a),clearTimeout(s),r(Error("invalid_response"))))}},e.a.push(c),f.port1.addEventListener("message",o),e.c.postMessage({eventType:t,eventId:i,data:u},[f.port2])):r(Error("connection_unavailable"))})).then((function(t){return tu(e,c),t})).s((function(t){throw tu(e,c),t}))}function tu(e,t){if(t){var n=t.messageChannel,r=t.onMessage;n&&(n.port1.removeEventListener("message",r),n.port1.close()),z(e.a,(function(e){return e==t}))}}function nu(){if(!ou())throw new ei("web-storage-unsupported");this.c={},this.a=[],this.b=0,this.u=u.indexedDB,this.type="indexedDB",this.g=this.l=this.f=this.i=null,this.o=!1,this.h=null;var e=this;hr()&&self?(this.l=function(){var e=hr()?self:null;if(W($s,(function(n){n.b==e&&(t=n)})),!t){var t=new Gs(e);$s.push(t)}return t}(),Xs(this.l,"keyChanged",(function(t,n){return lu(e).then((function(t){return 0<t.length&&W(e.a,(function(e){e(t)})),{keyProcessed:B(t,n.key)}}))})),Xs(this.l,"ping",(function(){return Ze(["keyChanged"])}))):function(){var e=u.navigator;return e&&e.serviceWorker?Ze().then((function(){return e.serviceWorker.ready})).then((function(e){return e.active||null})).s((function(){return null})):Ze(null)}().then((function(t){(e.h=t)&&(e.g=new Zs(new Js(t)),eu(e.g,"ping",null,!0).then((function(t){t[0].fulfilled&&B(t[0].value,"keyChanged")&&(e.o=!0)})).s((function(){})))}))}function ru(e){return new Qe((function(t,n){var r=e.u.open("firebaseLocalStorageDb",1);r.onerror=function(e){try{e.preventDefault()}catch(e){}n(Error(e.target.error))},r.onupgradeneeded=function(e){e=e.target.result;try{e.createObjectStore("firebaseLocalStorage",{keyPath:"fbase_key"})}catch(e){n(e)}},r.onsuccess=function(r){(r=r.target.result).objectStoreNames.contains("firebaseLocalStorage")?t(r):function(e){return new Qe((function(t,n){var r=e.u.deleteDatabase("firebaseLocalStorageDb");r.onsuccess=function(){t()},r.onerror=function(e){n(Error(e.target.error))}}))}(e).then((function(){return ru(e)})).then((function(e){t(e)})).s((function(e){n(e)}))}}))}function iu(e){return e.m||(e.m=ru(e)),e.m}function ou(){try{return!!u.indexedDB}catch(e){return!1}}function au(e){return e.objectStore("firebaseLocalStorage")}function su(e,t){return e.transaction(["firebaseLocalStorage"],t?"readwrite":"readonly")}function uu(e){return new Qe((function(t,n){e.onsuccess=function(e){e&&e.target?t(e.target.result):t()},e.onerror=function(e){n(e.target.error)}}))}function cu(e,t){return e.g&&e.h&&function(){var e=u.navigator;return e&&e.serviceWorker&&e.serviceWorker.controller||null}()===e.h?eu(e.g,"keyChanged",{key:t},e.o).then((function(){})).s((function(){})):Ze()}function lu(e){return iu(e).then((function(e){var t=au(su(e,!1));return t.getAll?uu(t.getAll()):new Qe((function(e,n){var r=[],i=t.openCursor();i.onsuccess=function(t){(t=t.target.result)?(r.push(t.value),t.continue()):e(r)},i.onerror=function(e){n(e.target.error)}}))})).then((function(t){var n={},r=[];if(0==e.b){for(r=0;r<t.length;r++)n[t[r].fbase_key]=t[r].value;r=function e(t,n){var r,i=[];for(r in t)r in n?typeof t[r]!=typeof n[r]?i.push(r):"object"==typeof t[r]&&null!=t[r]&&null!=n[r]?0<e(t[r],n[r]).length&&i.push(r):t[r]!==n[r]&&i.push(r):i.push(r);for(r in n)r in t||i.push(r);return i}(e.c,n),e.c=n}return r}))}function fu(e){e.i&&e.i.cancel("STOP_EVENT"),e.f&&(clearTimeout(e.f),e.f=null)}function hu(e){var t=this,n=null;this.a=[],this.type="indexedDB",this.c=e,this.b=Ze().then((function(){if(ou()){var e=Or(),r="__sak"+e;return Ys||(Ys=new nu),(n=Ys).set(r,e).then((function(){return n.get(r)})).then((function(t){if(t!==e)throw Error("indexedDB not supported!");return n.S(r)})).then((function(){return n})).s((function(){return t.c}))}return t.c})).then((function(e){return t.type=e.type,e.$((function(e){W(t.a,(function(t){t(e)}))})),e}))}function pu(){this.a={},this.type="inMemory"}function du(){if(!function(){var e="Node"==pr();if(!(e=vu()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.localStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==pr())throw new ei("internal-error","The LocalStorage compatibility library was not found.");throw new ei("web-storage-unsupported")}this.a=vu()||r.a.INTERNAL.node.localStorage,this.type="localStorage"}function vu(){try{var e=u.localStorage,t=Or();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function yu(){this.type="nullStorage"}function gu(){if(!function(){var e="Node"==pr();if(!(e=mu()||e&&r.a.INTERNAL.node&&r.a.INTERNAL.node.sessionStorage))return!1;try{return e.setItem("__sak","1"),e.removeItem("__sak"),!0}catch(e){return!1}}()){if("Node"==pr())throw new ei("internal-error","The SessionStorage compatibility library was not found.");throw new ei("web-storage-unsupported")}this.a=mu()||r.a.INTERNAL.node.sessionStorage,this.type="sessionStorage"}function mu(){try{var e=u.sessionStorage,t=Or();return e&&(e.setItem(t,"1"),e.removeItem(t)),e}catch(e){return null}}function bu(){var e={};e.Browser=Eu,e.Node=Su,e.ReactNative=Cu,e.Worker=Tu,this.a=e[pr()]}Gs.prototype.c=function(e){var t=e.data.eventType,n=e.data.eventId,r=this.a[t];if(r&&0<r.length){e.ports[0].postMessage({status:"ack",eventId:n,eventType:t,response:null});var i=[];W(r,(function(t){i.push(Ze().then((function(){return t(e.origin,e.data.data)})))})),nt(i).then((function(r){var i=[];W(r,(function(e){i.push({fulfilled:e.Gb,value:e.value,reason:e.reason?e.reason.message:void 0})})),W(i,(function(e){for(var t in e)void 0===e[t]&&delete e[t]})),e.ports[0].postMessage({status:"done",eventId:n,eventType:t,response:i})}))}},Js.prototype.postMessage=function(e,t){this.a.postMessage(e,t)},Zs.prototype.close=function(){for(;0<this.a.length;)tu(this,this.a[0]);this.b=!0},(t=nu.prototype).set=function(e,t){var n,r=!1,i=this;return iu(this).then((function(t){return uu((t=au(su(n=t,!0))).get(e))})).then((function(o){var a=au(su(n,!0));return o?(o.value=t,uu(a.put(o))):(i.b++,r=!0,(o={}).fbase_key=e,o.value=t,uu(a.add(o)))})).then((function(){return i.c[e]=t,cu(i,e)})).ka((function(){r&&i.b--}))},t.get=function(e){return iu(this).then((function(t){return uu(au(su(t,!1)).get(e))})).then((function(e){return e&&e.value}))},t.S=function(e){var t=!1,n=this;return iu(this).then((function(r){return t=!0,n.b++,uu(au(su(r,!0)).delete(e))})).then((function(){return delete n.c[e],cu(n,e)})).ka((function(){t&&n.b--}))},t.$=function(e){0==this.a.length&&function(e){fu(e),function t(){e.f=setTimeout((function(){e.i=lu(e).then((function(t){0<t.length&&W(e.a,(function(e){e(t)}))})).then((function(){t()})).s((function(e){"STOP_EVENT"!=e.message&&t()}))}),800)}()}(this),this.a.push(e)},t.ea=function(e){z(this.a,(function(t){return t==e})),0==this.a.length&&fu(this)},(t=hu.prototype).get=function(e){return this.b.then((function(t){return t.get(e)}))},t.set=function(e,t){return this.b.then((function(n){return n.set(e,t)}))},t.S=function(e){return this.b.then((function(t){return t.S(e)}))},t.$=function(e){this.a.push(e)},t.ea=function(e){z(this.a,(function(t){return t==e}))},(t=pu.prototype).get=function(e){return Ze(this.a[e])},t.set=function(e,t){return this.a[e]=t,Ze()},t.S=function(e){return delete this.a[e],Ze()},t.$=function(){},t.ea=function(){},(t=du.prototype).get=function(e){var t=this;return Ze().then((function(){return Pr(t.a.getItem(e))}))},t.set=function(e,t){var n=this;return Ze().then((function(){var r=xr(t);null===r?n.S(e):n.a.setItem(e,r)}))},t.S=function(e){var t=this;return Ze().then((function(){t.a.removeItem(e)}))},t.$=function(e){u.window&&Yt(u.window,"storage",e)},t.ea=function(e){u.window&&Jt(u.window,"storage",e)},(t=yu.prototype).get=function(){return Ze(null)},t.set=function(){return Ze()},t.S=function(){return Ze()},t.$=function(){},t.ea=function(){},(t=gu.prototype).get=function(e){var t=this;return Ze().then((function(){return Pr(t.a.getItem(e))}))},t.set=function(e,t){var n=this;return Ze().then((function(){var r=xr(t);null===r?n.S(e):n.a.setItem(e,r)}))},t.S=function(e){var t=this;return Ze().then((function(){t.a.removeItem(e)}))},t.$=function(){},t.ea=function(){};var _u,wu,Eu={C:du,Ta:gu},Su={C:du,Ta:gu},Cu={C:Ks,Ta:yu},Tu={C:du,Ta:yu},ku={ad:"local",NONE:"none",cd:"session"};function xu(){var e=!(Nr(_r())||!fr()),t=kr(),n=Er();this.m=e,this.h=t,this.l=n,this.a={},_u||(_u=new bu),e=_u;try{this.g=!tr()&&Lr()||!u.indexedDB?new e.a.C:new hu(hr()?new pu:new e.a.C)}catch(e){this.g=new pu,this.h=!0}try{this.i=new e.a.Ta}catch(e){this.i=new pu}this.u=new pu,this.f=C(this.Pb,this),this.b={}}function Iu(){return wu||(wu=new xu),wu}function Pu(e,t){switch(t){case"session":return e.i;case"none":return e.u;default:return e.g}}function Ou(e,t){return"firebase:"+e.name+(t?":"+t:"")}function Nu(e,t,n){return n=Ou(t,n),"local"==t.C&&(e.b[n]=null),Pu(e,t.C).S(n)}function Au(e){e.c&&(clearInterval(e.c),e.c=null)}function Ru(e){this.a=e,this.b=Iu()}(t=xu.prototype).get=function(e,t){return Pu(this,e.C).get(Ou(e,t))},t.set=function(e,t,n){var r=Ou(e,n),i=this,o=Pu(this,e.C);return o.set(r,t).then((function(){return o.get(r)})).then((function(t){"local"==e.C&&(i.b[r]=t)}))},t.addListener=function(e,t,n){e=Ou(e,t),this.l&&(this.b[e]=u.localStorage.getItem(e)),Y(this.a)&&(Pu(this,"local").$(this.f),this.h||(tr()||!Lr())&&u.indexedDB||!this.l||function(e){Au(e),e.c=setInterval((function(){for(var t in e.a){var n=u.localStorage.getItem(t),r=e.b[t];n!=r&&(e.b[t]=n,n=new jt({type:"storage",key:t,target:window,oldValue:r,newValue:n,a:!0}),e.Pb(n))}}),1e3)}(this)),this.a[e]||(this.a[e]=[]),this.a[e].push(n)},t.removeListener=function(e,t,n){e=Ou(e,t),this.a[e]&&(z(this.a[e],(function(e){return e==n})),0==this.a[e].length&&delete this.a[e]),Y(this.a)&&(Pu(this,"local").ea(this.f),Au(this))},t.Pb=function(e){if(e&&e.f){var t=e.a.key;if(null==t)for(var n in this.a){var r=this.b[n];void 0===r&&(r=null);var i=u.localStorage.getItem(n);i!==r&&(this.b[n]=i,this.$a(n))}else if(0==t.indexOf("firebase:")&&this.a[t]){if(void 0!==e.a.a?Pu(this,"local").ea(this.f):Au(this),this.m)if(n=u.localStorage.getItem(t),(r=e.a.newValue)!==n)null!==r?u.localStorage.setItem(t,r):u.localStorage.removeItem(t);else if(this.b[t]===r&&void 0===e.a.a)return;var o=this;n=function(){void 0===e.a.a&&o.b[t]===u.localStorage.getItem(t)||(o.b[t]=u.localStorage.getItem(t),o.$a(t))},wt&&Ot&&10==Ot&&u.localStorage.getItem(t)!==e.a.newValue&&e.a.newValue!==e.a.oldValue?setTimeout(n,10):n()}}else W(e,C(this.$a,this))},t.$a=function(e){this.a[e]&&W(this.a[e],(function(e){e()}))};var Du,Mu={name:"authEvent",C:"local"};function Lu(){this.a=Iu()}function Fu(e,t){this.b=ju,this.f=u.Uint8Array?new Uint8Array(this.b):Array(this.b),this.g=this.c=0,this.a=[],this.i=e,this.h=t,this.l=u.Int32Array?new Int32Array(64):Array(64),void 0!==Du||(Du=u.Int32Array?new Int32Array(zu):zu),this.reset()}x(Fu,(function(){this.b=-1}));for(var ju=64,Uu=ju-1,Wu=[],Vu=0;Vu<Uu;Vu++)Wu[Vu]=0;var qu=Q(128,Wu);function Bu(e){for(var t=e.f,n=e.l,r=0,i=0;i<t.length;)n[r++]=t[i]<<24|t[i+1]<<16|t[i+2]<<8|t[i+3],i=4*r;for(t=16;64>t;t++){i=0|n[t-15],r=0|n[t-2];var o=(0|n[t-16])+((i>>>7|i<<25)^(i>>>18|i<<14)^i>>>3)|0,a=(0|n[t-7])+((r>>>17|r<<15)^(r>>>19|r<<13)^r>>>10)|0;n[t]=o+a|0}r=0|e.a[0],i=0|e.a[1];var s=0|e.a[2],u=0|e.a[3],c=0|e.a[4],l=0|e.a[5],f=0|e.a[6];for(o=0|e.a[7],t=0;64>t;t++){var h=((r>>>2|r<<30)^(r>>>13|r<<19)^(r>>>22|r<<10))+(r&i^r&s^i&s)|0;a=(o=o+((c>>>6|c<<26)^(c>>>11|c<<21)^(c>>>25|c<<7))|0)+((a=(a=c&l^~c&f)+(0|Du[t])|0)+(0|n[t])|0)|0,o=f,f=l,l=c,c=u+a|0,u=s,s=i,i=r,r=a+h|0}e.a[0]=e.a[0]+r|0,e.a[1]=e.a[1]+i|0,e.a[2]=e.a[2]+s|0,e.a[3]=e.a[3]+u|0,e.a[4]=e.a[4]+c|0,e.a[5]=e.a[5]+l|0,e.a[6]=e.a[6]+f|0,e.a[7]=e.a[7]+o|0}function Hu(e,t,n){void 0===n&&(n=t.length);var r=0,i=e.c;if(c(t))for(;r<n;)e.f[i++]=t.charCodeAt(r++),i==e.b&&(Bu(e),i=0);else{if(!g(t))throw Error("message must be string or array");for(;r<n;){var o=t[r++];if(!("number"==typeof o&&0<=o&&255>=o&&o==(0|o)))throw Error("message must be a byte array");e.f[i++]=o,i==e.b&&(Bu(e),i=0)}}e.c=i,e.g+=n}Fu.prototype.reset=function(){this.g=this.c=0,this.a=u.Int32Array?new Int32Array(this.h):K(this.h)};var zu=[1116352408,1899447441,3049323471,3921009573,961987163,1508970993,2453635748,2870763221,3624381080,310598401,607225278,1426881987,1925078388,2162078206,2614888103,3248222580,3835390401,4022224774,264347078,604807628,770255983,1249150122,1555081692,1996064986,2554220882,2821834349,2952996808,3210313671,3336571891,3584528711,113926993,338241895,666307205,773529912,1294757372,1396182291,1695183700,1986661051,2177026350,2456956037,2730485921,2820302411,3259730800,3345764771,3516065817,3600352804,4094571909,275423344,430227734,506948616,659060556,883997877,958139571,1322822218,1537002063,1747873779,1955562222,2024104815,2227730452,2361852424,2428436474,2756734187,3204031479,3329325298];function Qu(){Fu.call(this,8,Ku)}x(Qu,Fu);var Ku=[1779033703,3144134277,1013904242,2773480762,1359893119,2600822924,528734635,1541459225];function Gu(e,t,n,r,i){this.u=e,this.i=t,this.l=n,this.m=r||null,this.o=i||null,this.h=t+":"+n,this.v=new Lu,this.g=new Ru(this.h),this.f=null,this.b=[],this.a=this.c=null}function Yu(e){return new ei("invalid-cordova-configuration",e)}function $u(e){var t=new Qu;Hu(t,e),e=[];var n=8*t.g;56>t.c?Hu(t,qu,56-t.c):Hu(t,qu,t.b-(t.c-56));for(var r=63;56<=r;r--)t.f[r]=255&n,n/=256;for(Bu(t),r=n=0;r<t.i;r++)for(var i=24;0<=i;i-=8)e[n++]=t.a[r]>>i&255;return function(e){return V(e,(function(e){return 1<(e=e.toString(16)).length?e:"0"+e})).join("")}(e)}function Xu(e,t){for(var n=0;n<e.b.length;n++)try{e.b[n](t)}catch(e){}}function Ju(e){return e.f||(e.f=e.ia().then((function(){return new Qe((function(t){e.Aa((function n(r){return t(r),e.Na(n),!1})),function(e){function t(t){r=!0,i&&i.cancel(),Zu(e).then((function(r){var i=n;if(r&&t&&t.url){var o=null;-1!=(i=Qi(t.url)).indexOf("/__/auth/callback")&&(o=(o="object"==typeof(o=Pr(Tn(o=kn(i),"firebaseError")||null))?ti(o):null)?new To(r.c,r.b,null,null,o,null,r.R()):new To(r.c,r.b,i,r.f,null,null,r.R())),i=o||n}Xu(e,i)}))}var n=new To("unknown",null,null,null,new ei("no-auth-event")),r=!1,i=pn(500).then((function(){return Zu(e).then((function(){r||Xu(e,n)}))})),o=u.handleOpenURL;u.handleOpenURL=function(e){if(0==e.toLowerCase().indexOf(wr("BuildInfo.packageName",u).toLowerCase()+"://")&&t({url:e}),"function"==typeof o)try{o(e)}catch(e){console.error(e)}},Po||(Po=new xo),function(e){var t=Po;t.a.push(e),t.b||(t.b=function(e){for(var n=0;n<t.a.length;n++)t.a[n](e)},"function"==typeof(e=wr("universalLinks.subscribe",u))&&e(null,t.b))}(t)}(e)}))}))),e.f}function Zu(e){var t=null;return function(e){return e.b.get(Mu,e.a).then((function(e){return ko(e)}))}(e.g).then((function(n){return t=n,Nu((n=e.g).b,Mu,n.a)})).then((function(){return t}))}function ec(e){this.a=e,this.b=Iu()}(t=Gu.prototype).ia=function(){return this.Da?this.Da:this.Da=(lr(void 0)?cr().then((function(){return new Qe((function(e,t){var n=u.document,r=setTimeout((function(){t(Error("Cordova framework is not ready."))}),1e3);n.addEventListener("deviceready",(function(){clearTimeout(r),e()}),!1)}))})):et(Error("Cordova must run in an Android or iOS file scheme."))).then((function(){if("function"!=typeof wr("universalLinks.subscribe",u))throw Yu("cordova-universal-links-plugin-fix is not installed");if(void 0===wr("BuildInfo.packageName",u))throw Yu("cordova-plugin-buildinfo is not installed");if("function"!=typeof wr("cordova.plugins.browsertab.openUrl",u))throw Yu("cordova-plugin-browsertab is not installed");if("function"!=typeof wr("cordova.InAppBrowser.open",u))throw Yu("cordova-plugin-inappbrowser is not installed")}),(function(){throw new ei("cordova-not-ready")}))},t.Fb=function(e,t){return t(new ei("operation-not-supported-in-this-environment")),Ze()},t.Db=function(){return et(new ei("operation-not-supported-in-this-environment"))},t.Rb=function(){return!1},t.Ob=function(){return!0},t.Jb=function(){return!0},t.Eb=function(e,t,n,r){if(this.c)return et(new ei("redirect-operation-pending"));var i=this,o=u.document,a=null,s=null,c=null,l=null;return this.c=Ze().then((function(){return Co(t),Ju(i)})).then((function(){return function(e,t,n,r,i){var o=function(){for(var e=20,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}(),a=new To(t,r,null,o,new ei("no-auth-event"),null,i),s=wr("BuildInfo.packageName",u);if("string"!=typeof s)throw new ei("invalid-cordova-configuration");var c=wr("BuildInfo.displayName",u),l={};if(_r().toLowerCase().match(/iphone|ipad|ipod/))l.ibi=s;else{if(!_r().toLowerCase().match(/android/))return et(new ei("operation-not-supported-in-this-environment"));l.apn=s}c&&(l.appDisplayName=c),o=$u(o),l.sessionId=o;var f=Qs(e.u,e.i,e.l,t,n,null,r,e.m,l,e.o,i);return e.ia().then((function(){var t=e.h;return e.v.a.set(Mu,a.A(),t)})).then((function(){var t=wr("cordova.plugins.browsertab.isAvailable",u);if("function"!=typeof t)throw new ei("invalid-cordova-configuration");var n=null;t((function(t){if(t){if("function"!=typeof(n=wr("cordova.plugins.browsertab.openUrl",u)))throw new ei("invalid-cordova-configuration");n(f)}else{if("function"!=typeof(n=wr("cordova.InAppBrowser.open",u)))throw new ei("invalid-cordova-configuration");t=_r(),e.a=n(f,t.match(/(iPad|iPhone|iPod).*OS 7_\d/i)||t.match(/(iPad|iPhone|iPod).*OS 8_\d/i)?"_blank":"_system","location=yes")}}))}))}(i,e,t,n,r)})).then((function(){return new Qe((function(e,t){s=function(){var t=wr("cordova.plugins.browsertab.close",u);return e(),"function"==typeof t&&t(),i.a&&"function"==typeof i.a.close&&(i.a.close(),i.a=null),!1},i.Aa(s),c=function(){a||(a=pn(2e3).then((function(){t(new ei("redirect-cancelled-by-user"))})))},l=function(){Dr()&&c()},o.addEventListener("resume",c,!1),_r().toLowerCase().match(/android/)||o.addEventListener("visibilitychange",l,!1)})).s((function(e){return Zu(i).then((function(){throw e}))}))})).ka((function(){c&&o.removeEventListener("resume",c,!1),l&&o.removeEventListener("visibilitychange",l,!1),a&&a.cancel(),s&&i.Na(s),i.c=null}))},t.Aa=function(e){this.b.push(e),Ju(this).s((function(t){"auth/invalid-cordova-configuration"===t.code&&(t=new To("unknown",null,null,null,new ei("no-auth-event")),e(t))}))},t.Na=function(e){z(this.b,(function(t){return t==e}))};var tc={name:"pendingRedirect",C:"session"};function nc(e){return Nu(e.b,tc,e.a)}function rc(e,t,n){this.i={},this.v=0,this.B=e,this.u=t,this.m=n,this.h=[],this.f=!1,this.l=C(this.o,this),this.b=new gc,this.w=new Ec,this.g=new ec(this.u+":"+this.m),this.c={},this.c.unknown=this.b,this.c.signInViaRedirect=this.b,this.c.linkViaRedirect=this.b,this.c.reauthViaRedirect=this.b,this.c.signInViaPopup=this.w,this.c.linkViaPopup=this.w,this.c.reauthViaPopup=this.w,this.a=ic(this.B,this.u,this.m,Oi)}function ic(e,t,n,i){var o=r.a.SDK_VERSION||null;return lr()?new Gu(e,t,n,o,i):new qs(e,t,n,o,i)}function oc(e){e.f||(e.f=!0,e.a.Aa(e.l));var t=e.a;return e.a.ia().s((function(n){throw e.a==t&&e.reset(),n}))}function ac(e){e.a.Ob()&&oc(e).s((function(t){var n=new To("unknown",null,null,null,new ei("operation-not-supported-in-this-environment"));hc(t)&&e.o(n)})),e.a.Jb()||mc(e.b)}function sc(e,t){B(e.h,t)||e.h.push(t),e.f||function(e){return e.b.get(tc,e.a).then((function(e){return"pending"==e}))}(e.g).then((function(t){t?nc(e.g).then((function(){oc(e).s((function(t){var n=new To("unknown",null,null,null,new ei("operation-not-supported-in-this-environment"));hc(t)&&e.o(n)}))})):ac(e)})).s((function(){ac(e)}))}function uc(e,t){z(e.h,(function(e){return e==t}))}rc.prototype.reset=function(){this.f=!1,this.a.Na(this.l),this.a=ic(this.B,this.u,this.m),this.i={}},rc.prototype.o=function(e){if(!e)throw new ei("invalid-auth-event");if(6e5<=k()-this.v&&(this.i={},this.v=0),e&&e.getUid()&&this.i.hasOwnProperty(e.getUid()))return!1;for(var t=!1,n=0;n<this.h.length;n++){var r=this.h[n];if(r.xb(e.c,e.b)){(t=this.c[e.c])&&(t.h(e,r),e&&(e.f||e.b)&&(this.i[e.getUid()]=!0,this.v=k())),t=!0;break}}return mc(this.b),t};var cc=new Rr(2e3,1e4),lc=new Rr(3e4,6e4);function fc(e,t,n,r,i,o,a){return e.a.Db(t,n,r,(function(){e.f||(e.f=!0,e.a.Aa(e.l))}),(function(){e.reset()}),i,o,a)}function hc(e){return!(!e||"auth/cordova-not-ready"!=e.code)}function pc(e,t,n,r,i){var o;return function(e){return e.b.set(tc,"pending",e.a)}(e.g).then((function(){return e.a.Eb(t,n,r,i).s((function(t){if(hc(t))throw new ei("operation-not-supported-in-this-environment");return o=t,nc(e.g).then((function(){throw o}))})).then((function(){return e.a.Rb()?new Qe((function(){})):nc(e.g).then((function(){return e.oa()})).then((function(){})).s((function(){}))}))}))}function dc(e,t,n,r,i){return e.a.Fb(r,(function(e){t.ja(n,null,e,i)}),cc.get())}rc.prototype.oa=function(){return this.b.oa()};var vc={};function yc(e,t,n){var r=t+":"+n;return vc[r]||(vc[r]=new rc(e,t,n)),vc[r]}function gc(){this.b=null,this.f=[],this.c=[],this.a=null,this.i=this.g=!1}function mc(e){e.g||(e.g=!0,wc(e,!1,null,null))}function bc(e){e.g&&!e.i&&wc(e,!1,null,null)}function _c(e,t){if(e.b=function(){return Ze(t)},e.f.length)for(var n=0;n<e.f.length;n++)e.f[n](t)}function wc(e,t,n,r){t?r?function(e,t){if(e.b=function(){return et(t)},e.c.length)for(var n=0;n<e.c.length;n++)e.c[n](t)}(e,r):_c(e,n):_c(e,{user:null}),e.f=[],e.c=[]}function Ec(){}function Sc(){this.vb=!1,Object.defineProperty(this,"appVerificationDisabled",{get:function(){return this.vb},set:function(e){this.vb=e},enumerable:!1})}function Cc(e,t){this.a=t,Vr(this,"verificationId",e)}function Tc(e,t,n,r){return new wo(e).Wa(t,n).then((function(e){return new Cc(e,r)}))}function kc(e){var t=Pi(e);if(!(t&&t.exp&&t.auth_time&&t.iat))throw new ei("internal-error","An internal error occurred. The token obtained by Firebase appears to be malformed. Please retry the operation.");qr(this,{token:e,expirationTime:Mr(1e3*t.exp),authTime:Mr(1e3*t.auth_time),issuedAtTime:Mr(1e3*t.iat),signInProvider:t.firebase&&t.firebase.sign_in_provider?t.firebase.sign_in_provider:null,claims:t})}function xc(e,t,n){if(this.h=e,this.i=t,this.g=n,this.c=3e4,this.f=96e4,this.b=null,this.a=this.c,this.f<this.c)throw Error("Proactive refresh lower bound greater than upper bound!")}function Ic(e){this.f=e,this.b=this.a=null,this.c=0}function Pc(e,t){var n=t[La],r=t.refreshToken;t=Oc(t.expiresIn),e.b=n,e.c=t,e.a=r}function Oc(e){return k()+1e3*parseInt(e,10)}function Nc(e,t){return function(e,t){return new Qe((function(n,r){"refresh_token"==t.grant_type&&t.refresh_token||"authorization_code"==t.grant_type&&t.code?Ba(e,e.l+"?key="+encodeURIComponent(e.c),(function(e){e?e.error?r(Rs(e)):e.access_token&&e.refresh_token?n(e):r(new ei("internal-error")):r(new ei("network-request-failed"))}),"POST",jn(t).toString(),e.g,e.u.get()):r(new ei("internal-error"))}))}(e.f,t).then((function(t){return e.b=t.access_token,e.c=Oc(t.expires_in),e.a=t.refresh_token,{accessToken:e.b,expirationTime:e.c,refreshToken:e.a}})).s((function(t){throw"auth/user-token-expired"==t.code&&(e.a=null),t}))}function Ac(e,t){this.a=e||null,this.b=t||null,qr(this,{lastSignInTime:Mr(t||null),creationTime:Mr(e||null)})}function Rc(e,t,n,r,i,o){qr(this,{uid:e,displayName:r||null,photoURL:i||null,email:n||null,phoneNumber:o||null,providerId:t})}function Dc(e,t){for(var n in Ft.call(this,e),t)this[n]=t[n]}function Mc(e,t,n){this.I=[],this.l=e.apiKey,this.m=e.appName,this.o=e.authDomain||null,e=r.a.SDK_VERSION?br(r.a.SDK_VERSION):null,this.a=new Da(this.l,Ai(Oi),e),this.b=new Ic(this.a),qc(this,t[La]),Pc(this.b,t),Vr(this,"refreshToken",this.b.a),zc(this,n||{}),un.call(this),this.J=!1,this.o&&Sr()&&(this.i=yc(this.o,this.l,this.m)),this.O=[],this.h=null,this.w=function(e){return new xc((function(){return e.G(!0)}),(function(e){return!(!e||"auth/network-request-failed"!=e.code)}),(function(){var t=e.b.c-k()-3e5;return 0<t?t:0}))}(this),this.W=C(this.Ja,this);var i=this;this.ga=null,this.xa=function(e){i.ua(e.g)},this.Z=null,this.P=[],this.wa=function(e){Fc(i,e.c)},this.Y=null}function Lc(e,t){e.Z&&Jt(e.Z,"languageCodeChanged",e.xa),(e.Z=t)&&Yt(t,"languageCodeChanged",e.xa)}function Fc(e,t){e.P=t,qa(e.a,r.a.SDK_VERSION?br(r.a.SDK_VERSION,e.P):null)}function jc(e,t){e.Y&&Jt(e.Y,"frameworkChanged",e.wa),(e.Y=t)&&Yt(t,"frameworkChanged",e.wa)}function Uc(e){try{return r.a.app(e.m).auth()}catch(t){throw new ei("internal-error","No firebase.auth.Auth instance is available for the Firebase App '"+e.m+"'!")}}function Wc(e){e.B||e.w.b||(e.w.start(),Jt(e,"tokenChanged",e.W),Yt(e,"tokenChanged",e.W))}function Vc(e){Jt(e,"tokenChanged",e.W),e.w.stop()}function qc(e,t){e.ma=t,Vr(e,"_lat",t)}function Bc(e){for(var t=[],n=0;n<e.O.length;n++)t.push(e.O[n](e));return nt(t).then((function(){return e}))}function Hc(e){e.i&&!e.J&&(e.J=!0,sc(e.i,e))}function zc(e,t){qr(e,{uid:t.uid,displayName:t.displayName||null,photoURL:t.photoURL||null,email:t.email||null,emailVerified:t.emailVerified||!1,phoneNumber:t.phoneNumber||null,isAnonymous:t.isAnonymous||!1,tenantId:t.tenantId||null,metadata:new Ac(t.createdAt,t.lastLoginAt),providerData:[]}),e.a.b=e.tenantId}function Qc(){}function Kc(e){return Ze().then((function(){if(e.B)throw new ei("app-deleted")}))}function Gc(e){return V(e.providerData,(function(e){return e.providerId}))}function Yc(e,t){t&&($c(e,t.providerId),e.providerData.push(t))}function $c(e,t){z(e.providerData,(function(e){return e.providerId==t}))}function Xc(e,t,n){("uid"!=t||n)&&e.hasOwnProperty(t)&&Vr(e,t,n)}function Jc(e,t){e!=t&&(qr(e,{uid:t.uid,displayName:t.displayName,photoURL:t.photoURL,email:t.email,emailVerified:t.emailVerified,phoneNumber:t.phoneNumber,isAnonymous:t.isAnonymous,tenantId:t.tenantId,providerData:[]}),t.metadata?Vr(e,"metadata",function(e){return new Ac(e.a,e.b)}(t.metadata)):Vr(e,"metadata",new Ac),W(t.providerData,(function(t){Yc(e,t)})),function(e,t){e.b=t.b,e.a=t.a,e.c=t.c}(e.b,t.b),Vr(e,"refreshToken",e.b.a))}function Zc(e){return e.G().then((function(t){var n=e.isAnonymous;return function(e,t){return Ns(e.a,hs,{idToken:t}).then(C(e.zc,e))}(e,t).then((function(){return n||Xc(e,"isAnonymous",!1),t}))}))}function el(e,t){t[La]&&e.ma!=t[La]&&(Pc(e.b,t),e.dispatchEvent(new Dc("tokenChanged")),qc(e,t[La]),Xc(e,"refreshToken",e.b.a))}function tl(e,t){return Zc(e).then((function(){if(B(Gc(e),t))return Bc(e).then((function(){throw new ei("provider-already-linked")}))}))}function nl(e,t,n){return Br({user:e,credential:So(t),additionalUserInfo:t=Fi(t),operationType:n})}function rl(e,t){return el(e,t),e.reload().then((function(){return e}))}function il(e,t,n,i,o){if(!Sr())return et(new ei("operation-not-supported-in-this-environment"));if(e.h&&!o)return et(e.h);var a=Li(n.providerId),s=Or(e.uid+":::"),u=null;(!kr()||fr())&&e.o&&n.isOAuthProvider&&(u=Qs(e.o,e.l,e.m,t,n,null,s,r.a.SDK_VERSION||null,null,null,e.tenantId));var c=ar(u,a&&a.sa,a&&a.ra);return i=i().then((function(){if(al(e),!o)return e.G().then((function(){}))})).then((function(){return fc(e.i,c,t,n,s,!!u,e.tenantId)})).then((function(){return new Qe((function(n,r){e.ja(t,null,new ei("cancelled-popup-request"),e.g||null),e.f=n,e.v=r,e.g=s,e.c=dc(e.i,e,t,c,s)}))})).then((function(e){return c&&or(c),e?Br(e):null})).s((function(e){throw c&&or(c),e})),sl(e,i,o)}function ol(e,t,n,r,i){if(!Sr())return et(new ei("operation-not-supported-in-this-environment"));if(e.h&&!i)return et(e.h);var o=null,a=Or(e.uid+":::");return r=r().then((function(){if(al(e),!i)return e.G().then((function(){}))})).then((function(){return e.ca=a,Bc(e)})).then((function(t){return e.da&&(t=(t=e.da).b.set(ll,e.A(),t.a)),t})).then((function(){return pc(e.i,t,n,a,e.tenantId)})).s((function(t){if(o=t,e.da)return fl(e.da);throw o})).then((function(){if(o)throw o})),sl(e,r,i)}function al(e){if(!e.i||!e.J){if(e.i&&!e.J)throw new ei("internal-error");throw new ei("auth-domain-config-required")}}function sl(e,t,n){var r=function(e,t,n){return e.h&&!n?(t.cancel(),et(e.h)):t.s((function(t){throw!t||"auth/user-disabled"!=t.code&&"auth/user-token-expired"!=t.code||(e.h||e.dispatchEvent(new Dc("userInvalidated")),e.h=t),t}))}(e,t,n);return e.I.push(r),r.ka((function(){H(e.I,r)})),r}function ul(e){if(!e.apiKey)return null;var t={apiKey:e.apiKey,authDomain:e.authDomain,appName:e.appName},n={};if(!(e.stsTokenManager&&e.stsTokenManager.accessToken&&e.stsTokenManager.expirationTime))return null;n[La]=e.stsTokenManager.accessToken,n.refreshToken=e.stsTokenManager.refreshToken||null,n.expiresIn=(e.stsTokenManager.expirationTime-k())/1e3;var r=new Mc(t,n,e);return e.providerData&&W(e.providerData,(function(e){e&&Yc(r,Br(e))})),e.redirectEventId&&(r.ca=e.redirectEventId),r}function cl(e){this.a=e,this.b=Iu()}gc.prototype.reset=function(){this.b=null,this.a&&(this.a.cancel(),this.a=null)},gc.prototype.h=function(e,t){if(e){this.reset(),this.g=!0;var n=e.c,r=e.b,i=e.a&&"auth/web-storage-unsupported"==e.a.code,o=e.a&&"auth/operation-not-supported-in-this-environment"==e.a.code;this.i=!(!i&&!o),"unknown"!=n||i||o?e.a?(wc(this,!0,null,e.a),Ze()):t.Ba(n,r)?function(e,t,n){n=n.Ba(t.c,t.b);var r=t.g,i=t.f,o=t.i,a=t.R(),s=!!t.c.match(/Redirect$/);n(r,i,a,o).then((function(t){wc(e,s,t,null)})).s((function(t){wc(e,s,null,t)}))}(this,e,t):et(new ei("invalid-auth-event")):(wc(this,!1,null,null),Ze())}else et(new ei("invalid-auth-event"))},gc.prototype.oa=function(){var e=this;return new Qe((function(t,n){e.b?e.b().then(t,n):(e.f.push(t),e.c.push(n),function(e){var t=new ei("timeout");e.a&&e.a.cancel(),e.a=pn(lc.get()).then((function(){e.b||(e.g=!0,wc(e,!0,null,t))}))}(e))}))},Ec.prototype.h=function(e,t){if(e){var n=e.c,r=e.b;e.a?(t.ja(e.c,null,e.a,e.b),Ze()):t.Ba(n,r)?function(e,t){var n=e.b,r=e.c;t.Ba(r,n)(e.g,e.f,e.R(),e.i).then((function(e){t.ja(r,e,null,n)})).s((function(e){t.ja(r,null,e,n)}))}(e,t):et(new ei("invalid-auth-event"))}else et(new ei("invalid-auth-event"))},Cc.prototype.confirm=function(e){return e=Eo(this.verificationId,e),this.a(e)},xc.prototype.start=function(){this.a=this.c,function e(t,n){t.stop(),t.b=pn(function(e,t){return t?(e.a=e.c,e.g()):(t=e.a,e.a*=2,e.a>e.f&&(e.a=e.f),t)}(t,n)).then((function(){return function(){var e=u.document,t=null;return Dr()||!e?Ze():new Qe((function(n){t=function(){Dr()&&(e.removeEventListener("visibilitychange",t,!1),n())},e.addEventListener("visibilitychange",t,!1)})).s((function(n){throw e.removeEventListener("visibilitychange",t,!1),n}))}()})).then((function(){return t.h()})).then((function(){e(t,!0)})).s((function(n){t.i(n)&&e(t,!1)}))}(this,!0)},xc.prototype.stop=function(){this.b&&(this.b.cancel(),this.b=null)},Ic.prototype.A=function(){return{apiKey:this.f.c,refreshToken:this.a,accessToken:this.b,expirationTime:this.c}},Ic.prototype.getToken=function(e){return e=!!e,this.b&&!this.a?et(new ei("user-token-expired")):e||!this.b||k()>this.c-3e4?this.a?Nc(this,{grant_type:"refresh_token",refresh_token:this.a}):Ze(null):Ze({accessToken:this.b,expirationTime:this.c,refreshToken:this.a})},Ac.prototype.A=function(){return{lastLoginAt:this.b,createdAt:this.a}},x(Dc,Ft),x(Mc,un),Mc.prototype.ua=function(e){this.ga=e,Va(this.a,e)},Mc.prototype.ha=function(){return this.ga},Mc.prototype.Ca=function(){return K(this.P)},Mc.prototype.Ja=function(){this.w.b&&(this.w.stop(),this.w.start())},Vr(Mc.prototype,"providerId","firebase"),(t=Mc.prototype).reload=function(){var e=this;return sl(this,Kc(this).then((function(){return Zc(e).then((function(){return Bc(e)})).then(Qc)})))},t.dc=function(e){return this.G(e).then((function(e){return new kc(e)}))},t.G=function(e){var t=this;return sl(this,Kc(this).then((function(){return t.b.getToken(e)})).then((function(e){if(!e)throw new ei("internal-error");return e.accessToken!=t.ma&&(qc(t,e.accessToken),t.dispatchEvent(new Dc("tokenChanged"))),Xc(t,"refreshToken",e.refreshToken),e.accessToken})))},t.zc=function(e){if(!(e=e.users)||!e.length)throw new ei("internal-error");zc(this,{uid:(e=e[0]).localId,displayName:e.displayName,photoURL:e.photoUrl,email:e.email,emailVerified:!!e.emailVerified,phoneNumber:e.phoneNumber,lastLoginAt:e.lastLoginAt,createdAt:e.createdAt,tenantId:e.tenantId});for(var t=function(e){return(e=e.providerUserInfo)&&e.length?V(e,(function(e){return new Rc(e.rawId,e.providerId,e.email,e.displayName,e.photoUrl,e.phoneNumber)})):[]}(e),n=0;n<t.length;n++)Yc(this,t[n]);Xc(this,"isAnonymous",!(this.email&&e.passwordHash||this.providerData&&this.providerData.length))},t.Ac=function(e){return Ur("firebase.User.prototype.reauthenticateAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.reauthenticateWithCredential instead."),this.hb(e)},t.hb=function(e){var t=this,n=null;return sl(this,e.f(this.a,this.uid).then((function(e){return el(t,e),n=nl(t,e,"reauthenticate"),t.h=null,t.reload()})).then((function(){return n})),!0)},t.rc=function(e){return Ur("firebase.User.prototype.linkAndRetrieveDataWithCredential is deprecated. Please use firebase.User.prototype.linkWithCredential instead."),this.fb(e)},t.fb=function(e){var t=this,n=null;return sl(this,tl(this,e.providerId).then((function(){return t.G()})).then((function(n){return e.b(t.a,n)})).then((function(e){return n=nl(t,e,"link"),rl(t,e)})).then((function(){return n})))},t.sc=function(e,t){var n=this;return sl(this,tl(this,"phone").then((function(){return Tc(Uc(n),e,t,C(n.fb,n))})))},t.Bc=function(e,t){var n=this;return sl(this,Ze().then((function(){return Tc(Uc(n),e,t,C(n.hb,n))})),!0)},t.rb=function(e){var t=this;return sl(this,this.G().then((function(n){return t.a.rb(n,e)})).then((function(e){return el(t,e),t.reload()})))},t.Sc=function(e){var t=this;return sl(this,this.G().then((function(n){return e.b(t.a,n)})).then((function(e){return el(t,e),t.reload()})))},t.sb=function(e){var t=this;return sl(this,this.G().then((function(n){return t.a.sb(n,e)})).then((function(e){return el(t,e),t.reload()})))},t.tb=function(e){if(void 0===e.displayName&&void 0===e.photoURL)return Kc(this);var t=this;return sl(this,this.G().then((function(n){return t.a.tb(n,{displayName:e.displayName,photoUrl:e.photoURL})})).then((function(e){return el(t,e),Xc(t,"displayName",e.displayName||null),Xc(t,"photoURL",e.photoUrl||null),W(t.providerData,(function(e){"password"===e.providerId&&(Vr(e,"displayName",t.displayName),Vr(e,"photoURL",t.photoURL))})),Bc(t)})).then(Qc))},t.Qc=function(e){var t=this;return sl(this,Zc(this).then((function(n){return B(Gc(t),e)?function(e,t,n){return Ns(e,cs,{idToken:t,deleteProvider:n})}(t.a,n,[e]).then((function(e){var n={};return W(e.providerUserInfo||[],(function(e){n[e.providerId]=!0})),W(Gc(t),(function(e){n[e]||$c(t,e)})),n[wo.PROVIDER_ID]||Vr(t,"phoneNumber",null),Bc(t)})):Bc(t).then((function(){throw new ei("no-such-provider")}))})))},t.delete=function(){var e=this;return sl(this,this.G().then((function(t){return Ns(e.a,us,{idToken:t})})).then((function(){e.dispatchEvent(new Dc("userDeleted"))}))).then((function(){for(var t=0;t<e.I.length;t++)e.I[t].cancel("app-deleted");Lc(e,null),jc(e,null),e.I=[],e.B=!0,Vc(e),Vr(e,"refreshToken",null),e.i&&uc(e.i,e)}))},t.xb=function(e,t){return!!("linkViaPopup"==e&&(this.g||null)==t&&this.f||"reauthViaPopup"==e&&(this.g||null)==t&&this.f||"linkViaRedirect"==e&&(this.ca||null)==t||"reauthViaRedirect"==e&&(this.ca||null)==t)},t.ja=function(e,t,n,r){"linkViaPopup"!=e&&"reauthViaPopup"!=e||r!=(this.g||null)||(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.Ba=function(e,t){return"linkViaPopup"==e&&t==(this.g||null)?C(this.Bb,this):"reauthViaPopup"==e&&t==(this.g||null)?C(this.Cb,this):"linkViaRedirect"==e&&(this.ca||null)==t?C(this.Bb,this):"reauthViaRedirect"==e&&(this.ca||null)==t?C(this.Cb,this):null},t.tc=function(e){var t=this;return il(this,"linkViaPopup",e,(function(){return tl(t,e.providerId).then((function(){return Bc(t)}))}),!1)},t.Cc=function(e){return il(this,"reauthViaPopup",e,(function(){return Ze()}),!0)},t.uc=function(e){var t=this;return ol(this,"linkViaRedirect",e,(function(){return tl(t,e.providerId)}),!1)},t.Dc=function(e){return ol(this,"reauthViaRedirect",e,(function(){return Ze()}),!0)},t.Bb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return sl(this,this.G().then((function(n){return ts(i.a,{requestUri:e,postBody:r,sessionId:t,idToken:n})})).then((function(e){return o=nl(i,e,"link"),rl(i,e)})).then((function(){return o})))},t.Cb=function(e,t,n,r){var i=this;this.c&&(this.c.cancel(),this.c=null);var o=null;return sl(this,Ze().then((function(){return Gi(ns(i.a,{requestUri:e,sessionId:t,postBody:r,tenantId:n}),i.uid)})).then((function(e){return o=nl(i,e,"reauthenticate"),el(i,e),i.h=null,i.reload()})).then((function(){return o})),!0)},t.jb=function(e){var t=this,n=null;return sl(this,this.G().then((function(t){return n=t,void 0===e||Y(e)?{}:Si(new pi(e))})).then((function(e){return t.a.jb(n,e)})).then((function(e){if(t.email!=e)return t.reload()})).then((function(){})))},t.toJSON=function(){return this.A()},t.A=function(){var e={uid:this.uid,displayName:this.displayName,photoURL:this.photoURL,email:this.email,emailVerified:this.emailVerified,phoneNumber:this.phoneNumber,isAnonymous:this.isAnonymous,tenantId:this.tenantId,providerData:[],apiKey:this.l,appName:this.m,authDomain:this.o,stsTokenManager:this.b.A(),redirectEventId:this.ca||null};return this.metadata&&J(e,this.metadata.A()),W(this.providerData,(function(t){e.providerData.push(function(e){var t,n={};for(t in e)e.hasOwnProperty(t)&&(n[t]=e[t]);return n}(t))})),e};var ll={name:"redirectUser",C:"session"};function fl(e){return Nu(e.b,ll,e.a)}function hl(e){this.a=e,this.b=Iu(),this.c=null,this.f=function(e){var t=vl("local"),n=vl("session"),r=vl("none");return function(e,t,n){var r=Ou(t,n),i=Pu(e,t.C);return e.get(t,n).then((function(o){var a=null;try{a=Pr(u.localStorage.getItem(r))}catch(e){}if(a&&!o)return u.localStorage.removeItem(r),e.set(t,a,n);a&&o&&"localStorage"!=i.type&&u.localStorage.removeItem(r)}))}(e.b,t,e.a).then((function(){return e.b.get(n,e.a)})).then((function(i){return i?n:e.b.get(r,e.a).then((function(n){return n?r:e.b.get(t,e.a).then((function(n){return n?t:e.b.get(dl,e.a).then((function(e){return e?vl(e):t}))}))}))})).then((function(t){return e.c=t,pl(e,t.C)})).s((function(){e.c||(e.c=t)}))}(this),this.b.addListener(vl("local"),this.a,C(this.g,this))}function pl(e,t){var n,r=[];for(n in ku)ku[n]!==t&&r.push(Nu(e.b,vl(ku[n]),e.a));return r.push(Nu(e.b,dl,e.a)),function(e){return new Qe((function(t,n){var r=e.length,i=[];if(r)for(var o=function(e,n){r--,i[e]=n,0==r&&t(i)},a=function(e){n(e)},s=0;s<e.length;s++)tt(e[s],T(o,s),a);else t(i)}))}(r)}hl.prototype.g=function(){var e=this,t=vl("local");bl(this,(function(){return Ze().then((function(){return e.c&&"local"!=e.c.C?e.b.get(t,e.a):null})).then((function(n){if(n)return pl(e,"local").then((function(){e.c=t}))}))}))};var dl={name:"persistence",C:"session"};function vl(e){return{name:"authUser",C:e}}function yl(e,t){return bl(e,(function(){return e.b.set(e.c,t.A(),e.a)}))}function gl(e){return bl(e,(function(){return Nu(e.b,e.c,e.a)}))}function ml(e,t){return bl(e,(function(){return e.b.get(e.c,e.a).then((function(e){return e&&t&&(e.authDomain=t),ul(e||{})}))}))}function bl(e,t){return e.f=e.f.then(t,t),e.f}function _l(e){if(this.l=!1,Vr(this,"settings",new Sc),Vr(this,"app",e),!Il(this).options||!Il(this).options.apiKey)throw new ei("invalid-api-key");e=r.a.SDK_VERSION?br(r.a.SDK_VERSION):null,this.b=new Da(Il(this).options&&Il(this).options.apiKey,Ai(Oi),e),this.O=[],this.m=[],this.J=[],this.Ub=r.a.INTERNAL.createSubscribe(C(this.oc,this)),this.W=void 0,this.Vb=r.a.INTERNAL.createSubscribe(C(this.pc,this)),kl(this,null),this.h=new hl(Il(this).options.apiKey+":"+Il(this).name),this.w=new cl(Il(this).options.apiKey+":"+Il(this).name),this.Y=Al(this,function(e){var t=Il(e).options.authDomain,n=function(e){var t=function(e,t){return e.b.get(ll,e.a).then((function(e){return e&&t&&(e.authDomain=t),ul(e||{})}))}(e.w,Il(e).options.authDomain).then((function(t){return(e.B=t)&&(t.da=e.w),fl(e.w)}));return Al(e,t)}(e).then((function(){return ml(e.h,t)})).then((function(t){return t?(t.da=e.w,e.B&&(e.B.ca||null)==(t.ca||null)?t:t.reload().then((function(){return yl(e.h,t).then((function(){return t}))})).s((function(n){return"auth/network-request-failed"==n.code?t:gl(e.h)}))):null})).then((function(t){kl(e,t||null)}));return Al(e,n)}(this)),this.i=Al(this,function(e){return e.Y.then((function(){return Cl(e)})).s((function(){})).then((function(){if(!e.l)return e.ma()})).s((function(){})).then((function(){if(!e.l){e.ga=!0;var t=e.h;t.b.addListener(vl("local"),t.a,e.ma)}}))}(this)),this.ga=!1,this.ma=C(this.Nc,this),this.ub=C(this.aa,this),this.wa=C(this.bc,this),this.xa=C(this.mc,this),this.Ja=C(this.nc,this),this.a=null,function(e){var t=Il(e).options.authDomain,n=Il(e).options.apiKey;t&&Sr()&&(e.Tb=e.Y.then((function(){if(!e.l){if(e.a=yc(t,n,Il(e).name),sc(e.a,e),Pl(e)&&Hc(Pl(e)),e.B){Hc(e.B);var r=e.B;r.ua(e.ha()),Lc(r,e),Fc(r=e.B,e.I),jc(r,e),e.B=null}return e.a}})))}(this),this.INTERNAL={},this.INTERNAL.delete=C(this.delete,this),this.INTERNAL.logFramework=C(this.vc,this),this.o=0,un.call(this),function(e){Object.defineProperty(e,"lc",{get:function(){return this.ha()},set:function(e){this.ua(e)},enumerable:!1}),e.Z=null,Object.defineProperty(e,"ti",{get:function(){return this.R()},set:function(e){this.nb(e)},enumerable:!1}),e.P=null}(this),this.I=[]}function wl(e){Ft.call(this,"languageCodeChanged"),this.g=e}function El(e){Ft.call(this,"frameworkChanged"),this.c=e}function Sl(e){return e.Tb||et(new ei("auth-domain-config-required"))}function Cl(e){if(!Sr())return et(new ei("operation-not-supported-in-this-environment"));var t=Sl(e).then((function(){return e.a.oa()})).then((function(e){return e?Br(e):null}));return Al(e,t)}function Tl(e,t){var n={};return n.apiKey=Il(e).options.apiKey,n.authDomain=Il(e).options.authDomain,n.appName=Il(e).name,e.Y.then((function(){return function(e,t,n,r){var i=new Mc(e,t);return n&&(i.da=n),r&&Fc(i,r),i.reload().then((function(){return i}))}(n,t,e.w,e.Ca())})).then((function(t){return Pl(e)&&t.uid==Pl(e).uid?(Jc(Pl(e),t),e.aa(t)):(kl(e,t),Hc(t),e.aa(t))})).then((function(){Nl(e)}))}function kl(e,t){Pl(e)&&(function(e,t){z(e.O,(function(e){return e==t}))}(Pl(e),e.ub),Jt(Pl(e),"tokenChanged",e.wa),Jt(Pl(e),"userDeleted",e.xa),Jt(Pl(e),"userInvalidated",e.Ja),Vc(Pl(e))),t&&(t.O.push(e.ub),Yt(t,"tokenChanged",e.wa),Yt(t,"userDeleted",e.xa),Yt(t,"userInvalidated",e.Ja),0<e.o&&Wc(t)),Vr(e,"currentUser",t),t&&(t.ua(e.ha()),Lc(t,e),Fc(t,e.I),jc(t,e))}function xl(e,t){var n=null,r=null;return Al(e,t.then((function(t){return n=So(t),r=Fi(t),Tl(e,t)})).then((function(){return Br({user:Pl(e),credential:n,additionalUserInfo:r,operationType:"signIn"})})))}function Il(e){return e.app}function Pl(e){return e.currentUser}function Ol(e){return Pl(e)&&Pl(e)._lat||null}function Nl(e){if(e.ga){for(var t=0;t<e.m.length;t++)e.m[t]&&e.m[t](Ol(e));if(e.W!==e.getUid()&&e.J.length)for(e.W=e.getUid(),t=0;t<e.J.length;t++)e.J[t]&&e.J[t](Ol(e))}}function Al(e,t){return e.O.push(t),t.ka((function(){H(e.O,t)})),t}function Rl(){}function Dl(){this.a={},this.b=1e12}hl.prototype.mb=function(e){var t=null,n=this;return function(e){var t=new ei("invalid-persistence-type"),n=new ei("unsupported-persistence-type");e:{for(r in ku)if(ku[r]==e){var r=!0;break e}r=!1}if(!r||"string"!=typeof e)throw t;switch(pr()){case"ReactNative":if("session"===e)throw n;break;case"Node":if("none"!==e)throw n;break;default:if(!Er()&&"none"!==e)throw n}}(e),bl(this,(function(){return e!=n.c.C?n.b.get(n.c,n.a).then((function(r){return t=r,pl(n,e)})).then((function(){if(n.c=vl(e),t)return n.b.set(n.c,t,n.a)})):Ze()}))},x(_l,un),x(wl,Ft),x(El,Ft),(t=_l.prototype).mb=function(e){return Al(this,e=this.h.mb(e))},t.ua=function(e){this.Z===e||this.l||(this.Z=e,Va(this.b,this.Z),this.dispatchEvent(new wl(this.ha())))},t.ha=function(){return this.Z},t.Tc=function(){var e=u.navigator;this.ua(e&&(e.languages&&e.languages[0]||e.language||e.userLanguage)||null)},t.vc=function(e){this.I.push(e),qa(this.b,r.a.SDK_VERSION?br(r.a.SDK_VERSION,this.I):null),this.dispatchEvent(new El(this.I))},t.Ca=function(){return K(this.I)},t.nb=function(e){this.P===e||this.l||(this.P=e,this.b.b=this.P)},t.R=function(){return this.P},t.toJSON=function(){return{apiKey:Il(this).options.apiKey,authDomain:Il(this).options.authDomain,appName:Il(this).name,currentUser:Pl(this)&&Pl(this).A()}},t.xb=function(e,t){switch(e){case"unknown":case"signInViaRedirect":return!0;case"signInViaPopup":return this.g==t&&!!this.f;default:return!1}},t.ja=function(e,t,n,r){"signInViaPopup"==e&&this.g==r&&(n&&this.v?this.v(n):t&&!n&&this.f&&this.f(t),this.c&&(this.c.cancel(),this.c=null),delete this.f,delete this.v)},t.Ba=function(e,t){return"signInViaRedirect"==e||"signInViaPopup"==e&&this.g==t&&this.f?C(this.ac,this):null},t.ac=function(e,t,n,r){var i=this;e={requestUri:e,postBody:r,sessionId:t,tenantId:n},this.c&&(this.c.cancel(),this.c=null);var o=null,a=null,s=es(i.b,e).then((function(e){return o=So(e),a=Fi(e),e}));return Al(this,e=i.Y.then((function(){return s})).then((function(e){return Tl(i,e)})).then((function(){return Br({user:Pl(i),credential:o,additionalUserInfo:a,operationType:"signIn"})})))},t.Lc=function(e){if(!Sr())return et(new ei("operation-not-supported-in-this-environment"));var t=this,n=Li(e.providerId),i=Or(),o=null;(!kr()||fr())&&Il(this).options.authDomain&&e.isOAuthProvider&&(o=Qs(Il(this).options.authDomain,Il(this).options.apiKey,Il(this).name,"signInViaPopup",e,null,i,r.a.SDK_VERSION||null,null,null,this.R()));var a=ar(o,n&&n.sa,n&&n.ra);return Al(this,n=Sl(this).then((function(n){return fc(n,a,"signInViaPopup",e,i,!!o,t.R())})).then((function(){return new Qe((function(e,n){t.ja("signInViaPopup",null,new ei("cancelled-popup-request"),t.g),t.f=e,t.v=n,t.g=i,t.c=dc(t.a,t,"signInViaPopup",a,i)}))})).then((function(e){return a&&or(a),e?Br(e):null})).s((function(e){throw a&&or(a),e})))},t.Mc=function(e){if(!Sr())return et(new ei("operation-not-supported-in-this-environment"));var t=this;return Al(this,Sl(this).then((function(){return function(e){return bl(e,(function(){return e.b.set(dl,e.c.C,e.a)}))}(t.h)})).then((function(){return pc(t.a,"signInViaRedirect",e,void 0,t.R())})))},t.oa=function(){var e=this;return Cl(this).then((function(t){return e.a&&bc(e.a.b),t})).s((function(t){throw e.a&&bc(e.a.b),t}))},t.Rc=function(e){if(!e)return et(new ei("null-user"));if(this.P!=e.tenantId)return et(new ei("tenant-id-mismatch"));var t=this,n={};n.apiKey=Il(this).options.apiKey,n.authDomain=Il(this).options.authDomain,n.appName=Il(this).name;var r=function(e,t,n,r){t=t||{apiKey:e.l,authDomain:e.o,appName:e.m};var i=e.b,o={};return o[La]=i.b,o.refreshToken=i.a,o.expiresIn=(i.c-k())/1e3,t=new Mc(t,o),n&&(t.da=n),r&&Fc(t,r),Jc(t,e),t}(e,n,t.w,t.Ca());return Al(this,this.i.then((function(){if(Il(t).options.apiKey!=e.l)return r.reload()})).then((function(){return Pl(t)&&e.uid==Pl(t).uid?(Jc(Pl(t),e),t.aa(e)):(kl(t,r),Hc(r),t.aa(r))})).then((function(){Nl(t)})))},t.pb=function(){var e=this;return Al(this,this.i.then((function(){return e.a&&bc(e.a.b),Pl(e)?(kl(e,null),gl(e.h).then((function(){Nl(e)}))):Ze()})))},t.Nc=function(){var e=this;return ml(this.h,Il(this).options.authDomain).then((function(t){if(!e.l){var n;if(n=Pl(e)&&t){n=Pl(e).uid;var r=t.uid;n=null!=n&&""!==n&&null!=r&&""!==r&&n==r}if(n)return Jc(Pl(e),t),Pl(e).G();(Pl(e)||t)&&(kl(e,t),t&&(Hc(t),t.da=e.w),e.a&&sc(e.a,e),Nl(e))}}))},t.aa=function(e){return yl(this.h,e)},t.bc=function(){Nl(this),this.aa(Pl(this))},t.mc=function(){this.pb()},t.nc=function(){this.pb()},t.oc=function(e){var t=this;this.addAuthTokenListener((function(){e.next(Pl(t))}))},t.pc=function(e){var t=this;!function(e,t){e.J.push(t),Al(e,e.i.then((function(){!e.l&&B(e.J,t)&&e.W!==e.getUid()&&(e.W=e.getUid(),t(Ol(e)))})))}(this,(function(){e.next(Pl(t))}))},t.xc=function(e,t,n){var r=this;return this.ga&&Promise.resolve().then((function(){m(e)?e(Pl(r)):m(e.next)&&e.next(Pl(r))})),this.Ub(e,t,n)},t.wc=function(e,t,n){var r=this;return this.ga&&Promise.resolve().then((function(){r.W=r.getUid(),m(e)?e(Pl(r)):m(e.next)&&e.next(Pl(r))})),this.Vb(e,t,n)},t.cc=function(e){var t=this;return Al(this,this.i.then((function(){return Pl(t)?Pl(t).G(e).then((function(e){return{accessToken:e}})):null})))},t.Hc=function(e){var t=this;return this.i.then((function(){return xl(t,Ns(t.b,ks,{token:e}))})).then((function(e){var n=e.user;return Xc(n,"isAnonymous",!1),t.aa(n),e}))},t.Ic=function(e,t){var n=this;return this.i.then((function(){return xl(n,Ns(n.b,xs,{email:e,password:t}))}))},t.Xb=function(e,t){var n=this;return this.i.then((function(){return xl(n,Ns(n.b,as,{email:e,password:t}))}))},t.Sa=function(e){var t=this;return this.i.then((function(){return xl(t,e.na(t.b))}))},t.Gc=function(e){return Ur("firebase.auth.Auth.prototype.signInAndRetrieveDataWithCredential is deprecated. Please use firebase.auth.Auth.prototype.signInWithCredential instead."),this.Sa(e)},t.ob=function(){var e=this;return this.i.then((function(){var t=Pl(e);if(t&&t.isAnonymous){var n=Br({providerId:null,isNewUser:!1});return Br({user:t,credential:null,additionalUserInfo:n,operationType:"signIn"})}return xl(e,e.b.ob()).then((function(t){var n=t.user;return Xc(n,"isAnonymous",!0),e.aa(n),t}))}))},t.getUid=function(){return Pl(this)&&Pl(this).uid||null},t.Wb=function(e){this.addAuthTokenListener(e),this.o++,0<this.o&&Pl(this)&&Wc(Pl(this))},t.Ec=function(e){var t=this;W(this.m,(function(n){n==e&&t.o--})),0>this.o&&(this.o=0),0==this.o&&Pl(this)&&Vc(Pl(this)),this.removeAuthTokenListener(e)},t.addAuthTokenListener=function(e){var t=this;this.m.push(e),Al(this,this.i.then((function(){t.l||B(t.m,e)&&e(Ol(t))})))},t.removeAuthTokenListener=function(e){z(this.m,(function(t){return t==e}))},t.delete=function(){this.l=!0;for(var e=0;e<this.O.length;e++)this.O[e].cancel("app-deleted");return this.O=[],this.h&&(e=this.h).b.removeListener(vl("local"),e.a,this.ma),this.a&&(uc(this.a,this),bc(this.a.b)),Promise.resolve()},t.$b=function(e){return Al(this,function(e,t){return Ns(e,ss,{identifier:t,continueUri:Cr()?nr():"http://localhost"}).then((function(e){return e.signinMethods||[]}))}(this.b,e))},t.qc=function(e){return!!go(e)},t.lb=function(e,t){var n=this;return Al(this,Ze().then((function(){var e=new pi(t);if(!e.c)throw new ei("argument-error",yi+" must be true when sending sign in link to email");return Si(e)})).then((function(t){return n.b.lb(e,t)})).then((function(){})))},t.Uc=function(e){return this.Ma(e).then((function(e){return e.data.email}))},t.ab=function(e,t){return Al(this,this.b.ab(e,t).then((function(){})))},t.Ma=function(e){return Al(this,this.b.Ma(e).then((function(e){return new zr(e)})))},t.Ya=function(e){return Al(this,this.b.Ya(e).then((function(){})))},t.kb=function(e,t){var n=this;return Al(this,Ze().then((function(){return void 0===t||Y(t)?{}:Si(new pi(t))})).then((function(t){return n.b.kb(e,t)})).then((function(){})))},t.Kc=function(e,t){return Al(this,Tc(this,e,t,C(this.Sa,this)))},t.Jc=function(e,t){var n=this;return Al(this,Ze().then((function(){var r=t||nr(),i=yo(e,r);if(!(r=go(r)))throw new ei("argument-error","Invalid email link!");if(r.tenantId!==n.R())throw new ei("tenant-id-mismatch");return n.Sa(i)})))},Rl.prototype.render=function(){},Rl.prototype.reset=function(){},Rl.prototype.getResponse=function(){},Rl.prototype.execute=function(){};var Ml=null;function Ll(e,t){return(t=Fl(t))&&e.a[t]||null}function Fl(e){return(e=void 0===e?1e12:e)?e.toString():null}function jl(e,t){this.g=!1,this.c=t,this.a=this.b=null,this.h="invisible"!==this.c.size,this.f=zn(e);var n=this;this.i=function(){n.execute()},this.h?this.execute():Yt(this.f,"click",this.i)}function Ul(e){if(e.g)throw Error("reCAPTCHA mock was already deleted!")}function Wl(){}Dl.prototype.render=function(e,t){return this.a[this.b.toString()]=new jl(e,t),this.b++},Dl.prototype.reset=function(e){var t=Ll(this,e);e=Fl(e),t&&e&&(t.delete(),delete this.a[e])},Dl.prototype.getResponse=function(e){return(e=Ll(this,e))?e.getResponse():null},Dl.prototype.execute=function(e){(e=Ll(this,e))&&e.execute()},jl.prototype.getResponse=function(){return Ul(this),this.b},jl.prototype.execute=function(){Ul(this);var e=this;this.a||(this.a=setTimeout((function(){e.b=function(){for(var e=50,t=[];0<e;)t.push("1234567890abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".charAt(Math.floor(62*Math.random()))),e--;return t.join("")}();var t=e.c.callback,n=e.c["expired-callback"];if(t)try{t(e.b)}catch(e){}e.a=setTimeout((function(){if(e.a=null,e.b=null,n)try{n()}catch(e){}e.h&&e.execute()}),6e4)}),500))},jl.prototype.delete=function(){Ul(this),this.g=!0,clearTimeout(this.a),this.a=null,Jt(this.f,"click",this.i)},Wl.prototype.g=function(){return Ml||(Ml=new Dl),Ze(Ml)},Wl.prototype.c=function(){};var Vl=null;function ql(){this.b=u.grecaptcha?1/0:0,this.f=null,this.a="__rcb"+Math.floor(1e6*Math.random()).toString()}var Bl=new Z(ne,"https://www.google.com/recaptcha/api.js?onload=%{onload}&render=explicit&hl=%{hl}"),Hl=new Rr(3e4,6e4);ql.prototype.g=function(e){var t=this;return new Qe((function(n,r){var i=setTimeout((function(){r(new ei("network-request-failed"))}),Hl.get());!u.grecaptcha||e!==t.f&&!t.b?(u[t.a]=function(){if(u.grecaptcha){t.f=e;var o=u.grecaptcha.render;u.grecaptcha.render=function(e,n){return e=o(e,n),t.b++,e},clearTimeout(i),n(u.grecaptcha)}else clearTimeout(i),r(new ei("internal-error"));delete u[t.a]},Ze(xa(ae(Bl,{onload:t.a,hl:e||""}))).s((function(){clearTimeout(i),r(new ei("internal-error","Unable to load external reCAPTCHA dependencies!"))}))):(clearTimeout(i),n(u.grecaptcha))}))},ql.prototype.c=function(){this.b--};var zl=null;function Ql(e,t,n,r,i,o,a){if(Vr(this,"type","recaptcha"),this.c=this.f=null,this.B=!1,this.u=t,this.g=null,a?(Vl||(Vl=new Wl),a=Vl):(zl||(zl=new ql),a=zl),this.m=a,this.a=n||{theme:"light",type:"image"},this.h=[],this.a[Yl])throw new ei("argument-error","sitekey should not be provided for reCAPTCHA as one is automatically provisioned for the current project.");if(this.i="invisible"===this.a[$l],!u.document)throw new ei("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment with DOM support.");if(!zn(t)||!this.i&&zn(t).hasChildNodes())throw new ei("argument-error","reCAPTCHA container is either not found or already contains inner elements!");this.o=new Da(e,o||null,i||null),this.v=r||function(){return null};var s=this;this.l=[];var c=this.a[Kl];this.a[Kl]=function(e){if(Xl(s,e),"function"==typeof c)c(e);else if("string"==typeof c){var t=wr(c,u);"function"==typeof t&&t(e)}};var l=this.a[Gl];this.a[Gl]=function(){if(Xl(s,null),"function"==typeof l)l();else if("string"==typeof l){var e=wr(l,u);"function"==typeof e&&e()}}}var Kl="callback",Gl="expired-callback",Yl="sitekey",$l="size";function Xl(e,t){for(var n=0;n<e.l.length;n++)try{e.l[n](t)}catch(e){}}function Jl(e,t){return e.h.push(t),t.ka((function(){H(e.h,t)})),t}function Zl(e){if(e.B)throw new ei("internal-error","RecaptchaVerifier instance has been destroyed.")}function ef(e,t,n){var i=!1;try{this.b=n||r.a.app()}catch(e){throw new ei("argument-error","No firebase.app.App instance is currently initialized.")}if(!this.b.options||!this.b.options.apiKey)throw new ei("invalid-api-key");n=this.b.options.apiKey;var o=this,a=null;try{a=this.b.auth().Ca()}catch(e){}try{i=this.b.auth().settings.appVerificationDisabledForTesting}catch(e){}a=r.a.SDK_VERSION?br(r.a.SDK_VERSION,a):null,Ql.call(this,n,e,t,(function(){try{var e=o.b.auth().ha()}catch(t){e=null}return e}),a,Ai(Oi),i)}function tf(e,t,n,r){e:{n=Array.prototype.slice.call(n);for(var i=0,o=!1,a=0;a<t.length;a++)if(t[a].optional)o=!0;else{if(o)throw new ei("internal-error","Argument validator encountered a required argument after an optional argument.");i++}if(o=t.length,n.length<i||o<n.length)r="Expected "+(i==o?1==i?"1 argument":i+" arguments":i+"-"+o+" arguments")+" but got "+n.length+".";else{for(i=0;i<n.length;i++)if(o=t[i].optional&&void 0===n[i],!t[i].N(n[i])&&!o){if(t=t[i],0>i||i>=nf.length)throw new ei("internal-error","Argument validator received an unsupported number of arguments.");n=nf[i],r=(r?"":n+" argument ")+(t.name?'"'+t.name+'" ':"")+"must be "+t.M+".";break e}r=null}}if(r)throw new ei("argument-error",e+" failed: "+r)}(t=Ql.prototype).Da=function(){var e=this;return this.f?this.f:this.f=Jl(this,Ze().then((function(){if(Cr()&&!hr())return cr();throw new ei("operation-not-supported-in-this-environment","RecaptchaVerifier is only supported in a browser HTTP/HTTPS environment.")})).then((function(){return e.m.g(e.v())})).then((function(t){return e.g=t,Ns(e.o,gs,{})})).then((function(t){e.a[Yl]=t.recaptchaSiteKey})).s((function(t){throw e.f=null,t})))},t.render=function(){Zl(this);var e=this;return Jl(this,this.Da().then((function(){if(null===e.c){var t=e.u;if(!e.i){var n=zn(t);t=function(e,t,n){var r=arguments,i=document,o=String(r[0]),a=r[1];if(!Hn&&a&&(a.name||a.type)){if(o=["<",o],a.name&&o.push(' name="',Ue(a.name),'"'),a.type){o.push(' type="',Ue(a.type),'"');var s={};J(s,a),delete s.type,a=s}o.push(">"),o=o.join("")}return o=i.createElement(o),a&&(c(a)?o.className=a:y(a)?o.className=a.join(" "):Qn(o,a)),2<r.length&&Gn(i,o,r),o}("DIV"),n.appendChild(t)}e.c=e.g.render(t,e.a)}return e.c})))},t.verify=function(){Zl(this);var e=this;return Jl(this,this.render().then((function(t){return new Qe((function(n){var r=e.g.getResponse(t);if(r)n(r);else{var i=function(t){t&&(function(e,t){z(e.l,(function(e){return e==t}))}(e,i),n(t))};e.l.push(i),e.i&&e.g.execute(e.c)}}))})))},t.reset=function(){Zl(this),null!==this.c&&this.g.reset(this.c)},t.clear=function(){Zl(this),this.B=!0,this.m.c();for(var e=0;e<this.h.length;e++)this.h[e].cancel("RecaptchaVerifier instance has been destroyed.");if(!this.i){e=zn(this.u);for(var t;t=e.firstChild;)e.removeChild(t)}},x(ef,Ql);var nf="First Second Third Fourth Fifth Sixth Seventh Eighth Ninth".split(" ");function rf(e,t){return{name:e||"",M:"a valid string",optional:!!t,N:c}}function of(e,t){return{name:e||"",M:"a boolean",optional:!!t,N:l}}function af(e,t){return{name:e||"",M:"a valid object",optional:!!t,N:b}}function sf(e,t){return{name:e||"",M:"a function",optional:!!t,N:m}}function uf(e,t){return{name:e||"",M:"null",optional:!!t,N:v}}function cf(e){return{name:e?e+"Credential":"credential",M:e?"a valid "+e+" credential":"a valid credential",optional:!1,N:function(t){if(!t)return!1;var n=!e||t.providerId===e;return!(!t.na||!n)}}}function lf(){return{name:"applicationVerifier",M:"an implementation of firebase.auth.ApplicationVerifier",optional:!1,N:function(e){return!!(e&&c(e.type)&&m(e.verify))}}}function ff(e,t,n,r){return{name:n||"",M:e.M+" or "+t.M,optional:!!r,N:function(n){return e.N(n)||t.N(n)}}}function hf(e,t){for(var n in t){var r=t[n].name;e[r]=vf(r,e[n],t[n].j)}}function pf(e,t){for(var n in t){var r=t[n].name;r!==n&&Object.defineProperty(e,r,{get:T((function(e){return this[e]}),n),set:T((function(e,t,n,r){tf(e,[n],[r],!0),this[t]=r}),r,n,t[n].Za),enumerable:!0})}}function df(e,t,n,r){e[t]=vf(t,n,r)}function vf(e,t,n){function r(){var e=Array.prototype.slice.call(arguments);return tf(o,n,e),t.apply(this,e)}if(!n)return t;var i,o=function(e){return(e=e.split("."))[e.length-1]}(e);for(i in t)r[i]=t[i];for(i in t.prototype)r.prototype[i]=t.prototype[i];return r}hf(_l.prototype,{Ya:{name:"applyActionCode",j:[rf("code")]},Ma:{name:"checkActionCode",j:[rf("code")]},ab:{name:"confirmPasswordReset",j:[rf("code"),rf("newPassword")]},Xb:{name:"createUserWithEmailAndPassword",j:[rf("email"),rf("password")]},$b:{name:"fetchSignInMethodsForEmail",j:[rf("email")]},oa:{name:"getRedirectResult",j:[]},qc:{name:"isSignInWithEmailLink",j:[rf("emailLink")]},wc:{name:"onAuthStateChanged",j:[ff(af(),sf(),"nextOrObserver"),sf("opt_error",!0),sf("opt_completed",!0)]},xc:{name:"onIdTokenChanged",j:[ff(af(),sf(),"nextOrObserver"),sf("opt_error",!0),sf("opt_completed",!0)]},kb:{name:"sendPasswordResetEmail",j:[rf("email"),ff(af("opt_actionCodeSettings",!0),uf(null,!0),"opt_actionCodeSettings",!0)]},lb:{name:"sendSignInLinkToEmail",j:[rf("email"),af("actionCodeSettings")]},mb:{name:"setPersistence",j:[rf("persistence")]},Gc:{name:"signInAndRetrieveDataWithCredential",j:[cf()]},ob:{name:"signInAnonymously",j:[]},Sa:{name:"signInWithCredential",j:[cf()]},Hc:{name:"signInWithCustomToken",j:[rf("token")]},Ic:{name:"signInWithEmailAndPassword",j:[rf("email"),rf("password")]},Jc:{name:"signInWithEmailLink",j:[rf("email"),rf("emailLink",!0)]},Kc:{name:"signInWithPhoneNumber",j:[rf("phoneNumber"),lf()]},Lc:{name:"signInWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Mc:{name:"signInWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Rc:{name:"updateCurrentUser",j:[ff({name:"user",M:"an instance of Firebase User",optional:!1,N:function(e){return!!(e&&e instanceof Mc)}},uf(),"user")]},pb:{name:"signOut",j:[]},toJSON:{name:"toJSON",j:[rf(null,!0)]},Tc:{name:"useDeviceLanguage",j:[]},Uc:{name:"verifyPasswordResetCode",j:[rf("code")]}}),pf(_l.prototype,{lc:{name:"languageCode",Za:ff(rf(),uf(),"languageCode")},ti:{name:"tenantId",Za:ff(rf(),uf(),"tenantId")}}),_l.Persistence=ku,_l.Persistence.LOCAL="local",_l.Persistence.SESSION="session",_l.Persistence.NONE="none",hf(Mc.prototype,{delete:{name:"delete",j:[]},dc:{name:"getIdTokenResult",j:[of("opt_forceRefresh",!0)]},G:{name:"getIdToken",j:[of("opt_forceRefresh",!0)]},rc:{name:"linkAndRetrieveDataWithCredential",j:[cf()]},fb:{name:"linkWithCredential",j:[cf()]},sc:{name:"linkWithPhoneNumber",j:[rf("phoneNumber"),lf()]},tc:{name:"linkWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},uc:{name:"linkWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Ac:{name:"reauthenticateAndRetrieveDataWithCredential",j:[cf()]},hb:{name:"reauthenticateWithCredential",j:[cf()]},Bc:{name:"reauthenticateWithPhoneNumber",j:[rf("phoneNumber"),lf()]},Cc:{name:"reauthenticateWithPopup",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},Dc:{name:"reauthenticateWithRedirect",j:[{name:"authProvider",M:"a valid Auth provider",optional:!1,N:function(e){return!!(e&&e.providerId&&e.hasOwnProperty&&e.hasOwnProperty("isOAuthProvider"))}}]},reload:{name:"reload",j:[]},jb:{name:"sendEmailVerification",j:[ff(af("opt_actionCodeSettings",!0),uf(null,!0),"opt_actionCodeSettings",!0)]},toJSON:{name:"toJSON",j:[rf(null,!0)]},Qc:{name:"unlink",j:[rf("provider")]},rb:{name:"updateEmail",j:[rf("email")]},sb:{name:"updatePassword",j:[rf("password")]},Sc:{name:"updatePhoneNumber",j:[cf("phone")]},tb:{name:"updateProfile",j:[af("profile")]}}),hf(Dl.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),hf(Rl.prototype,{execute:{name:"execute"},render:{name:"render"},reset:{name:"reset"},getResponse:{name:"getResponse"}}),hf(Qe.prototype,{ka:{name:"finally"},s:{name:"catch"},then:{name:"then"}}),pf(Sc.prototype,{appVerificationDisabled:{name:"appVerificationDisabledForTesting",Za:of("appVerificationDisabledForTesting")}}),hf(Cc.prototype,{confirm:{name:"confirm",j:[rf("verificationCode")]}}),df(Ki,"fromJSON",(function(e){e=c(e)?JSON.parse(e):e;for(var t,n=[eo,po,bo,Xi],r=0;r<n.length;r++)if(t=n[r](e))return t;return null}),[ff(rf(),af(),"json")]),df(vo,"credential",(function(e,t){return new ho(e,t)}),[rf("email"),rf("password")]),hf(ho.prototype,{A:{name:"toJSON",j:[rf(null,!0)]}}),hf(io.prototype,{ya:{name:"addScope",j:[rf("scope")]},Ga:{name:"setCustomParameters",j:[af("customOAuthParameters")]}}),df(io,"credential",oo,[ff(rf(),af(),"token")]),df(vo,"credentialWithLink",yo,[rf("email"),rf("emailLink")]),hf(ao.prototype,{ya:{name:"addScope",j:[rf("scope")]},Ga:{name:"setCustomParameters",j:[af("customOAuthParameters")]}}),df(ao,"credential",so,[ff(rf(),af(),"token")]),hf(uo.prototype,{ya:{name:"addScope",j:[rf("scope")]},Ga:{name:"setCustomParameters",j:[af("customOAuthParameters")]}}),df(uo,"credential",co,[ff(rf(),ff(af(),uf()),"idToken"),ff(rf(),uf(),"accessToken",!0)]),hf(lo.prototype,{Ga:{name:"setCustomParameters",j:[af("customOAuthParameters")]}}),df(lo,"credential",fo,[ff(rf(),af(),"token"),rf("secret",!0)]),hf(ro.prototype,{ya:{name:"addScope",j:[rf("scope")]},credential:{name:"credential",j:[ff(rf(),ff(af(),uf()),"optionsOrIdToken"),ff(rf(),uf(),"accessToken",!0)]},Ga:{name:"setCustomParameters",j:[af("customOAuthParameters")]}}),hf(Ji.prototype,{A:{name:"toJSON",j:[rf(null,!0)]}}),hf(Yi.prototype,{A:{name:"toJSON",j:[rf(null,!0)]}}),df(wo,"credential",Eo,[rf("verificationId"),rf("verificationCode")]),hf(wo.prototype,{Wa:{name:"verifyPhoneNumber",j:[rf("phoneNumber"),lf()]}}),hf(mo.prototype,{A:{name:"toJSON",j:[rf(null,!0)]}}),hf(ei.prototype,{toJSON:{name:"toJSON",j:[rf(null,!0)]}}),hf(No.prototype,{toJSON:{name:"toJSON",j:[rf(null,!0)]}}),hf(Oo.prototype,{toJSON:{name:"toJSON",j:[rf(null,!0)]}}),hf(ef.prototype,{clear:{name:"clear",j:[]},render:{name:"render",j:[]},verify:{name:"verify",j:[]}}),df(ii,"parseLink",hi,[rf("link")]),function(){if(void 0===r.a||!r.a.INTERNAL||!r.a.INTERNAL.registerComponent)throw Error("Cannot find the firebase namespace; be sure to include firebase-app.js before this library.");var e={ActionCodeInfo:{Operation:{EMAIL_SIGNIN:Qr,PASSWORD_RESET:"PASSWORD_RESET",RECOVER_EMAIL:"RECOVER_EMAIL",VERIFY_EMAIL:"VERIFY_EMAIL"}},Auth:_l,AuthCredential:Ki,Error:ei};df(e,"EmailAuthProvider",vo,[]),df(e,"FacebookAuthProvider",io,[]),df(e,"GithubAuthProvider",ao,[]),df(e,"GoogleAuthProvider",uo,[]),df(e,"TwitterAuthProvider",lo,[]),df(e,"OAuthProvider",ro,[rf("providerId")]),df(e,"SAMLAuthProvider",no,[rf("providerId")]),df(e,"PhoneAuthProvider",wo,[{name:"auth",M:"an instance of Firebase Auth",optional:!0,N:function(e){return!!(e&&e instanceof _l)}}]),df(e,"RecaptchaVerifier",ef,[ff(rf(),{name:"",M:"an HTML element",optional:!1,N:function(e){return!!(e&&e instanceof Element)}},"recaptchaContainer"),af("recaptchaParameters",!0),{name:"app",M:"an instance of Firebase App",optional:!0,N:function(e){return!!(e&&e instanceof r.a.app.App)}}]),df(e,"ActionCodeURL",ii,[]),r.a.INTERNAL.registerComponent({name:"auth",instanceFactory:function(e){return new _l(e=e.getProvider("app").getImmediate())},multipleInstances:!1,serviceProps:e,instantiationMode:"LAZY",type:"PUBLIC"}),r.a.INTERNAL.registerComponent({name:"auth-internal",instanceFactory:function(e){return{getUid:C((e=e.getProvider("auth").getImmediate()).getUid,e),getToken:C(e.cc,e),addAuthTokenListener:C(e.Wb,e),removeAuthTokenListener:C(e.Ec,e)}},multipleInstances:!1,instantiationMode:"LAZY",type:"PRIVATE"}),r.a.registerVersion("@firebase/auth","0.13.3"),r.a.INTERNAL.extendNamespace({User:Mc})}()}).apply(void 0!==e?e:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})}).call(this,n(51))},function(e,t,n){"use strict";n.r(t);n(376)},function(e,t,n){"use strict";(function(r){Object.defineProperty(t,"__esModule",{value:!0});var i,o,a=(i=n(2))&&"object"==typeof i&&"default"in i?i.default:i,s=n(78),u=n(110),c=n(154),l=n(153),f=function(){function e(e){this.domStorage_=e,this.prefix_="firebase:"}return e.prototype.set=function(e,t){null==t?this.domStorage_.removeItem(this.prefixedName_(e)):this.domStorage_.setItem(this.prefixedName_(e),u.stringify(t))},e.prototype.get=function(e){var t=this.domStorage_.getItem(this.prefixedName_(e));return null==t?null:u.jsonEval(t)},e.prototype.remove=function(e){this.domStorage_.removeItem(this.prefixedName_(e))},e.prototype.prefixedName_=function(e){return this.prefix_+e},e.prototype.toString=function(){return this.domStorage_.toString()},e}(),h=function(){function e(){this.cache_={},this.isInMemoryStorage=!0}return e.prototype.set=function(e,t){null==t?delete this.cache_[e]:this.cache_[e]=t},e.prototype.get=function(e){return u.contains(this.cache_,e)?this.cache_[e]:null},e.prototype.remove=function(e){delete this.cache_[e]},e}(),p=function(e){try{if("undefined"!=typeof window&&void 0!==window[e]){var t=window[e];return t.setItem("firebase:sentinel","cache"),t.removeItem("firebase:sentinel"),new f(t)}}catch(e){}return new h},d=p("localStorage"),v=p("sessionStorage"),y=new c.Logger("@firebase/database"),g=(o=1,function(){return o++}),m=function(e){var t=u.stringToByteArray(e),n=new u.Sha1;n.update(t);var r=n.digest();return u.base64.encodeByteArray(r)},b=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];for(var n="",r=0;r<e.length;r++){var i=e[r];Array.isArray(i)||i&&"object"==typeof i&&"number"==typeof i.length?n+=b.apply(null,i):n+="object"==typeof i?u.stringify(i):i,n+=" "}return n},_=null,w=!0,E=function(e,t){u.assert(!t||!0===e||!1===e,"Can't turn on custom loggers persistently."),!0===e?(y.logLevel=c.LogLevel.VERBOSE,_=y.log.bind(y),t&&v.set("logging_enabled",!0)):"function"==typeof e?_=e:(_=null,v.remove("logging_enabled"))},S=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];if(!0===w&&(w=!1,null===_&&!0===v.get("logging_enabled")&&E(!0)),_){var n=b.apply(null,e);_(n)}},C=function(e){return function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];S.apply(void 0,s.__spread([e],t))}},T=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE INTERNAL ERROR: "+b.apply(void 0,s.__spread(e));y.error(n)},k=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE FATAL ERROR: "+b.apply(void 0,s.__spread(e));throw y.error(n),new Error(n)},x=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="FIREBASE WARNING: "+b.apply(void 0,s.__spread(e));y.warn(n)},I=function(e){return"number"==typeof e&&(e!=e||e===Number.POSITIVE_INFINITY||e===Number.NEGATIVE_INFINITY)},P="[MIN_NAME]",O="[MAX_NAME]",N=function(e,t){if(e===t)return 0;if(e===P||t===O)return-1;if(t===P||e===O)return 1;var n=U(e),r=U(t);return null!==n?null!==r?n-r==0?e.length-t.length:n-r:-1:null!==r?1:e<t?-1:1},A=function(e,t){return e===t?0:e<t?-1:1},R=function(e,t){if(t&&e in t)return t[e];throw new Error("Missing required key ("+e+") in object: "+u.stringify(t))},D=function(e){if("object"!=typeof e||null===e)return u.stringify(e);var t=[];for(var n in e)t.push(n);t.sort();for(var r="{",i=0;i<t.length;i++)0!==i&&(r+=","),r+=u.stringify(t[i]),r+=":",r+=D(e[t[i]]);return r+="}"},M=function(e,t){var n=e.length;if(n<=t)return[e];for(var r=[],i=0;i<n;i+=t)i+t>n?r.push(e.substring(i,n)):r.push(e.substring(i,i+t));return r};function L(e,t){for(var n in e)e.hasOwnProperty(n)&&t(n,e[n])}var F=function(e){u.assert(!I(e),"Invalid JSON number");var t,n,r,i,o;0===e?(n=0,r=0,t=1/e==-1/0?1:0):(t=e<0,(e=Math.abs(e))>=Math.pow(2,-1022)?(n=(i=Math.min(Math.floor(Math.log(e)/Math.LN2),1023))+1023,r=Math.round(e*Math.pow(2,52-i)-Math.pow(2,52))):(n=0,r=Math.round(e/Math.pow(2,-1074))));var a=[];for(o=52;o;o-=1)a.push(r%2?1:0),r=Math.floor(r/2);for(o=11;o;o-=1)a.push(n%2?1:0),n=Math.floor(n/2);a.push(t?1:0),a.reverse();var s=a.join(""),c="";for(o=0;o<64;o+=8){var l=parseInt(s.substr(o,8),2).toString(16);1===l.length&&(l="0"+l),c+=l}return c.toLowerCase()},j=new RegExp("^-?(0*)\\d{1,10}$"),U=function(e){if(j.test(e)){var t=Number(e);if(t>=-2147483648&&t<=2147483647)return t}return null},W=function(e){try{e()}catch(e){setTimeout((function(){var t=e.stack||"";throw x("Exception was thrown by user callback.",t),e}),Math.floor(0))}},V=function(e,t){var n=setTimeout(e,t);return"object"==typeof n&&n.unref&&n.unref(),n},q=function(){function e(e,t){if(void 0===t){this.pieces_=e.split("/");for(var n=0,r=0;r<this.pieces_.length;r++)this.pieces_[r].length>0&&(this.pieces_[n]=this.pieces_[r],n++);this.pieces_.length=n,this.pieceNum_=0}else this.pieces_=e,this.pieceNum_=t}return Object.defineProperty(e,"Empty",{get:function(){return new e("")},enumerable:!0,configurable:!0}),e.prototype.getFront=function(){return this.pieceNum_>=this.pieces_.length?null:this.pieces_[this.pieceNum_]},e.prototype.getLength=function(){return this.pieces_.length-this.pieceNum_},e.prototype.popFront=function(){var t=this.pieceNum_;return t<this.pieces_.length&&t++,new e(this.pieces_,t)},e.prototype.getBack=function(){return this.pieceNum_<this.pieces_.length?this.pieces_[this.pieces_.length-1]:null},e.prototype.toString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+this.pieces_[t]);return e||"/"},e.prototype.toUrlEncodedString=function(){for(var e="",t=this.pieceNum_;t<this.pieces_.length;t++)""!==this.pieces_[t]&&(e+="/"+encodeURIComponent(String(this.pieces_[t])));return e||"/"},e.prototype.slice=function(e){return void 0===e&&(e=0),this.pieces_.slice(this.pieceNum_+e)},e.prototype.parent=function(){if(this.pieceNum_>=this.pieces_.length)return null;for(var t=[],n=this.pieceNum_;n<this.pieces_.length-1;n++)t.push(this.pieces_[n]);return new e(t,0)},e.prototype.child=function(t){for(var n=[],r=this.pieceNum_;r<this.pieces_.length;r++)n.push(this.pieces_[r]);if(t instanceof e)for(r=t.pieceNum_;r<t.pieces_.length;r++)n.push(t.pieces_[r]);else{var i=t.split("/");for(r=0;r<i.length;r++)i[r].length>0&&n.push(i[r])}return new e(n,0)},e.prototype.isEmpty=function(){return this.pieceNum_>=this.pieces_.length},e.relativePath=function(t,n){var r=t.getFront(),i=n.getFront();if(null===r)return n;if(r===i)return e.relativePath(t.popFront(),n.popFront());throw new Error("INTERNAL ERROR: innerPath ("+n+") is not within outerPath ("+t+")")},e.comparePaths=function(e,t){for(var n=e.slice(),r=t.slice(),i=0;i<n.length&&i<r.length;i++){var o=N(n[i],r[i]);if(0!==o)return o}return n.length===r.length?0:n.length<r.length?-1:1},e.prototype.equals=function(e){if(this.getLength()!==e.getLength())return!1;for(var t=this.pieceNum_,n=e.pieceNum_;t<=this.pieces_.length;t++,n++)if(this.pieces_[t]!==e.pieces_[n])return!1;return!0},e.prototype.contains=function(e){var t=this.pieceNum_,n=e.pieceNum_;if(this.getLength()>e.getLength())return!1;for(;t<this.pieces_.length;){if(this.pieces_[t]!==e.pieces_[n])return!1;++t,++n}return!0},e}(),B=function(){function e(e,t){this.errorPrefix_=t,this.parts_=e.slice(),this.byteLength_=Math.max(1,this.parts_.length);for(var n=0;n<this.parts_.length;n++)this.byteLength_+=u.stringLength(this.parts_[n]);this.checkValid_()}return Object.defineProperty(e,"MAX_PATH_DEPTH",{get:function(){return 32},enumerable:!0,configurable:!0}),Object.defineProperty(e,"MAX_PATH_LENGTH_BYTES",{get:function(){return 768},enumerable:!0,configurable:!0}),e.prototype.push=function(e){this.parts_.length>0&&(this.byteLength_+=1),this.parts_.push(e),this.byteLength_+=u.stringLength(e),this.checkValid_()},e.prototype.pop=function(){var e=this.parts_.pop();this.byteLength_-=u.stringLength(e),this.parts_.length>0&&(this.byteLength_-=1)},e.prototype.checkValid_=function(){if(this.byteLength_>e.MAX_PATH_LENGTH_BYTES)throw new Error(this.errorPrefix_+"has a key path longer than "+e.MAX_PATH_LENGTH_BYTES+" bytes ("+this.byteLength_+").");if(this.parts_.length>e.MAX_PATH_DEPTH)throw new Error(this.errorPrefix_+"path specified exceeds the maximum depth that can be written ("+e.MAX_PATH_DEPTH+") or object contains a cycle "+this.toErrorString())},e.prototype.toErrorString=function(){return 0===this.parts_.length?"":"in property '"+this.parts_.join(".")+"'"},e}(),H=function(){function e(e,t,n,r,i,o){void 0===i&&(i=""),void 0===o&&(o=!1),this.secure=t,this.namespace=n,this.webSocketOnly=r,this.persistenceKey=i,this.includeNamespaceInQueryParams=o,this.host=e.toLowerCase(),this.domain=this.host.substr(this.host.indexOf(".")+1),this.internalHost=d.get("host:"+e)||this.host}return e.prototype.needsQueryParam=function(){return this.host!==this.internalHost||this.isCustomHost()||this.includeNamespaceInQueryParams},e.prototype.isCacheableHost=function(){return"s-"===this.internalHost.substr(0,2)},e.prototype.isDemoHost=function(){return"firebaseio-demo.com"===this.domain},e.prototype.isCustomHost=function(){return"firebaseio.com"!==this.domain&&"firebaseio-demo.com"!==this.domain},e.prototype.updateHost=function(e){e!==this.internalHost&&(this.internalHost=e,this.isCacheableHost()&&d.set("host:"+this.host,this.internalHost))},e.prototype.connectionURL=function(e,t){var n;if(u.assert("string"==typeof e,"typeof type must == string"),u.assert("object"==typeof t,"typeof params must == object"),"websocket"===e)n=(this.secure?"wss://":"ws://")+this.internalHost+"/.ws?";else{if("long_polling"!==e)throw new Error("Unknown connection type: "+e);n=(this.secure?"https://":"http://")+this.internalHost+"/.lp?"}this.needsQueryParam()&&(t.ns=this.namespace);var r=[];return L(t,(function(e,t){r.push(e+"="+t)})),n+r.join("&")},e.prototype.toString=function(){var e=this.toURLString();return this.persistenceKey&&(e+="<"+this.persistenceKey+">"),e},e.prototype.toURLString=function(){return(this.secure?"https://":"http://")+this.host},e}();var z,Q,K,G,Y,$=function(e){var t=X(e),n=t.namespace;"firebase"===t.domain&&k(t.host+" is no longer supported. Please use <YOUR FIREBASE>.firebaseio.com instead"),n&&"undefined"!==n||"localhost"===t.domain||k("Cannot parse Firebase url. Please use https://<YOUR FIREBASE>.firebaseio.com"),t.secure||"undefined"!=typeof window&&window.location&&window.location.protocol&&-1!==window.location.protocol.indexOf("https:")&&x("Insecure Firebase access from a secure page. Please use https in calls to new Firebase().");var r="ws"===t.scheme||"wss"===t.scheme;return{repoInfo:new H(t.host,t.secure,n,r,"",n!==t.subdomain),path:new q(t.pathString)}},X=function(e){var t="",n="",r="",i="",o="",a=!0,u="https",c=443;if("string"==typeof e){var l=e.indexOf("//");l>=0&&(u=e.substring(0,l-1),e=e.substring(l+2));var f=e.indexOf("/");-1===f&&(f=e.length);var h=e.indexOf("?");-1===h&&(h=e.length),t=e.substring(0,Math.min(f,h)),f<h&&(i=
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function(e){for(var t="",n=e.split("/"),r=0;r<n.length;r++)if(n[r].length>0){var i=n[r];try{i=decodeURIComponent(i.replace(/\+/g," "))}catch(e){}t+="/"+i}return t}(e.substring(f,h)));var p=function(e){var t,n,r={};"?"===e.charAt(0)&&(e=e.substring(1));try{for(var i=s.__values(e.split("&")),o=i.next();!o.done;o=i.next()){var a=o.value;if(0!==a.length){var u=a.split("=");2===u.length?r[decodeURIComponent(u[0])]=decodeURIComponent(u[1]):x("Invalid query segment '"+a+"' in query '"+e+"'")}}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r}(e.substring(Math.min(e.length,h)));(l=t.indexOf(":"))>=0?(a="https"===u||"wss"===u,c=parseInt(t.substring(l+1),10)):l=e.length;var d=t.split(".");3===d.length?(n=d[1],o=r=d[0].toLowerCase()):2===d.length?n=d[0]:"localhost"===d[0].slice(0,l).toLowerCase()&&(n="localhost"),"ns"in p&&(o=p.ns)}return{host:t,port:c,domain:n,subdomain:r,secure:a,scheme:u,pathString:i,namespace:o}},J=/[\[\].#$\/\u0000-\u001F\u007F]/,Z=/[\[\].#$\u0000-\u001F\u007F]/,ee=function(e){return"string"==typeof e&&0!==e.length&&!J.test(e)},te=function(e){return"string"==typeof e&&0!==e.length&&!Z.test(e)},ne=function(e){return null===e||"string"==typeof e||"number"==typeof e&&!I(e)||e&&"object"==typeof e&&u.contains(e,".sv")},re=function(e,t,n,r,i){i&&void 0===n||ie(u.errorPrefix(e,t,i),n,r)},ie=function(e,t,n){var r=n instanceof q?new B(n,e):n;if(void 0===t)throw new Error(e+"contains undefined "+r.toErrorString());if("function"==typeof t)throw new Error(e+"contains a function "+r.toErrorString()+" with contents = "+t.toString());if(I(t))throw new Error(e+"contains "+t.toString()+" "+r.toErrorString());if("string"==typeof t&&t.length>10485760/3&&u.stringLength(t)>10485760)throw new Error(e+"contains a string greater than 10485760 utf8 bytes "+r.toErrorString()+" ('"+t.substring(0,50)+"...')");if(t&&"object"==typeof t){var i=!1,o=!1;if(L(t,(function(t,n){if(".value"===t)i=!0;else if(".priority"!==t&&".sv"!==t&&(o=!0,!ee(t)))throw new Error(e+" contains an invalid key ("+t+") "+r.toErrorString()+'.  Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');r.push(t),ie(e,n,r),r.pop()})),i&&o)throw new Error(e+' contains ".value" child '+r.toErrorString()+" in addition to actual children.")}},oe=function(e,t,n,r,i){if(!i||void 0!==n){var o=u.errorPrefix(e,t,i);if(!n||"object"!=typeof n||Array.isArray(n))throw new Error(o+" must be an object containing the children to replace.");var a=[];L(n,(function(e,t){var n=new q(e);if(ie(o,t,r.child(n)),".priority"===n.getBack()&&!ne(t))throw new Error(o+"contains an invalid value for '"+n.toString()+"', which must be a valid Firebase priority (a string, finite number, server value, or null).");a.push(n)})),function(e,t){var n,r;for(n=0;n<t.length;n++)for(var i=(r=t[n]).slice(),o=0;o<i.length;o++)if(".priority"===i[o]&&o===i.length-1);else if(!ee(i[o]))throw new Error(e+"contains an invalid key ("+i[o]+") in path "+r.toString()+'. Keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]"');t.sort(q.comparePaths);var a=null;for(n=0;n<t.length;n++){if(r=t[n],null!==a&&a.contains(r))throw new Error(e+"contains a path "+a.toString()+" that is ancestor of another path "+r.toString());a=r}}(o,a)}},ae=function(e,t,n,r){if(!r||void 0!==n){if(I(n))throw new Error(u.errorPrefix(e,t,r)+"is "+n.toString()+", but must be a valid Firebase priority (a string, finite number, server value, or null).");if(!ne(n))throw new Error(u.errorPrefix(e,t,r)+"must be a valid Firebase priority (a string, finite number, server value, or null).")}},se=function(e,t,n,r){if(!r||void 0!==n)switch(n){case"value":case"child_added":case"child_removed":case"child_changed":case"child_moved":break;default:throw new Error(u.errorPrefix(e,t,r)+'must be a valid event type = "value", "child_added", "child_removed", "child_changed", or "child_moved".')}},ue=function(e,t,n,r){if(!(r&&void 0===n||ee(n)))throw new Error(u.errorPrefix(e,t,r)+'was an invalid key = "'+n+'".  Firebase keys must be non-empty strings and can\'t contain ".", "#", "$", "/", "[", or "]").')},ce=function(e,t,n,r){if(!(r&&void 0===n||te(n)))throw new Error(u.errorPrefix(e,t,r)+'was an invalid path = "'+n+'". Paths must be non-empty strings and can\'t contain ".", "#", "$", "[", or "]"')},le=function(e,t,n,r){n&&(n=n.replace(/^\/*\.info(\/|$)/,"/")),ce(e,t,n,r)},fe=function(e,t){if(".info"===t.getFront())throw new Error(e+" failed = Can't modify data under /.info/")},he=function(e,t,n){var r=n.path.toString();if("string"!=typeof n.repoInfo.host||0===n.repoInfo.host.length||!ee(n.repoInfo.namespace)&&"localhost"!==n.repoInfo.host.split(":")[0]||0!==r.length&&!function(e){return e&&(e=e.replace(/^\/*\.info(\/|$)/,"/")),te(e)}(r))throw new Error(u.errorPrefix(e,t,!1)+'must be a valid firebase URL and the path can\'t contain ".", "#", "$", "[", or "]".')},pe=function(e,t,n,r){if((!r||void 0!==n)&&"boolean"!=typeof n)throw new Error(u.errorPrefix(e,t,r)+"must be a boolean.")},de=function(){function e(e,t){this.repo_=e,this.path_=t}return e.prototype.cancel=function(e){u.validateArgCount("OnDisconnect.cancel",0,1,arguments.length),u.validateCallback("OnDisconnect.cancel",1,e,!0);var t=new u.Deferred;return this.repo_.onDisconnectCancel(this.path_,t.wrapCallback(e)),t.promise},e.prototype.remove=function(e){u.validateArgCount("OnDisconnect.remove",0,1,arguments.length),fe("OnDisconnect.remove",this.path_),u.validateCallback("OnDisconnect.remove",1,e,!0);var t=new u.Deferred;return this.repo_.onDisconnectSet(this.path_,null,t.wrapCallback(e)),t.promise},e.prototype.set=function(e,t){u.validateArgCount("OnDisconnect.set",1,2,arguments.length),fe("OnDisconnect.set",this.path_),re("OnDisconnect.set",1,e,this.path_,!1),u.validateCallback("OnDisconnect.set",2,t,!0);var n=new u.Deferred;return this.repo_.onDisconnectSet(this.path_,e,n.wrapCallback(t)),n.promise},e.prototype.setWithPriority=function(e,t,n){u.validateArgCount("OnDisconnect.setWithPriority",2,3,arguments.length),fe("OnDisconnect.setWithPriority",this.path_),re("OnDisconnect.setWithPriority",1,e,this.path_,!1),ae("OnDisconnect.setWithPriority",2,t,!1),u.validateCallback("OnDisconnect.setWithPriority",3,n,!0);var r=new u.Deferred;return this.repo_.onDisconnectSetWithPriority(this.path_,e,t,r.wrapCallback(n)),r.promise},e.prototype.update=function(e,t){if(u.validateArgCount("OnDisconnect.update",1,2,arguments.length),fe("OnDisconnect.update",this.path_),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,x("Passing an Array to firebase.database.onDisconnect().update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}oe("OnDisconnect.update",1,e,this.path_,!1),u.validateCallback("OnDisconnect.update",2,t,!0);var i=new u.Deferred;return this.repo_.onDisconnectUpdate(this.path_,e,i.wrapCallback(t)),i.promise},e}(),ve=function(){function e(e,t){this.committed=e,this.snapshot=t}return e.prototype.toJSON=function(){return u.validateArgCount("TransactionResult.toJSON",0,1,arguments.length),{committed:this.committed,snapshot:this.snapshot.toJSON()}},e}(),ye=(z="-0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ_abcdefghijklmnopqrstuvwxyz",Q=0,K=[],function(e){var t,n=e===Q;Q=e;var r=new Array(8);for(t=7;t>=0;t--)r[t]=z.charAt(e%64),e=Math.floor(e/64);u.assert(0===e,"Cannot push at time == 0");var i=r.join("");if(n){for(t=11;t>=0&&63===K[t];t--)K[t]=0;K[t]++}else for(t=0;t<12;t++)K[t]=Math.floor(64*Math.random());for(t=0;t<12;t++)i+=z.charAt(K[t]);return u.assert(20===i.length,"nextPushId: Length should be 20."),i}),ge=function(){function e(e,t){this.name=e,this.node=t}return e.Wrap=function(t,n){return new e(t,n)},e}(),me=function(){function e(){}return e.prototype.getCompare=function(){return this.compare.bind(this)},e.prototype.indexedValueChanged=function(e,t){var n=new ge(P,e),r=new ge(P,t);return 0!==this.compare(n,r)},e.prototype.minPost=function(){return ge.MIN},e}(),be=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),Object.defineProperty(t,"__EMPTY_NODE",{get:function(){return G},set:function(e){G=e},enumerable:!0,configurable:!0}),t.prototype.compare=function(e,t){return N(e.name,t.name)},t.prototype.isDefinedOn=function(e){throw u.assertionError("KeyIndex.isDefinedOn not expected to be called.")},t.prototype.indexedValueChanged=function(e,t){return!1},t.prototype.minPost=function(){return ge.MIN},t.prototype.maxPost=function(){return new ge(O,G)},t.prototype.makePost=function(e,t){return u.assert("string"==typeof e,"KeyIndex indexValue must always be a string."),new ge(e,G)},t.prototype.toString=function(){return".key"},t}(me),_e=new be;var we,Ee,Se,Ce=function(e){return"number"==typeof e?"number:"+F(e):"string:"+e},Te=function(e){if(e.isLeafNode()){var t=e.val();u.assert("string"==typeof t||"number"==typeof t||"object"==typeof t&&u.contains(t,".sv"),"Priority must be a string or number.")}else u.assert(e===Y||e.isEmpty(),"priority of unexpected type.");u.assert(e===Y||e.getPriority().isEmpty(),"Priority nodes can't have a priority of their own.")},ke=function(){function e(t,n){void 0===n&&(n=e.__childrenNodeConstructor.EMPTY_NODE),this.value_=t,this.priorityNode_=n,this.lazyHash_=null,u.assert(void 0!==this.value_&&null!==this.value_,"LeafNode shouldn't be created with null/undefined value."),Te(this.priorityNode_)}return Object.defineProperty(e,"__childrenNodeConstructor",{get:function(){return we},set:function(e){we=e},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!0},e.prototype.getPriority=function(){return this.priorityNode_},e.prototype.updatePriority=function(t){return new e(this.value_,t)},e.prototype.getImmediateChild=function(t){return".priority"===t?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.getChild=function(t){return t.isEmpty()?this:".priority"===t.getFront()?this.priorityNode_:e.__childrenNodeConstructor.EMPTY_NODE},e.prototype.hasChild=function(){return!1},e.prototype.getPredecessorChildName=function(e,t){return null},e.prototype.updateImmediateChild=function(t,n){return".priority"===t?this.updatePriority(n):n.isEmpty()&&".priority"!==t?this:e.__childrenNodeConstructor.EMPTY_NODE.updateImmediateChild(t,n).updatePriority(this.priorityNode_)},e.prototype.updateChild=function(t,n){var r=t.getFront();return null===r?n:n.isEmpty()&&".priority"!==r?this:(u.assert(".priority"!==r||1===t.getLength(),".priority must be the last token in a path"),this.updateImmediateChild(r,e.__childrenNodeConstructor.EMPTY_NODE.updateChild(t.popFront(),n)))},e.prototype.isEmpty=function(){return!1},e.prototype.numChildren=function(){return 0},e.prototype.forEachChild=function(e,t){return!1},e.prototype.val=function(e){return e&&!this.getPriority().isEmpty()?{".value":this.getValue(),".priority":this.getPriority().val()}:this.getValue()},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.priorityNode_.isEmpty()||(e+="priority:"+Ce(this.priorityNode_.val())+":");var t=typeof this.value_;e+=t+":",e+="number"===t?F(this.value_):this.value_,this.lazyHash_=m(e)}return this.lazyHash_},e.prototype.getValue=function(){return this.value_},e.prototype.compareTo=function(t){return t===e.__childrenNodeConstructor.EMPTY_NODE?1:t instanceof e.__childrenNodeConstructor?-1:(u.assert(t.isLeafNode(),"Unknown node type"),this.compareToLeafNode_(t))},e.prototype.compareToLeafNode_=function(t){var n=typeof t.value_,r=typeof this.value_,i=e.VALUE_TYPE_ORDER.indexOf(n),o=e.VALUE_TYPE_ORDER.indexOf(r);return u.assert(i>=0,"Unknown leaf type: "+n),u.assert(o>=0,"Unknown leaf type: "+r),i===o?"object"===r?0:this.value_<t.value_?-1:this.value_===t.value_?0:1:o-i},e.prototype.withIndex=function(){return this},e.prototype.isIndexed=function(){return!0},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode()){var t=e;return this.value_===t.value_&&this.priorityNode_.equals(t.priorityNode_)}return!1},e.VALUE_TYPE_ORDER=["object","boolean","number","string"],e}();var xe,Ie,Pe=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.getPriority(),r=t.node.getPriority(),i=n.compareTo(r);return 0===i?N(e.name,t.name):i},t.prototype.isDefinedOn=function(e){return!e.getPriority().isEmpty()},t.prototype.indexedValueChanged=function(e,t){return!e.getPriority().equals(t.getPriority())},t.prototype.minPost=function(){return ge.MIN},t.prototype.maxPost=function(){return new ge(O,new ke("[PRIORITY-POST]",Se))},t.prototype.makePost=function(e,t){var n=Ee(e);return new ge(t,new ke("[PRIORITY-POST]",n))},t.prototype.toString=function(){return".priority"},t}(me)),Oe=function(){function e(e,t,n,r,i){void 0===i&&(i=null),this.isReverse_=r,this.resultGenerator_=i,this.nodeStack_=[];for(var o=1;!e.isEmpty();)if(e=e,o=t?n(e.key,t):1,r&&(o*=-1),o<0)e=this.isReverse_?e.left:e.right;else{if(0===o){this.nodeStack_.push(e);break}this.nodeStack_.push(e),e=this.isReverse_?e.right:e.left}}return e.prototype.getNext=function(){if(0===this.nodeStack_.length)return null;var e,t=this.nodeStack_.pop();if(e=this.resultGenerator_?this.resultGenerator_(t.key,t.value):{key:t.key,value:t.value},this.isReverse_)for(t=t.left;!t.isEmpty();)this.nodeStack_.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack_.push(t),t=t.left;return e},e.prototype.hasNext=function(){return this.nodeStack_.length>0},e.prototype.peek=function(){if(0===this.nodeStack_.length)return null;var e=this.nodeStack_[this.nodeStack_.length-1];return this.resultGenerator_?this.resultGenerator_(e.key,e.value):{key:e.key,value:e.value}},e}(),Ne=function(){function e(t,n,r,i,o){this.key=t,this.value=n,this.color=null!=r?r:e.RED,this.left=null!=i?i:Re.EMPTY_NODE,this.right=null!=o?o:Re.EMPTY_NODE}return e.prototype.copy=function(t,n,r,i,o){return new e(null!=t?t:this.key,null!=n?n:this.value,null!=r?r:this.color,null!=i?i:this.left,null!=o?o:this.right)},e.prototype.count=function(){return this.left.count()+1+this.right.count()},e.prototype.isEmpty=function(){return!1},e.prototype.inorderTraversal=function(e){return this.left.inorderTraversal(e)||!!e(this.key,this.value)||this.right.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.right.reverseTraversal(e)||e(this.key,this.value)||this.left.reverseTraversal(e)},e.prototype.min_=function(){return this.left.isEmpty()?this:this.left.min_()},e.prototype.minKey=function(){return this.min_().key},e.prototype.maxKey=function(){return this.right.isEmpty()?this.key:this.right.maxKey()},e.prototype.insert=function(e,t,n){var r=this,i=n(e,r.key);return(r=i<0?r.copy(null,null,null,r.left.insert(e,t,n),null):0===i?r.copy(null,t,null,null,null):r.copy(null,null,null,null,r.right.insert(e,t,n))).fixUp_()},e.prototype.removeMin_=function(){if(this.left.isEmpty())return Re.EMPTY_NODE;var e=this;return e.left.isRed_()||e.left.left.isRed_()||(e=e.moveRedLeft_()),(e=e.copy(null,null,null,e.left.removeMin_(),null)).fixUp_()},e.prototype.remove=function(e,t){var n,r;if(t(e,(n=this).key)<0)n.left.isEmpty()||n.left.isRed_()||n.left.left.isRed_()||(n=n.moveRedLeft_()),n=n.copy(null,null,null,n.left.remove(e,t),null);else{if(n.left.isRed_()&&(n=n.rotateRight_()),n.right.isEmpty()||n.right.isRed_()||n.right.left.isRed_()||(n=n.moveRedRight_()),0===t(e,n.key)){if(n.right.isEmpty())return Re.EMPTY_NODE;r=n.right.min_(),n=n.copy(r.key,r.value,null,null,n.right.removeMin_())}n=n.copy(null,null,null,null,n.right.remove(e,t))}return n.fixUp_()},e.prototype.isRed_=function(){return this.color},e.prototype.fixUp_=function(){var e=this;return e.right.isRed_()&&!e.left.isRed_()&&(e=e.rotateLeft_()),e.left.isRed_()&&e.left.left.isRed_()&&(e=e.rotateRight_()),e.left.isRed_()&&e.right.isRed_()&&(e=e.colorFlip_()),e},e.prototype.moveRedLeft_=function(){var e=this.colorFlip_();return e.right.left.isRed_()&&(e=(e=(e=e.copy(null,null,null,null,e.right.rotateRight_())).rotateLeft_()).colorFlip_()),e},e.prototype.moveRedRight_=function(){var e=this.colorFlip_();return e.left.left.isRed_()&&(e=(e=e.rotateRight_()).colorFlip_()),e},e.prototype.rotateLeft_=function(){var t=this.copy(null,null,e.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)},e.prototype.rotateRight_=function(){var t=this.copy(null,null,e.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)},e.prototype.colorFlip_=function(){var e=this.left.copy(null,null,!this.left.color,null,null),t=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,e,t)},e.prototype.checkMaxDepth_=function(){var e=this.check_();return Math.pow(2,e)<=this.count()+1},e.prototype.check_=function(){if(this.isRed_()&&this.left.isRed_())throw new Error("Red node has red child("+this.key+","+this.value+")");if(this.right.isRed_())throw new Error("Right child of ("+this.key+","+this.value+") is red");var e=this.left.check_();if(e!==this.right.check_())throw new Error("Black depths differ");return e+(this.isRed_()?0:1)},e.RED=!0,e.BLACK=!1,e}(),Ae=function(){function e(){}return e.prototype.copy=function(e,t,n,r,i){return this},e.prototype.insert=function(e,t,n){return new Ne(e,t,null)},e.prototype.remove=function(e,t){return this},e.prototype.count=function(){return 0},e.prototype.isEmpty=function(){return!0},e.prototype.inorderTraversal=function(e){return!1},e.prototype.reverseTraversal=function(e){return!1},e.prototype.minKey=function(){return null},e.prototype.maxKey=function(){return null},e.prototype.check_=function(){return 0},e.prototype.isRed_=function(){return!1},e}(),Re=function(){function e(t,n){void 0===n&&(n=e.EMPTY_NODE),this.comparator_=t,this.root_=n}return e.prototype.insert=function(t,n){return new e(this.comparator_,this.root_.insert(t,n,this.comparator_).copy(null,null,Ne.BLACK,null,null))},e.prototype.remove=function(t){return new e(this.comparator_,this.root_.remove(t,this.comparator_).copy(null,null,Ne.BLACK,null,null))},e.prototype.get=function(e){for(var t,n=this.root_;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key)))return n.value;t<0?n=n.left:t>0&&(n=n.right)}return null},e.prototype.getPredecessorKey=function(e){for(var t,n=this.root_,r=null;!n.isEmpty();){if(0===(t=this.comparator_(e,n.key))){if(n.left.isEmpty())return r?r.key:null;for(n=n.left;!n.right.isEmpty();)n=n.right;return n.key}t<0?n=n.left:t>0&&(r=n,n=n.right)}throw new Error("Attempted to find predecessor key for a nonexistent key.  What gives?")},e.prototype.isEmpty=function(){return this.root_.isEmpty()},e.prototype.count=function(){return this.root_.count()},e.prototype.minKey=function(){return this.root_.minKey()},e.prototype.maxKey=function(){return this.root_.maxKey()},e.prototype.inorderTraversal=function(e){return this.root_.inorderTraversal(e)},e.prototype.reverseTraversal=function(e){return this.root_.reverseTraversal(e)},e.prototype.getIterator=function(e){return new Oe(this.root_,null,this.comparator_,!1,e)},e.prototype.getIteratorFrom=function(e,t){return new Oe(this.root_,e,this.comparator_,!1,t)},e.prototype.getReverseIteratorFrom=function(e,t){return new Oe(this.root_,e,this.comparator_,!0,t)},e.prototype.getReverseIterator=function(e){return new Oe(this.root_,null,this.comparator_,!0,e)},e.EMPTY_NODE=new Ae,e}(),De=Math.log(2),Me=function(){function e(e){var t;this.count=(t=e+1,parseInt(Math.log(t)/De,10)),this.current_=this.count-1;var n,r=(n=this.count,parseInt(Array(n+1).join("1"),2));this.bits_=e+1&r}return e.prototype.nextBitIsOne=function(){var e=!(this.bits_&1<<this.current_);return this.current_--,e},e}(),Le=function(e,t,n,r){e.sort(t);var i=function(t,r){var o,a,s=r-t;if(0===s)return null;if(1===s)return o=e[t],a=n?n(o):o,new Ne(a,o.node,Ne.BLACK,null,null);var u=parseInt(s/2,10)+t,c=i(t,u),l=i(u+1,r);return o=e[u],a=n?n(o):o,new Ne(a,o.node,Ne.BLACK,c,l)},o=function(t){for(var r=null,o=null,a=e.length,s=function(t,r){var o=a-t,s=a;a-=t;var c=i(o+1,s),l=e[o],f=n?n(l):l;u(new Ne(f,l.node,r,null,c))},u=function(e){r?(r.left=e,r=e):(o=e,r=e)},c=0;c<t.count;++c){var l=t.nextBitIsOne(),f=Math.pow(2,t.count-(c+1));l?s(f,Ne.BLACK):(s(f,Ne.BLACK),s(f,Ne.RED))}return o}(new Me(e.length));return new Re(r||t,o)},Fe={},je=function(){function e(e,t){this.indexes_=e,this.indexSet_=t}return Object.defineProperty(e,"Default",{get:function(){return u.assert(Fe&&Pe,"ChildrenNode.ts has not been loaded"),xe=xe||new e({".priority":Fe},{".priority":Pe})},enumerable:!0,configurable:!0}),e.prototype.get=function(e){var t=u.safeGet(this.indexes_,e);if(!t)throw new Error("No index defined for "+e);return t instanceof Re?t:null},e.prototype.hasIndex=function(e){return u.contains(this.indexSet_,e.toString())},e.prototype.addIndex=function(t,n){u.assert(t!==_e,"KeyIndex always exists and isn't meant to be added to the IndexMap.");for(var r,i=[],o=!1,a=n.getIterator(ge.Wrap),c=a.getNext();c;)o=o||t.isDefinedOn(c.node),i.push(c),c=a.getNext();r=o?Le(i,t.getCompare()):Fe;var l=t.toString(),f=s.__assign({},this.indexSet_);f[l]=t;var h=s.__assign({},this.indexes_);return h[l]=r,new e(h,f)},e.prototype.addToIndexes=function(t,n){var r=this;return new e(u.map(this.indexes_,(function(e,i){var o=u.safeGet(r.indexSet_,i);if(u.assert(o,"Missing index implementation for "+i),e===Fe){if(o.isDefinedOn(t.node)){for(var a=[],s=n.getIterator(ge.Wrap),c=s.getNext();c;)c.name!==t.name&&a.push(c),c=s.getNext();return a.push(t),Le(a,o.getCompare())}return Fe}var l=n.get(t.name),f=e;return l&&(f=f.remove(new ge(t.name,l))),f.insert(t,t.node)})),this.indexSet_)},e.prototype.removeFromIndexes=function(t,n){return new e(u.map(this.indexes_,(function(e){if(e===Fe)return e;var r=n.get(t.name);return r?e.remove(new ge(t.name,r)):e})),this.indexSet_)},e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ue(e,t){return N(e.name,t.name)}function We(e,t){return N(e,t)}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ve=function(){function e(e,t,n){this.children_=e,this.priorityNode_=t,this.indexMap_=n,this.lazyHash_=null,this.priorityNode_&&Te(this.priorityNode_),this.children_.isEmpty()&&u.assert(!this.priorityNode_||this.priorityNode_.isEmpty(),"An empty node cannot have a priority")}return Object.defineProperty(e,"EMPTY_NODE",{get:function(){return Ie||(Ie=new e(new Re(We),null,je.Default))},enumerable:!0,configurable:!0}),e.prototype.isLeafNode=function(){return!1},e.prototype.getPriority=function(){return this.priorityNode_||Ie},e.prototype.updatePriority=function(t){return this.children_.isEmpty()?this:new e(this.children_,t,this.indexMap_)},e.prototype.getImmediateChild=function(e){if(".priority"===e)return this.getPriority();var t=this.children_.get(e);return null===t?Ie:t},e.prototype.getChild=function(e){var t=e.getFront();return null===t?this:this.getImmediateChild(t).getChild(e.popFront())},e.prototype.hasChild=function(e){return null!==this.children_.get(e)},e.prototype.updateImmediateChild=function(t,n){if(u.assert(n,"We should always be passing snapshot nodes"),".priority"===t)return this.updatePriority(n);var r=new ge(t,n),i=void 0,o=void 0;n.isEmpty()?(i=this.children_.remove(t),o=this.indexMap_.removeFromIndexes(r,this.children_)):(i=this.children_.insert(t,n),o=this.indexMap_.addToIndexes(r,this.children_));var a=i.isEmpty()?Ie:this.priorityNode_;return new e(i,a,o)},e.prototype.updateChild=function(e,t){var n=e.getFront();if(null===n)return t;u.assert(".priority"!==e.getFront()||1===e.getLength(),".priority must be the last token in a path");var r=this.getImmediateChild(n).updateChild(e.popFront(),t);return this.updateImmediateChild(n,r)},e.prototype.isEmpty=function(){return this.children_.isEmpty()},e.prototype.numChildren=function(){return this.children_.count()},e.prototype.val=function(t){if(this.isEmpty())return null;var n={},r=0,i=0,o=!0;if(this.forEachChild(Pe,(function(a,s){n[a]=s.val(t),r++,o&&e.INTEGER_REGEXP_.test(a)?i=Math.max(i,Number(a)):o=!1})),!t&&o&&i<2*r){var a=[];for(var s in n)a[s]=n[s];return a}return t&&!this.getPriority().isEmpty()&&(n[".priority"]=this.getPriority().val()),n},e.prototype.hash=function(){if(null===this.lazyHash_){var e="";this.getPriority().isEmpty()||(e+="priority:"+Ce(this.getPriority().val())+":"),this.forEachChild(Pe,(function(t,n){var r=n.hash();""!==r&&(e+=":"+t+":"+r)})),this.lazyHash_=""===e?"":m(e)}return this.lazyHash_},e.prototype.getPredecessorChildName=function(e,t,n){var r=this.resolveIndex_(n);if(r){var i=r.getPredecessorKey(new ge(e,t));return i?i.name:null}return this.children_.getPredecessorKey(e)},e.prototype.getFirstChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.minKey();return n&&n.name}return this.children_.minKey()},e.prototype.getFirstChild=function(e){var t=this.getFirstChildName(e);return t?new ge(t,this.children_.get(t)):null},e.prototype.getLastChildName=function(e){var t=this.resolveIndex_(e);if(t){var n=t.maxKey();return n&&n.name}return this.children_.maxKey()},e.prototype.getLastChild=function(e){var t=this.getLastChildName(e);return t?new ge(t,this.children_.get(t)):null},e.prototype.forEachChild=function(e,t){var n=this.resolveIndex_(e);return n?n.inorderTraversal((function(e){return t(e.name,e.node)})):this.children_.inorderTraversal(t)},e.prototype.getIterator=function(e){return this.getIteratorFrom(e.minPost(),e)},e.prototype.getIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getIteratorFrom(e,(function(e){return e}));for(var r=this.children_.getIteratorFrom(e.name,ge.Wrap),i=r.peek();null!=i&&t.compare(i,e)<0;)r.getNext(),i=r.peek();return r},e.prototype.getReverseIterator=function(e){return this.getReverseIteratorFrom(e.maxPost(),e)},e.prototype.getReverseIteratorFrom=function(e,t){var n=this.resolveIndex_(t);if(n)return n.getReverseIteratorFrom(e,(function(e){return e}));for(var r=this.children_.getReverseIteratorFrom(e.name,ge.Wrap),i=r.peek();null!=i&&t.compare(i,e)>0;)r.getNext(),i=r.peek();return r},e.prototype.compareTo=function(e){return this.isEmpty()?e.isEmpty()?0:-1:e.isLeafNode()||e.isEmpty()?1:e===qe?-1:0},e.prototype.withIndex=function(t){if(t===_e||this.indexMap_.hasIndex(t))return this;var n=this.indexMap_.addIndex(t,this.children_);return new e(this.children_,this.priorityNode_,n)},e.prototype.isIndexed=function(e){return e===_e||this.indexMap_.hasIndex(e)},e.prototype.equals=function(e){if(e===this)return!0;if(e.isLeafNode())return!1;var t=e;if(this.getPriority().equals(t.getPriority())){if(this.children_.count()===t.children_.count()){for(var n=this.getIterator(Pe),r=t.getIterator(Pe),i=n.getNext(),o=r.getNext();i&&o;){if(i.name!==o.name||!i.node.equals(o.node))return!1;i=n.getNext(),o=r.getNext()}return null===i&&null===o}return!1}return!1},e.prototype.resolveIndex_=function(e){return e===_e?null:this.indexMap_.get(e.toString())},e.INTEGER_REGEXP_=/^(0|[1-9]\d*)$/,e}(),qe=new(function(e){function t(){return e.call(this,new Re(We),Ve.EMPTY_NODE,je.Default)||this}return s.__extends(t,e),t.prototype.compareTo=function(e){return e===this?0:1},t.prototype.equals=function(e){return e===this},t.prototype.getPriority=function(){return this},t.prototype.getImmediateChild=function(e){return Ve.EMPTY_NODE},t.prototype.isEmpty=function(){return!1},t}(Ve));Object.defineProperties(ge,{MIN:{value:new ge(P,Ve.EMPTY_NODE)},MAX:{value:new ge(O,qe)}}),be.__EMPTY_NODE=Ve.EMPTY_NODE,ke.__childrenNodeConstructor=Ve,Y=qe,function(e){Se=e}(qe);function Be(e,t){if(void 0===t&&(t=null),null===e)return Ve.EMPTY_NODE;if("object"==typeof e&&".priority"in e&&(t=e[".priority"]),u.assert(null===t||"string"==typeof t||"number"==typeof t||"object"==typeof t&&".sv"in t,"Invalid priority type found: "+typeof t),"object"==typeof e&&".value"in e&&null!==e[".value"]&&(e=e[".value"]),"object"!=typeof e||".sv"in e)return new ke(e,Be(t));if(e instanceof Array){var n=Ve.EMPTY_NODE;return L(e,(function(t,r){if(u.contains(e,t)&&"."!==t.substring(0,1)){var i=Be(r);!i.isLeafNode()&&i.isEmpty()||(n=n.updateImmediateChild(t,i))}})),n.updatePriority(Be(t))}var r=[],i=!1;if(L(e,(function(e,t){if("."!==e.substring(0,1)){var n=Be(t);n.isEmpty()||(i=i||!n.getPriority().isEmpty(),r.push(new ge(e,n)))}})),0===r.length)return Ve.EMPTY_NODE;var o=Le(r,Ue,(function(e){return e.name}),We);if(i){var a=Le(r,Pe.getCompare());return new Ve(o,Be(t),new je({".priority":a},{".priority":Pe}))}return new Ve(o,Be(t),je.Default)}!function(e){Ee=e}(Be);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var He,ze,Qe=new(function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s.__extends(t,e),t.prototype.compare=function(e,t){var n=e.node.compareTo(t.node);return 0===n?N(e.name,t.name):n},t.prototype.isDefinedOn=function(e){return!0},t.prototype.indexedValueChanged=function(e,t){return!e.equals(t)},t.prototype.minPost=function(){return ge.MIN},t.prototype.maxPost=function(){return ge.MAX},t.prototype.makePost=function(e,t){var n=Be(e);return new ge(t,n)},t.prototype.toString=function(){return".value"},t}(me)),Ke=function(e){function t(t){var n=e.call(this)||this;return n.indexPath_=t,u.assert(!t.isEmpty()&&".priority"!==t.getFront(),"Can't create PathIndex with empty path or .priority key"),n}return s.__extends(t,e),t.prototype.extractChild=function(e){return e.getChild(this.indexPath_)},t.prototype.isDefinedOn=function(e){return!e.getChild(this.indexPath_).isEmpty()},t.prototype.compare=function(e,t){var n=this.extractChild(e.node),r=this.extractChild(t.node),i=n.compareTo(r);return 0===i?N(e.name,t.name):i},t.prototype.makePost=function(e,t){var n=Be(e),r=Ve.EMPTY_NODE.updateChild(this.indexPath_,n);return new ge(t,r)},t.prototype.maxPost=function(){var e=Ve.EMPTY_NODE.updateChild(this.indexPath_,qe);return new ge(O,e)},t.prototype.toString=function(){return this.indexPath_.slice().join("/")},t}(me),Ge=function(){function e(e,t,n){this.node_=e,this.ref_=t,this.index_=n}return e.prototype.val=function(){return u.validateArgCount("DataSnapshot.val",0,0,arguments.length),this.node_.val()},e.prototype.exportVal=function(){return u.validateArgCount("DataSnapshot.exportVal",0,0,arguments.length),this.node_.val(!0)},e.prototype.toJSON=function(){return u.validateArgCount("DataSnapshot.toJSON",0,1,arguments.length),this.exportVal()},e.prototype.exists=function(){return u.validateArgCount("DataSnapshot.exists",0,0,arguments.length),!this.node_.isEmpty()},e.prototype.child=function(t){u.validateArgCount("DataSnapshot.child",0,1,arguments.length),t=String(t),ce("DataSnapshot.child",1,t,!1);var n=new q(t),r=this.ref_.child(n);return new e(this.node_.getChild(n),r,Pe)},e.prototype.hasChild=function(e){u.validateArgCount("DataSnapshot.hasChild",1,1,arguments.length),ce("DataSnapshot.hasChild",1,e,!1);var t=new q(e);return!this.node_.getChild(t).isEmpty()},e.prototype.getPriority=function(){return u.validateArgCount("DataSnapshot.getPriority",0,0,arguments.length),this.node_.getPriority().val()},e.prototype.forEach=function(t){var n=this;if(u.validateArgCount("DataSnapshot.forEach",1,1,arguments.length),u.validateCallback("DataSnapshot.forEach",1,t,!1),this.node_.isLeafNode())return!1;var r=this.node_;return!!r.forEachChild(this.index_,(function(r,i){return t(new e(i,n.ref_.child(r),Pe))}))},e.prototype.hasChildren=function(){return u.validateArgCount("DataSnapshot.hasChildren",0,0,arguments.length),!this.node_.isLeafNode()&&!this.node_.isEmpty()},Object.defineProperty(e.prototype,"key",{get:function(){return this.ref_.getKey()},enumerable:!0,configurable:!0}),e.prototype.numChildren=function(){return u.validateArgCount("DataSnapshot.numChildren",0,0,arguments.length),this.node_.numChildren()},e.prototype.getRef=function(){return u.validateArgCount("DataSnapshot.ref",0,0,arguments.length),this.ref_},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}(),Ye=function(){function e(e,t,n,r){this.eventType=e,this.eventRegistration=t,this.snapshot=n,this.prevName=r}return e.prototype.getPath=function(){var e=this.snapshot.getRef();return"value"===this.eventType?e.path:e.getParent().path},e.prototype.getEventType=function(){return this.eventType},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.getPath().toString()+":"+this.eventType+":"+u.stringify(this.snapshot.exportVal())},e}(),$e=function(){function e(e,t,n){this.eventRegistration=e,this.error=t,this.path=n}return e.prototype.getPath=function(){return this.path},e.prototype.getEventType=function(){return"cancel"},e.prototype.getEventRunner=function(){return this.eventRegistration.getEventRunner(this)},e.prototype.toString=function(){return this.path.toString()+":cancel"},e}(),Xe=function(){function e(e,t,n){this.callback_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){return"value"===e},e.prototype.createEvent=function(e,t){var n=t.getQueryParams().getIndex();return new Ye("value",this,new Ge(e.snapshotNode,t.getRef(),n))},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){u.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callback_;return function(){r.call(t,e.snapshot)}},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new $e(this,e,t):null},e.prototype.matches=function(t){return t instanceof e&&(!t.callback_||!this.callback_||t.callback_===this.callback_&&t.context_===this.context_)},e.prototype.hasAnyCallback=function(){return null!==this.callback_},e}(),Je=function(){function e(e,t,n){this.callbacks_=e,this.cancelCallback_=t,this.context_=n}return e.prototype.respondsTo=function(e){var t="children_added"===e?"child_added":e;return t="children_removed"===t?"child_removed":t,u.contains(this.callbacks_,t)},e.prototype.createCancelEvent=function(e,t){return this.cancelCallback_?new $e(this,e,t):null},e.prototype.createEvent=function(e,t){u.assert(null!=e.childName,"Child events should have a childName.");var n=t.getRef().child(e.childName),r=t.getQueryParams().getIndex();return new Ye(e.type,this,new Ge(e.snapshotNode,n,r),e.prevName)},e.prototype.getEventRunner=function(e){var t=this.context_;if("cancel"===e.getEventType()){u.assert(this.cancelCallback_,"Raising a cancel event on a listener with no cancel callback");var n=this.cancelCallback_;return function(){n.call(t,e.error)}}var r=this.callbacks_[e.eventType];return function(){r.call(t,e.snapshot,e.prevName)}},e.prototype.matches=function(t){var n=this;if(t instanceof e){if(!this.callbacks_||!t.callbacks_)return!0;if(this.context_===t.context_){var r=Object.keys(t.callbacks_),i=Object.keys(this.callbacks_),o=r.length;if(o===i.length){if(1===o){var a=r[0],s=i[0];return!(s!==a||t.callbacks_[a]&&this.callbacks_[s]&&t.callbacks_[a]!==this.callbacks_[s])}return i.every((function(e){return t.callbacks_[e]===n.callbacks_[e]}))}}}return!1},e.prototype.hasAnyCallback=function(){return null!==this.callbacks_},e}(),Ze=function(){function e(e,t,n,r){this.repo=e,this.path=t,this.queryParams_=n,this.orderByCalled_=r}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return u.assert(He,"Reference.ts has not been loaded"),He},set:function(e){He=e},enumerable:!0,configurable:!0}),e.validateQueryEndpoints_=function(e){var t=null,n=null;if(e.hasStart()&&(t=e.getIndexStartValue()),e.hasEnd()&&(n=e.getIndexEndValue()),e.getIndex()===_e){var r="Query: When ordering by key, you may only pass one argument to startAt(), endAt(), or equalTo().",i="Query: When ordering by key, the argument passed to startAt(), endAt(),or equalTo() must be a string.";if(e.hasStart()){if(e.getIndexStartName()!==P)throw new Error(r);if("string"!=typeof t)throw new Error(i)}if(e.hasEnd()){if(e.getIndexEndName()!==O)throw new Error(r);if("string"!=typeof n)throw new Error(i)}}else if(e.getIndex()===Pe){if(null!=t&&!ne(t)||null!=n&&!ne(n))throw new Error("Query: When ordering by priority, the first argument passed to startAt(), endAt(), or equalTo() must be a valid priority value (null, a number, or a string).")}else if(u.assert(e.getIndex()instanceof Ke||e.getIndex()===Qe,"unknown index type."),null!=t&&"object"==typeof t||null!=n&&"object"==typeof n)throw new Error("Query: First argument passed to startAt(), endAt(), or equalTo() cannot be an object.")},e.validateLimit_=function(e){if(e.hasStart()&&e.hasEnd()&&e.hasLimit()&&!e.hasAnchoredLimit())throw new Error("Query: Can't combine startAt(), endAt(), and limit(). Use limitToFirst() or limitToLast() instead.")},e.prototype.validateNoPreviousOrderByCall_=function(e){if(!0===this.orderByCalled_)throw new Error(e+": You can't combine multiple orderBy calls.")},e.prototype.getQueryParams=function(){return this.queryParams_},e.prototype.getRef=function(){return u.validateArgCount("Query.ref",0,0,arguments.length),new e.__referenceConstructor(this.repo,this.path)},e.prototype.on=function(t,n,r,i){u.validateArgCount("Query.on",2,4,arguments.length),se("Query.on",1,t,!1),u.validateCallback("Query.on",2,n,!1);var o=e.getCancelAndContextArgs_("Query.on",r,i);if("value"===t)this.onValueEvent(n,o.cancel,o.context);else{var a={};a[t]=n,this.onChildEvent(a,o.cancel,o.context)}return n},e.prototype.onValueEvent=function(e,t,n){var r=new Xe(e,t||null,n||null);this.repo.addEventCallbackForQuery(this,r)},e.prototype.onChildEvent=function(e,t,n){var r=new Je(e,t,n);this.repo.addEventCallbackForQuery(this,r)},e.prototype.off=function(e,t,n){u.validateArgCount("Query.off",0,3,arguments.length),se("Query.off",1,e,!0),u.validateCallback("Query.off",2,t,!0),u.validateContextObject("Query.off",3,n,!0);var r=null,i=null;if("value"===e){var o=t||null;r=new Xe(o,null,n||null)}else e&&(t&&((i={})[e]=t),r=new Je(i,null,n||null));this.repo.removeEventCallbackForQuery(this,r)},e.prototype.once=function(t,n,r,i){var o=this;u.validateArgCount("Query.once",1,4,arguments.length),se("Query.once",1,t,!1),u.validateCallback("Query.once",2,n,!0);var a=e.getCancelAndContextArgs_("Query.once",r,i),s=!0,c=new u.Deferred;c.promise.catch((function(){}));var l=function(e){s&&(s=!1,o.off(t,l),n&&n.bind(a.context)(e),c.resolve(e))};return this.on(t,l,(function(e){o.off(t,l),a.cancel&&a.cancel.bind(a.context)(e),c.reject(e)})),c.promise},e.prototype.limitToFirst=function(t){if(u.validateArgCount("Query.limitToFirst",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToFirst: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToFirst: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToFirst(t),this.orderByCalled_)},e.prototype.limitToLast=function(t){if(u.validateArgCount("Query.limitToLast",1,1,arguments.length),"number"!=typeof t||Math.floor(t)!==t||t<=0)throw new Error("Query.limitToLast: First argument must be a positive integer.");if(this.queryParams_.hasLimit())throw new Error("Query.limitToLast: Limit was already set (by another call to limit, limitToFirst, or limitToLast).");return new e(this.repo,this.path,this.queryParams_.limitToLast(t),this.orderByCalled_)},e.prototype.orderByChild=function(t){if(u.validateArgCount("Query.orderByChild",1,1,arguments.length),"$key"===t)throw new Error('Query.orderByChild: "$key" is invalid.  Use Query.orderByKey() instead.');if("$priority"===t)throw new Error('Query.orderByChild: "$priority" is invalid.  Use Query.orderByPriority() instead.');if("$value"===t)throw new Error('Query.orderByChild: "$value" is invalid.  Use Query.orderByValue() instead.');ce("Query.orderByChild",1,t,!1),this.validateNoPreviousOrderByCall_("Query.orderByChild");var n=new q(t);if(n.isEmpty())throw new Error("Query.orderByChild: cannot pass in empty path.  Use Query.orderByValue() instead.");var r=new Ke(n),i=this.queryParams_.orderBy(r);return e.validateQueryEndpoints_(i),new e(this.repo,this.path,i,!0)},e.prototype.orderByKey=function(){u.validateArgCount("Query.orderByKey",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByKey");var t=this.queryParams_.orderBy(_e);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByPriority=function(){u.validateArgCount("Query.orderByPriority",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByPriority");var t=this.queryParams_.orderBy(Pe);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.orderByValue=function(){u.validateArgCount("Query.orderByValue",0,0,arguments.length),this.validateNoPreviousOrderByCall_("Query.orderByValue");var t=this.queryParams_.orderBy(Qe);return e.validateQueryEndpoints_(t),new e(this.repo,this.path,t,!0)},e.prototype.startAt=function(t,n){void 0===t&&(t=null),u.validateArgCount("Query.startAt",0,2,arguments.length),re("Query.startAt",1,t,this.path,!0),ue("Query.startAt",2,n,!0);var r=this.queryParams_.startAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasStart())throw new Error("Query.startAt: Starting point was already set (by another call to startAt or equalTo).");return void 0===t&&(t=null,n=null),new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.endAt=function(t,n){void 0===t&&(t=null),u.validateArgCount("Query.endAt",0,2,arguments.length),re("Query.endAt",1,t,this.path,!0),ue("Query.endAt",2,n,!0);var r=this.queryParams_.endAt(t,n);if(e.validateLimit_(r),e.validateQueryEndpoints_(r),this.queryParams_.hasEnd())throw new Error("Query.endAt: Ending point was already set (by another call to endAt or equalTo).");return new e(this.repo,this.path,r,this.orderByCalled_)},e.prototype.equalTo=function(e,t){if(u.validateArgCount("Query.equalTo",1,2,arguments.length),re("Query.equalTo",1,e,this.path,!1),ue("Query.equalTo",2,t,!0),this.queryParams_.hasStart())throw new Error("Query.equalTo: Starting point was already set (by another call to startAt or equalTo).");if(this.queryParams_.hasEnd())throw new Error("Query.equalTo: Ending point was already set (by another call to endAt or equalTo).");return this.startAt(e,t).endAt(e,t)},e.prototype.toString=function(){return u.validateArgCount("Query.toString",0,0,arguments.length),this.repo.toString()+this.path.toUrlEncodedString()},e.prototype.toJSON=function(){return u.validateArgCount("Query.toJSON",0,1,arguments.length),this.toString()},e.prototype.queryObject=function(){return this.queryParams_.getQueryObject()},e.prototype.queryIdentifier=function(){var e=this.queryObject(),t=D(e);return"{}"===t?"default":t},e.prototype.isEqual=function(t){if(u.validateArgCount("Query.isEqual",1,1,arguments.length),!(t instanceof e)){var n="Query.isEqual failed: First argument must be an instance of firebase.database.Query.";throw new Error(n)}var r=this.repo===t.repo,i=this.path.equals(t.path),o=this.queryIdentifier()===t.queryIdentifier();return r&&i&&o},e.getCancelAndContextArgs_=function(e,t,n){var r={cancel:null,context:null};if(t&&n)r.cancel=t,u.validateCallback(e,3,r.cancel,!0),r.context=n,u.validateContextObject(e,4,r.context,!0);else if(t)if("object"==typeof t&&null!==t)r.context=t;else{if("function"!=typeof t)throw new Error(u.errorPrefix(e,3,!0)+" must either be a cancel callback or a context object.");r.cancel=t}return r},Object.defineProperty(e.prototype,"ref",{get:function(){return this.getRef()},enumerable:!0,configurable:!0}),e}(),et=function(){function e(){this.value=null,this.children=new Map}return e.prototype.find=function(e){if(null!=this.value)return this.value.getChild(e);if(!e.isEmpty()&&this.children.size>0){var t=e.getFront();return e=e.popFront(),this.children.has(t)?this.children.get(t).find(e):null}return null},e.prototype.remember=function(t,n){if(t.isEmpty())this.value=n,this.children.clear();else if(null!==this.value)this.value=this.value.updateChild(t,n);else{var r=t.getFront();this.children.has(r)||this.children.set(r,new e);var i=this.children.get(r);t=t.popFront(),i.remember(t,n)}},e.prototype.forget=function(e){if(e.isEmpty())return this.value=null,this.children.clear(),!0;if(null!==this.value){if(this.value.isLeafNode())return!1;var t=this.value;this.value=null;var n=this;return t.forEachChild(Pe,(function(e,t){n.remember(new q(e),t)})),this.forget(e)}if(this.children.size>0){var r=e.getFront();if(e=e.popFront(),this.children.has(r))this.children.get(r).forget(e)&&this.children.delete(r);return 0===this.children.size}return!0},e.prototype.forEachTree=function(e,t){null!==this.value?t(e,this.value):this.forEachChild((function(n,r){var i=new q(e.toString()+"/"+n);r.forEachTree(i,t)}))},e.prototype.forEachChild=function(e){this.children.forEach((function(t,n){e(n,t)}))},e}(),tt=function(e,t){return e&&"object"==typeof e?(u.assert(".sv"in e,"Unexpected leaf node or priority contents"),t[e[".sv"]]):e},nt=function(e,t){var n,r=e.getPriority().val(),i=tt(r,t);if(e.isLeafNode()){var o=e,a=tt(o.getValue(),t);return a!==o.getValue()||i!==o.getPriority().val()?new ke(a,Be(i)):e}var s=e;return n=s,i!==s.getPriority().val()&&(n=n.updatePriority(new ke(i))),s.forEachChild(Pe,(function(e,r){var i=nt(r,t);i!==r&&(n=n.updateImmediateChild(e,i))})),n};!function(e){e[e.OVERWRITE=0]="OVERWRITE",e[e.MERGE=1]="MERGE",e[e.ACK_USER_WRITE=2]="ACK_USER_WRITE",e[e.LISTEN_COMPLETE=3]="LISTEN_COMPLETE"}(ze||(ze={}));var rt,it,ot=function(){function e(e,t,n,r){this.fromUser=e,this.fromServer=t,this.queryId=n,this.tagged=r,u.assert(!r||t,"Tagged queries must be from server.")}return e.User=new e(!0,!1,null,!1),e.Server=new e(!1,!0,null,!1),e.forServerTaggedQuery=function(t){return new e(!1,!0,t,!0)},e}(),at=function(){function e(e,t,n){this.path=e,this.affectedTree=t,this.revert=n,this.type=ze.ACK_USER_WRITE,this.source=ot.User}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){if(null!=this.affectedTree.value)return u.assert(this.affectedTree.children.isEmpty(),"affectedTree should not have overlapping affected paths."),this;var n=this.affectedTree.subtree(new q(t));return new e(q.Empty,n,this.revert)}return u.assert(this.path.getFront()===t,"operationForChild called for unrelated child."),new e(this.path.popFront(),this.affectedTree,this.revert)},e}(),st=function(){function e(e,t){void 0===t&&(rt||(rt=new Re(A)),t=rt),this.value=e,this.children=t}return e.fromObject=function(t){var n=e.Empty;return L(t,(function(e,t){n=n.set(new q(e),t)})),n},e.prototype.isEmpty=function(){return null===this.value&&this.children.isEmpty()},e.prototype.findRootMostMatchingPathAndValue=function(e,t){if(null!=this.value&&t(this.value))return{path:q.Empty,value:this.value};if(e.isEmpty())return null;var n=e.getFront(),r=this.children.get(n);if(null!==r){var i=r.findRootMostMatchingPathAndValue(e.popFront(),t);return null!=i?{path:new q(n).child(i.path),value:i.value}:null}return null},e.prototype.findRootMostValueAndPath=function(e){return this.findRootMostMatchingPathAndValue(e,(function(){return!0}))},e.prototype.subtree=function(t){if(t.isEmpty())return this;var n=t.getFront(),r=this.children.get(n);return null!==r?r.subtree(t.popFront()):e.Empty},e.prototype.set=function(t,n){if(t.isEmpty())return new e(n,this.children);var r=t.getFront(),i=(this.children.get(r)||e.Empty).set(t.popFront(),n),o=this.children.insert(r,i);return new e(this.value,o)},e.prototype.remove=function(t){if(t.isEmpty())return this.children.isEmpty()?e.Empty:new e(null,this.children);var n=t.getFront(),r=this.children.get(n);if(r){var i=r.remove(t.popFront()),o=void 0;return o=i.isEmpty()?this.children.remove(n):this.children.insert(n,i),null===this.value&&o.isEmpty()?e.Empty:new e(this.value,o)}return this},e.prototype.get=function(e){if(e.isEmpty())return this.value;var t=e.getFront(),n=this.children.get(t);return n?n.get(e.popFront()):null},e.prototype.setTree=function(t,n){if(t.isEmpty())return n;var r=t.getFront(),i=(this.children.get(r)||e.Empty).setTree(t.popFront(),n),o=void 0;return o=i.isEmpty()?this.children.remove(r):this.children.insert(r,i),new e(this.value,o)},e.prototype.fold=function(e){return this.fold_(q.Empty,e)},e.prototype.fold_=function(e,t){var n={};return this.children.inorderTraversal((function(r,i){n[r]=i.fold_(e.child(r),t)})),t(e,this.value,n)},e.prototype.findOnPath=function(e,t){return this.findOnPath_(e,q.Empty,t)},e.prototype.findOnPath_=function(e,t,n){var r=!!this.value&&n(t,this.value);if(r)return r;if(e.isEmpty())return null;var i=e.getFront(),o=this.children.get(i);return o?o.findOnPath_(e.popFront(),t.child(i),n):null},e.prototype.foreachOnPath=function(e,t){return this.foreachOnPath_(e,q.Empty,t)},e.prototype.foreachOnPath_=function(t,n,r){if(t.isEmpty())return this;this.value&&r(n,this.value);var i=t.getFront(),o=this.children.get(i);return o?o.foreachOnPath_(t.popFront(),n.child(i),r):e.Empty},e.prototype.foreach=function(e){this.foreach_(q.Empty,e)},e.prototype.foreach_=function(e,t){this.children.inorderTraversal((function(n,r){r.foreach_(e.child(n),t)})),this.value&&t(e,this.value)},e.prototype.foreachChild=function(e){this.children.inorderTraversal((function(t,n){n.value&&e(t,n.value)}))},e.Empty=new e(null),e}(),ut=function(){function e(e,t){this.source=e,this.path=t,this.type=ze.LISTEN_COMPLETE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,q.Empty):new e(this.source,this.path.popFront())},e}(),ct=function(){function e(e,t,n){this.source=e,this.path=t,this.snap=n,this.type=ze.OVERWRITE}return e.prototype.operationForChild=function(t){return this.path.isEmpty()?new e(this.source,q.Empty,this.snap.getImmediateChild(t)):new e(this.source,this.path.popFront(),this.snap)},e}(),lt=function(){function e(e,t,n){this.source=e,this.path=t,this.children=n,this.type=ze.MERGE}return e.prototype.operationForChild=function(t){if(this.path.isEmpty()){var n=this.children.subtree(new q(t));return n.isEmpty()?null:n.value?new ct(this.source,q.Empty,n.value):new e(this.source,q.Empty,n)}return u.assert(this.path.getFront()===t,"Can't get a merge for a child not on the path of the operation"),new e(this.source,this.path.popFront(),this.children)},e.prototype.toString=function(){return"Operation("+this.path+": "+this.source.toString()+" merge: "+this.children.toString()+")"},e}(),ft=function(){function e(e,t,n){this.node_=e,this.fullyInitialized_=t,this.filtered_=n}return e.prototype.isFullyInitialized=function(){return this.fullyInitialized_},e.prototype.isFiltered=function(){return this.filtered_},e.prototype.isCompleteForPath=function(e){if(e.isEmpty())return this.isFullyInitialized()&&!this.filtered_;var t=e.getFront();return this.isCompleteForChild(t)},e.prototype.isCompleteForChild=function(e){return this.isFullyInitialized()&&!this.filtered_||this.node_.hasChild(e)},e.prototype.getNode=function(){return this.node_},e}(),ht=function(){function e(e,t){this.eventCache_=e,this.serverCache_=t}return e.prototype.updateEventSnap=function(t,n,r){return new e(new ft(t,n,r),this.serverCache_)},e.prototype.updateServerSnap=function(t,n,r){return new e(this.eventCache_,new ft(t,n,r))},e.prototype.getEventCache=function(){return this.eventCache_},e.prototype.getCompleteEventSnap=function(){return this.eventCache_.isFullyInitialized()?this.eventCache_.getNode():null},e.prototype.getServerCache=function(){return this.serverCache_},e.prototype.getCompleteServerSnap=function(){return this.serverCache_.isFullyInitialized()?this.serverCache_.getNode():null},e.Empty=new e(new ft(Ve.EMPTY_NODE,!1,!1),new ft(Ve.EMPTY_NODE,!1,!1)),e}(),pt=function(){function e(e,t,n,r,i){this.type=e,this.snapshotNode=t,this.childName=n,this.oldSnap=r,this.prevName=i}return e.valueChange=function(t){return new e(e.VALUE,t)},e.childAddedChange=function(t,n){return new e(e.CHILD_ADDED,n,t)},e.childRemovedChange=function(t,n){return new e(e.CHILD_REMOVED,n,t)},e.childChangedChange=function(t,n,r){return new e(e.CHILD_CHANGED,n,t,r)},e.childMovedChange=function(t,n){return new e(e.CHILD_MOVED,n,t)},e.CHILD_ADDED="child_added",e.CHILD_REMOVED="child_removed",e.CHILD_CHANGED="child_changed",e.CHILD_MOVED="child_moved",e.VALUE="value",e}(),dt=function(){function e(e){this.index_=e}return e.prototype.updateChild=function(e,t,n,r,i,o){u.assert(e.isIndexed(this.index_),"A node must be indexed if only a child is updated");var a=e.getImmediateChild(t);return a.getChild(r).equals(n.getChild(r))&&a.isEmpty()===n.isEmpty()?e:(null!=o&&(n.isEmpty()?e.hasChild(t)?o.trackChildChange(pt.childRemovedChange(t,a)):u.assert(e.isLeafNode(),"A child remove without an old child only makes sense on a leaf node"):a.isEmpty()?o.trackChildChange(pt.childAddedChange(t,n)):o.trackChildChange(pt.childChangedChange(t,n,a))),e.isLeafNode()&&n.isEmpty()?e:e.updateImmediateChild(t,n).withIndex(this.index_))},e.prototype.updateFullNode=function(e,t,n){return null!=n&&(e.isLeafNode()||e.forEachChild(Pe,(function(e,r){t.hasChild(e)||n.trackChildChange(pt.childRemovedChange(e,r))})),t.isLeafNode()||t.forEachChild(Pe,(function(t,r){if(e.hasChild(t)){var i=e.getImmediateChild(t);i.equals(r)||n.trackChildChange(pt.childChangedChange(t,r,i))}else n.trackChildChange(pt.childAddedChange(t,r))}))),t.withIndex(this.index_)},e.prototype.updatePriority=function(e,t){return e.isEmpty()?Ve.EMPTY_NODE:e.updatePriority(t)},e.prototype.filtersNodes=function(){return!1},e.prototype.getIndexedFilter=function(){return this},e.prototype.getIndex=function(){return this.index_},e}(),vt=function(){function e(){this.changeMap=new Map}return e.prototype.trackChildChange=function(e){var t=e.type,n=e.childName;u.assert(t===pt.CHILD_ADDED||t===pt.CHILD_CHANGED||t===pt.CHILD_REMOVED,"Only child changes supported for tracking"),u.assert(".priority"!==n,"Only non-priority child changes can be tracked.");var r=this.changeMap.get(n);if(r){var i=r.type;if(t===pt.CHILD_ADDED&&i===pt.CHILD_REMOVED)this.changeMap.set(n,pt.childChangedChange(n,e.snapshotNode,r.snapshotNode));else if(t===pt.CHILD_REMOVED&&i===pt.CHILD_ADDED)this.changeMap.delete(n);else if(t===pt.CHILD_REMOVED&&i===pt.CHILD_CHANGED)this.changeMap.set(n,pt.childRemovedChange(n,r.oldSnap));else if(t===pt.CHILD_CHANGED&&i===pt.CHILD_ADDED)this.changeMap.set(n,pt.childAddedChange(n,e.snapshotNode));else{if(t!==pt.CHILD_CHANGED||i!==pt.CHILD_CHANGED)throw u.assertionError("Illegal combination of changes: "+e+" occurred after "+r);this.changeMap.set(n,pt.childChangedChange(n,e.snapshotNode,r.oldSnap))}}else this.changeMap.set(n,e)},e.prototype.getChanges=function(){return Array.from(this.changeMap.values())},e}(),yt=new(function(){function e(){}return e.prototype.getCompleteChild=function(e){return null},e.prototype.getChildAfterChild=function(e,t,n){return null},e}()),gt=function(){function e(e,t,n){void 0===n&&(n=null),this.writes_=e,this.viewCache_=t,this.optCompleteServerCache_=n}return e.prototype.getCompleteChild=function(e){var t=this.viewCache_.getEventCache();if(t.isCompleteForChild(e))return t.getNode().getImmediateChild(e);var n=null!=this.optCompleteServerCache_?new ft(this.optCompleteServerCache_,!0,!1):this.viewCache_.getServerCache();return this.writes_.calcCompleteChild(e,n)},e.prototype.getChildAfterChild=function(e,t,n){var r=null!=this.optCompleteServerCache_?this.optCompleteServerCache_:this.viewCache_.getCompleteServerSnap(),i=this.writes_.calcIndexedSlice(r,t,1,n,e);return 0===i.length?null:i[0]},e}(),mt=function(e,t){this.viewCache=e,this.changes=t},bt=function(){function e(e){this.filter_=e}return e.prototype.assertIndexed=function(e){u.assert(e.getEventCache().getNode().isIndexed(this.filter_.getIndex()),"Event snap not indexed"),u.assert(e.getServerCache().getNode().isIndexed(this.filter_.getIndex()),"Server snap not indexed")},e.prototype.applyOperation=function(t,n,r,i){var o,a,s=new vt;if(n.type===ze.OVERWRITE){var c=n;c.source.fromUser?o=this.applyUserOverwrite_(t,c.path,c.snap,r,i,s):(u.assert(c.source.fromServer,"Unknown source."),a=c.source.tagged||t.getServerCache().isFiltered()&&!c.path.isEmpty(),o=this.applyServerOverwrite_(t,c.path,c.snap,r,i,a,s))}else if(n.type===ze.MERGE){var l=n;l.source.fromUser?o=this.applyUserMerge_(t,l.path,l.children,r,i,s):(u.assert(l.source.fromServer,"Unknown source."),a=l.source.tagged||t.getServerCache().isFiltered(),o=this.applyServerMerge_(t,l.path,l.children,r,i,a,s))}else if(n.type===ze.ACK_USER_WRITE){var f=n;o=f.revert?this.revertUserWrite_(t,f.path,r,i,s):this.ackUserWrite_(t,f.path,f.affectedTree,r,i,s)}else{if(n.type!==ze.LISTEN_COMPLETE)throw u.assertionError("Unknown operation type: "+n.type);o=this.listenComplete_(t,n.path,r,s)}var h=s.getChanges();return e.maybeAddValueEvent_(t,o,h),new mt(o,h)},e.maybeAddValueEvent_=function(e,t,n){var r=t.getEventCache();if(r.isFullyInitialized()){var i=r.getNode().isLeafNode()||r.getNode().isEmpty(),o=e.getCompleteEventSnap();(n.length>0||!e.getEventCache().isFullyInitialized()||i&&!r.getNode().equals(o)||!r.getNode().getPriority().equals(o.getPriority()))&&n.push(pt.valueChange(t.getCompleteEventSnap()))}},e.prototype.generateEventCacheAfterServerEvent_=function(e,t,n,r,i){var o=e.getEventCache();if(null!=n.shadowingWrite(t))return e;var a=void 0,s=void 0;if(t.isEmpty())if(u.assert(e.getServerCache().isFullyInitialized(),"If change path is empty, we must have complete server data"),e.getServerCache().isFiltered()){var c=e.getCompleteServerSnap(),l=c instanceof Ve?c:Ve.EMPTY_NODE,f=n.calcCompleteEventChildren(l);a=this.filter_.updateFullNode(e.getEventCache().getNode(),f,i)}else{var h=n.calcCompleteEventCache(e.getCompleteServerSnap());a=this.filter_.updateFullNode(e.getEventCache().getNode(),h,i)}else{var p=t.getFront();if(".priority"===p){u.assert(1===t.getLength(),"Can't have a priority with additional path components");var d=o.getNode();s=e.getServerCache().getNode();var v=n.calcEventCacheAfterServerOverwrite(t,d,s);a=null!=v?this.filter_.updatePriority(d,v):o.getNode()}else{var y=t.popFront(),g=void 0;if(o.isCompleteForChild(p)){s=e.getServerCache().getNode();var m=n.calcEventCacheAfterServerOverwrite(t,o.getNode(),s);g=null!=m?o.getNode().getImmediateChild(p).updateChild(y,m):o.getNode().getImmediateChild(p)}else g=n.calcCompleteChild(p,e.getServerCache());a=null!=g?this.filter_.updateChild(o.getNode(),p,g,y,r,i):o.getNode()}}return e.updateEventSnap(a,o.isFullyInitialized()||t.isEmpty(),this.filter_.filtersNodes())},e.prototype.applyServerOverwrite_=function(e,t,n,r,i,o,a){var s,u=e.getServerCache(),c=o?this.filter_:this.filter_.getIndexedFilter();if(t.isEmpty())s=c.updateFullNode(u.getNode(),n,null);else if(c.filtersNodes()&&!u.isFiltered()){var l=u.getNode().updateChild(t,n);s=c.updateFullNode(u.getNode(),l,null)}else{var f=t.getFront();if(!u.isCompleteForPath(t)&&t.getLength()>1)return e;var h=t.popFront(),p=u.getNode().getImmediateChild(f).updateChild(h,n);s=".priority"===f?c.updatePriority(u.getNode(),p):c.updateChild(u.getNode(),f,p,h,yt,null)}var d=e.updateServerSnap(s,u.isFullyInitialized()||t.isEmpty(),c.filtersNodes()),v=new gt(r,d,i);return this.generateEventCacheAfterServerEvent_(d,t,r,v,a)},e.prototype.applyUserOverwrite_=function(e,t,n,r,i,o){var a,s,u=e.getEventCache(),c=new gt(r,e,i);if(t.isEmpty())s=this.filter_.updateFullNode(e.getEventCache().getNode(),n,o),a=e.updateEventSnap(s,!0,this.filter_.filtersNodes());else{var l=t.getFront();if(".priority"===l)s=this.filter_.updatePriority(e.getEventCache().getNode(),n),a=e.updateEventSnap(s,u.isFullyInitialized(),u.isFiltered());else{var f=t.popFront(),h=u.getNode().getImmediateChild(l),p=void 0;if(f.isEmpty())p=n;else{var d=c.getCompleteChild(l);p=null!=d?".priority"===f.getBack()&&d.getChild(f.parent()).isEmpty()?d:d.updateChild(f,n):Ve.EMPTY_NODE}if(h.equals(p))a=e;else{var v=this.filter_.updateChild(u.getNode(),l,p,f,c,o);a=e.updateEventSnap(v,u.isFullyInitialized(),this.filter_.filtersNodes())}}}return a},e.cacheHasChild_=function(e,t){return e.getEventCache().isCompleteForChild(t)},e.prototype.applyUserMerge_=function(t,n,r,i,o,a){var s=this,u=t;return r.foreach((function(r,c){var l=n.child(r);e.cacheHasChild_(t,l.getFront())&&(u=s.applyUserOverwrite_(u,l,c,i,o,a))})),r.foreach((function(r,c){var l=n.child(r);e.cacheHasChild_(t,l.getFront())||(u=s.applyUserOverwrite_(u,l,c,i,o,a))})),u},e.prototype.applyMerge_=function(e,t){return t.foreach((function(t,n){e=e.updateChild(t,n)})),e},e.prototype.applyServerMerge_=function(e,t,n,r,i,o,a){var s=this;if(e.getServerCache().getNode().isEmpty()&&!e.getServerCache().isFullyInitialized())return e;var u,c=e;u=t.isEmpty()?n:st.Empty.setTree(t,n);var l=e.getServerCache().getNode();return u.children.inorderTraversal((function(t,n){if(l.hasChild(t)){var u=e.getServerCache().getNode().getImmediateChild(t),f=s.applyMerge_(u,n);c=s.applyServerOverwrite_(c,new q(t),f,r,i,o,a)}})),u.children.inorderTraversal((function(t,n){var u=!e.getServerCache().isCompleteForChild(t)&&null==n.value;if(!l.hasChild(t)&&!u){var f=e.getServerCache().getNode().getImmediateChild(t),h=s.applyMerge_(f,n);c=s.applyServerOverwrite_(c,new q(t),h,r,i,o,a)}})),c},e.prototype.ackUserWrite_=function(e,t,n,r,i,o){if(null!=r.shadowingWrite(t))return e;var a=e.getServerCache().isFiltered(),s=e.getServerCache();if(null!=n.value){if(t.isEmpty()&&s.isFullyInitialized()||s.isCompleteForPath(t))return this.applyServerOverwrite_(e,t,s.getNode().getChild(t),r,i,a,o);if(t.isEmpty()){var u=st.Empty;return s.getNode().forEachChild(_e,(function(e,t){u=u.set(new q(e),t)})),this.applyServerMerge_(e,t,u,r,i,a,o)}return e}var c=st.Empty;return n.foreach((function(e,n){var r=t.child(e);s.isCompleteForPath(r)&&(c=c.set(e,s.getNode().getChild(r)))})),this.applyServerMerge_(e,t,c,r,i,a,o)},e.prototype.listenComplete_=function(e,t,n,r){var i=e.getServerCache(),o=e.updateServerSnap(i.getNode(),i.isFullyInitialized()||t.isEmpty(),i.isFiltered());return this.generateEventCacheAfterServerEvent_(o,t,n,yt,r)},e.prototype.revertUserWrite_=function(e,t,n,r,i){var o;if(null!=n.shadowingWrite(t))return e;var a=new gt(n,e,r),s=e.getEventCache().getNode(),c=void 0;if(t.isEmpty()||".priority"===t.getFront()){var l=void 0;if(e.getServerCache().isFullyInitialized())l=n.calcCompleteEventCache(e.getCompleteServerSnap());else{var f=e.getServerCache().getNode();u.assert(f instanceof Ve,"serverChildren would be complete if leaf node"),l=n.calcCompleteEventChildren(f)}l=l,c=this.filter_.updateFullNode(s,l,i)}else{var h=t.getFront(),p=n.calcCompleteChild(h,e.getServerCache());null==p&&e.getServerCache().isCompleteForChild(h)&&(p=s.getImmediateChild(h)),(c=null!=p?this.filter_.updateChild(s,h,p,t.popFront(),a,i):e.getEventCache().getNode().hasChild(h)?this.filter_.updateChild(s,h,Ve.EMPTY_NODE,t.popFront(),a,i):s).isEmpty()&&e.getServerCache().isFullyInitialized()&&(o=n.calcCompleteEventCache(e.getCompleteServerSnap())).isLeafNode()&&(c=this.filter_.updateFullNode(c,o,i))}return o=e.getServerCache().isFullyInitialized()||null!=n.shadowingWrite(q.Empty),e.updateEventSnap(c,o,this.filter_.filtersNodes())},e}(),_t=function(){function e(e){this.query_=e,this.index_=this.query_.getQueryParams().getIndex()}return e.prototype.generateEventsForChanges=function(e,t,n){var r=this,i=[],o=[];return e.forEach((function(e){e.type===pt.CHILD_CHANGED&&r.index_.indexedValueChanged(e.oldSnap,e.snapshotNode)&&o.push(pt.childMovedChange(e.childName,e.snapshotNode))})),this.generateEventsForType_(i,pt.CHILD_REMOVED,e,n,t),this.generateEventsForType_(i,pt.CHILD_ADDED,e,n,t),this.generateEventsForType_(i,pt.CHILD_MOVED,o,n,t),this.generateEventsForType_(i,pt.CHILD_CHANGED,e,n,t),this.generateEventsForType_(i,pt.VALUE,e,n,t),i},e.prototype.generateEventsForType_=function(e,t,n,r,i){var o=this,a=n.filter((function(e){return e.type===t}));a.sort(this.compareChanges_.bind(this)),a.forEach((function(t){var n=o.materializeSingleChange_(t,i);r.forEach((function(r){r.respondsTo(t.type)&&e.push(r.createEvent(n,o.query_))}))}))},e.prototype.materializeSingleChange_=function(e,t){return"value"===e.type||"child_removed"===e.type?e:(e.prevName=t.getPredecessorChildName(e.childName,e.snapshotNode,this.index_),e)},e.prototype.compareChanges_=function(e,t){if(null==e.childName||null==t.childName)throw u.assertionError("Should only compare child_ events.");var n=new ge(e.childName,e.snapshotNode),r=new ge(t.childName,t.snapshotNode);return this.index_.compare(n,r)},e}(),wt=function(){function e(e,t){this.query_=e,this.eventRegistrations_=[];var n=this.query_.getQueryParams(),r=new dt(n.getIndex()),i=n.getNodeFilter();this.processor_=new bt(i);var o=t.getServerCache(),a=t.getEventCache(),s=r.updateFullNode(Ve.EMPTY_NODE,o.getNode(),null),u=i.updateFullNode(Ve.EMPTY_NODE,a.getNode(),null),c=new ft(s,o.isFullyInitialized(),r.filtersNodes()),l=new ft(u,a.isFullyInitialized(),i.filtersNodes());this.viewCache_=new ht(l,c),this.eventGenerator_=new _t(this.query_)}return e.prototype.getQuery=function(){return this.query_},e.prototype.getServerCache=function(){return this.viewCache_.getServerCache().getNode()},e.prototype.getCompleteServerCache=function(e){var t=this.viewCache_.getCompleteServerSnap();return t&&(this.query_.getQueryParams().loadsAllData()||!e.isEmpty()&&!t.getImmediateChild(e.getFront()).isEmpty())?t.getChild(e):null},e.prototype.isEmpty=function(){return 0===this.eventRegistrations_.length},e.prototype.addEventRegistration=function(e){this.eventRegistrations_.push(e)},e.prototype.removeEventRegistration=function(e,t){var n=[];if(t){u.assert(null==e,"A cancel should cancel all event registrations.");var r=this.query_.path;this.eventRegistrations_.forEach((function(e){t=t;var i=e.createCancelEvent(t,r);i&&n.push(i)}))}if(e){for(var i=[],o=0;o<this.eventRegistrations_.length;++o){var a=this.eventRegistrations_[o];if(a.matches(e)){if(e.hasAnyCallback()){i=i.concat(this.eventRegistrations_.slice(o+1));break}}else i.push(a)}this.eventRegistrations_=i}else this.eventRegistrations_=[];return n},e.prototype.applyOperation=function(e,t,n){e.type===ze.MERGE&&null!==e.source.queryId&&(u.assert(this.viewCache_.getCompleteServerSnap(),"We should always have a full cache before handling merges"),u.assert(this.viewCache_.getCompleteEventSnap(),"Missing event cache, even though we have a server cache"));var r=this.viewCache_,i=this.processor_.applyOperation(r,e,t,n);return this.processor_.assertIndexed(i.viewCache),u.assert(i.viewCache.getServerCache().isFullyInitialized()||!r.getServerCache().isFullyInitialized(),"Once a server snap is complete, it should never go back"),this.viewCache_=i.viewCache,this.generateEventsForChanges_(i.changes,i.viewCache.getEventCache().getNode(),null)},e.prototype.getInitialEvents=function(e){var t=this.viewCache_.getEventCache(),n=[];t.getNode().isLeafNode()||t.getNode().forEachChild(Pe,(function(e,t){n.push(pt.childAddedChange(e,t))}));return t.isFullyInitialized()&&n.push(pt.valueChange(t.getNode())),this.generateEventsForChanges_(n,t.getNode(),e)},e.prototype.generateEventsForChanges_=function(e,t,n){var r=n?[n]:this.eventRegistrations_;return this.eventGenerator_.generateEventsForChanges(e,t,r)},e}(),Et=function(){function e(){this.views=new Map}return Object.defineProperty(e,"__referenceConstructor",{get:function(){return u.assert(it,"Reference.ts has not been loaded"),it},set:function(e){u.assert(!it,"__referenceConstructor has already been defined"),it=e},enumerable:!0,configurable:!0}),e.prototype.isEmpty=function(){return 0===this.views.size},e.prototype.applyOperation=function(e,t,n){var r,i,o=e.source.queryId;if(null!==o){var a=this.views.get(o);return u.assert(null!=a,"SyncTree gave us an op for an invalid query."),a.applyOperation(e,t,n)}var c=[];try{for(var l=s.__values(this.views.values()),f=l.next();!f.done;f=l.next()){a=f.value;c=c.concat(a.applyOperation(e,t,n))}}catch(e){r={error:e}}finally{try{f&&!f.done&&(i=l.return)&&i.call(l)}finally{if(r)throw r.error}}return c},e.prototype.addEventRegistration=function(e,t,n,r,i){var o=e.queryIdentifier(),a=this.views.get(o);if(!a){var s=n.calcCompleteEventCache(i?r:null),u=!1;s?u=!0:r instanceof Ve?(s=n.calcCompleteEventChildren(r),u=!1):(s=Ve.EMPTY_NODE,u=!1);var c=new ht(new ft(s,u,!1),new ft(r,i,!1));a=new wt(e,c),this.views.set(o,a)}return a.addEventRegistration(t),a.getInitialEvents(t)},e.prototype.removeEventRegistration=function(t,n,r){var i,o,a=t.queryIdentifier(),u=[],c=[],l=this.hasCompleteView();if("default"===a)try{for(var f=s.__values(this.views.entries()),h=f.next();!h.done;h=f.next()){var p=s.__read(h.value,2),d=p[0],v=p[1];c=c.concat(v.removeEventRegistration(n,r)),v.isEmpty()&&(this.views.delete(d),v.getQuery().getQueryParams().loadsAllData()||u.push(v.getQuery()))}}catch(e){i={error:e}}finally{try{h&&!h.done&&(o=f.return)&&o.call(f)}finally{if(i)throw i.error}}else(v=this.views.get(a))&&(c=c.concat(v.removeEventRegistration(n,r)),v.isEmpty()&&(this.views.delete(a),v.getQuery().getQueryParams().loadsAllData()||u.push(v.getQuery())));return l&&!this.hasCompleteView()&&u.push(new e.__referenceConstructor(t.repo,t.path)),{removed:u,events:c}},e.prototype.getQueryViews=function(){var e,t,n=[];try{for(var r=s.__values(this.views.values()),i=r.next();!i.done;i=r.next()){var o=i.value;o.getQuery().getQueryParams().loadsAllData()||n.push(o)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(t=r.return)&&t.call(r)}finally{if(e)throw e.error}}return n},e.prototype.getCompleteServerCache=function(e){var t,n,r=null;try{for(var i=s.__values(this.views.values()),o=i.next();!o.done;o=i.next()){var a=o.value;r=r||a.getCompleteServerCache(e)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(n=i.return)&&n.call(i)}finally{if(t)throw t.error}}return r},e.prototype.viewForQuery=function(e){if(e.getQueryParams().loadsAllData())return this.getCompleteView();var t=e.queryIdentifier();return this.views.get(t)},e.prototype.viewExistsForQuery=function(e){return null!=this.viewForQuery(e)},e.prototype.hasCompleteView=function(){return null!=this.getCompleteView()},e.prototype.getCompleteView=function(){var e,t;try{for(var n=s.__values(this.views.values()),r=n.next();!r.done;r=n.next()){var i=r.value;if(i.getQuery().getQueryParams().loadsAllData())return i}}catch(t){e={error:t}}finally{try{r&&!r.done&&(t=n.return)&&t.call(n)}finally{if(e)throw e.error}}return null},e}(),St=function(){function e(e){this.writeTree_=e}return e.prototype.addWrite=function(t,n){if(t.isEmpty())return new e(new st(n));var r=this.writeTree_.findRootMostValueAndPath(t);if(null!=r){var i=r.path,o=r.value,a=q.relativePath(i,t);return o=o.updateChild(a,n),new e(this.writeTree_.set(i,o))}var s=new st(n);return new e(this.writeTree_.setTree(t,s))},e.prototype.addWrites=function(e,t){var n=this;return L(t,(function(t,r){n=n.addWrite(e.child(t),r)})),n},e.prototype.removeWrite=function(t){return t.isEmpty()?e.Empty:new e(this.writeTree_.setTree(t,st.Empty))},e.prototype.hasCompleteWrite=function(e){return null!=this.getCompleteNode(e)},e.prototype.getCompleteNode=function(e){var t=this.writeTree_.findRootMostValueAndPath(e);return null!=t?this.writeTree_.get(t.path).getChild(q.relativePath(t.path,e)):null},e.prototype.getCompleteChildren=function(){var e=[],t=this.writeTree_.value;return null!=t?t.isLeafNode()||t.forEachChild(Pe,(function(t,n){e.push(new ge(t,n))})):this.writeTree_.children.inorderTraversal((function(t,n){null!=n.value&&e.push(new ge(t,n.value))})),e},e.prototype.childCompoundWrite=function(t){if(t.isEmpty())return this;var n=this.getCompleteNode(t);return new e(null!=n?new st(n):this.writeTree_.subtree(t))},e.prototype.isEmpty=function(){return this.writeTree_.isEmpty()},e.prototype.apply=function(e){return function e(t,n,r){if(null!=n.value)return r.updateChild(t,n.value);var i=null;return n.children.inorderTraversal((function(n,o){".priority"===n?(u.assert(null!==o.value,"Priority writes must always be leaf nodes"),i=o.value):r=e(t.child(n),o,r)})),r.getChild(t).isEmpty()||null===i||(r=r.updateChild(t.child(".priority"),i)),r}
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */(q.Empty,this.writeTree_,e)},e.Empty=new e(new st(null)),e}();
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */var Ct=function(){function e(){this.visibleWrites_=St.Empty,this.allWrites_=[],this.lastWriteId_=-1}return e.prototype.childWrites=function(e){return new Tt(e,this)},e.prototype.addOverwrite=function(e,t,n,r){u.assert(n>this.lastWriteId_,"Stacking an older write on top of newer ones"),void 0===r&&(r=!0),this.allWrites_.push({path:e,snap:t,writeId:n,visible:r}),r&&(this.visibleWrites_=this.visibleWrites_.addWrite(e,t)),this.lastWriteId_=n},e.prototype.addMerge=function(e,t,n){u.assert(n>this.lastWriteId_,"Stacking an older merge on top of newer ones"),this.allWrites_.push({path:e,children:t,writeId:n,visible:!0}),this.visibleWrites_=this.visibleWrites_.addWrites(e,t),this.lastWriteId_=n},e.prototype.getWrite=function(e){for(var t=0;t<this.allWrites_.length;t++){var n=this.allWrites_[t];if(n.writeId===e)return n}return null},e.prototype.removeWrite=function(e){var t=this,n=this.allWrites_.findIndex((function(t){return t.writeId===e}));u.assert(n>=0,"removeWrite called with nonexistent writeId.");var r=this.allWrites_[n];this.allWrites_.splice(n,1);for(var i=r.visible,o=!1,a=this.allWrites_.length-1;i&&a>=0;){var s=this.allWrites_[a];s.visible&&(a>=n&&this.recordContainsPath_(s,r.path)?i=!1:r.path.contains(s.path)&&(o=!0)),a--}if(i){if(o)return this.resetTree_(),!0;r.snap?this.visibleWrites_=this.visibleWrites_.removeWrite(r.path):L(r.children,(function(e){t.visibleWrites_=t.visibleWrites_.removeWrite(r.path.child(e))}));return!0}return!1},e.prototype.getCompleteWriteData=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcCompleteEventCache=function(t,n,r,i){if(r||i){var o=this.visibleWrites_.childCompoundWrite(t);if(!i&&o.isEmpty())return n;if(i||null!=n||o.hasCompleteWrite(q.Empty)){var a=e.layerTree_(this.allWrites_,(function(e){return(e.visible||i)&&(!r||!~r.indexOf(e.writeId))&&(e.path.contains(t)||t.contains(e.path))}),t);c=n||Ve.EMPTY_NODE;return a.apply(c)}return null}var s=this.visibleWrites_.getCompleteNode(t);if(null!=s)return s;var u=this.visibleWrites_.childCompoundWrite(t);if(u.isEmpty())return n;if(null!=n||u.hasCompleteWrite(q.Empty)){var c=n||Ve.EMPTY_NODE;return u.apply(c)}return null},e.prototype.calcCompleteEventChildren=function(e,t){var n=Ve.EMPTY_NODE,r=this.visibleWrites_.getCompleteNode(e);if(r)return r.isLeafNode()||r.forEachChild(Pe,(function(e,t){n=n.updateImmediateChild(e,t)})),n;if(t){var i=this.visibleWrites_.childCompoundWrite(e);return t.forEachChild(Pe,(function(e,t){var r=i.childCompoundWrite(new q(e)).apply(t);n=n.updateImmediateChild(e,r)})),i.getCompleteChildren().forEach((function(e){n=n.updateImmediateChild(e.name,e.node)})),n}return this.visibleWrites_.childCompoundWrite(e).getCompleteChildren().forEach((function(e){n=n.updateImmediateChild(e.name,e.node)})),n},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n,r){u.assert(n||r,"Either existingEventSnap or existingServerSnap must exist");var i=e.child(t);if(this.visibleWrites_.hasCompleteWrite(i))return null;var o=this.visibleWrites_.childCompoundWrite(i);return o.isEmpty()?r.getChild(t):o.apply(r.getChild(t))},e.prototype.calcCompleteChild=function(e,t,n){var r=e.child(t),i=this.visibleWrites_.getCompleteNode(r);return null!=i?i:n.isCompleteForChild(t)?this.visibleWrites_.childCompoundWrite(r).apply(n.getNode().getImmediateChild(t)):null},e.prototype.shadowingWrite=function(e){return this.visibleWrites_.getCompleteNode(e)},e.prototype.calcIndexedSlice=function(e,t,n,r,i,o){var a,s=this.visibleWrites_.childCompoundWrite(e),u=s.getCompleteNode(q.Empty);if(null!=u)a=u;else{if(null==t)return[];a=s.apply(t)}if((a=a.withIndex(o)).isEmpty()||a.isLeafNode())return[];for(var c=[],l=o.getCompare(),f=i?a.getReverseIteratorFrom(n,o):a.getIteratorFrom(n,o),h=f.getNext();h&&c.length<r;)0!==l(h,n)&&c.push(h),h=f.getNext();return c},e.prototype.recordContainsPath_=function(e,t){if(e.snap)return e.path.contains(t);for(var n in e.children)if(e.children.hasOwnProperty(n)&&e.path.child(n).contains(t))return!0;return!1},e.prototype.resetTree_=function(){this.visibleWrites_=e.layerTree_(this.allWrites_,e.DefaultFilter_,q.Empty),this.allWrites_.length>0?this.lastWriteId_=this.allWrites_[this.allWrites_.length-1].writeId:this.lastWriteId_=-1},e.DefaultFilter_=function(e){return e.visible},e.layerTree_=function(e,t,n){for(var r=St.Empty,i=0;i<e.length;++i){var o=e[i];if(t(o)){var a=o.path,s=void 0;if(o.snap)n.contains(a)?(s=q.relativePath(n,a),r=r.addWrite(s,o.snap)):a.contains(n)&&(s=q.relativePath(a,n),r=r.addWrite(q.Empty,o.snap.getChild(s)));else{if(!o.children)throw u.assertionError("WriteRecord should have .snap or .children");if(n.contains(a))s=q.relativePath(n,a),r=r.addWrites(s,o.children);else if(a.contains(n))if((s=q.relativePath(a,n)).isEmpty())r=r.addWrites(q.Empty,o.children);else{var c=u.safeGet(o.children,s.getFront());if(c){var l=c.getChild(s.popFront());r=r.addWrite(q.Empty,l)}}}}}return r},e}(),Tt=function(){function e(e,t){this.treePath_=e,this.writeTree_=t}return e.prototype.calcCompleteEventCache=function(e,t,n){return this.writeTree_.calcCompleteEventCache(this.treePath_,e,t,n)},e.prototype.calcCompleteEventChildren=function(e){return this.writeTree_.calcCompleteEventChildren(this.treePath_,e)},e.prototype.calcEventCacheAfterServerOverwrite=function(e,t,n){return this.writeTree_.calcEventCacheAfterServerOverwrite(this.treePath_,e,t,n)},e.prototype.shadowingWrite=function(e){return this.writeTree_.shadowingWrite(this.treePath_.child(e))},e.prototype.calcIndexedSlice=function(e,t,n,r,i){return this.writeTree_.calcIndexedSlice(this.treePath_,e,t,n,r,i)},e.prototype.calcCompleteChild=function(e,t){return this.writeTree_.calcCompleteChild(this.treePath_,e,t)},e.prototype.child=function(t){return new e(this.treePath_.child(t),this.writeTree_)},e}(),kt=function(){function e(e){this.listenProvider_=e,this.syncPointTree_=st.Empty,this.pendingWriteTree_=new Ct,this.tagToQueryMap=new Map,this.queryToTagMap=new Map}return e.prototype.applyUserOverwrite=function(e,t,n,r){return this.pendingWriteTree_.addOverwrite(e,t,n,r),r?this.applyOperationToSyncPoints_(new ct(ot.User,e,t)):[]},e.prototype.applyUserMerge=function(e,t,n){this.pendingWriteTree_.addMerge(e,t,n);var r=st.fromObject(t);return this.applyOperationToSyncPoints_(new lt(ot.User,e,r))},e.prototype.ackUserWrite=function(e,t){void 0===t&&(t=!1);var n=this.pendingWriteTree_.getWrite(e);if(this.pendingWriteTree_.removeWrite(e)){var r=st.Empty;return null!=n.snap?r=r.set(q.Empty,!0):L(n.children,(function(e,t){r=r.set(new q(e),t)})),this.applyOperationToSyncPoints_(new at(n.path,r,t))}return[]},e.prototype.applyServerOverwrite=function(e,t){return this.applyOperationToSyncPoints_(new ct(ot.Server,e,t))},e.prototype.applyServerMerge=function(e,t){var n=st.fromObject(t);return this.applyOperationToSyncPoints_(new lt(ot.Server,e,n))},e.prototype.applyListenComplete=function(e){return this.applyOperationToSyncPoints_(new ut(ot.Server,e))},e.prototype.applyTaggedQueryOverwrite=function(t,n,r){var i=this.queryKeyForTag_(r);if(null!=i){var o=e.parseQueryKey_(i),a=o.path,s=o.queryId,u=q.relativePath(a,t),c=new ct(ot.forServerTaggedQuery(s),u,n);return this.applyTaggedOperation_(a,c)}return[]},e.prototype.applyTaggedQueryMerge=function(t,n,r){var i=this.queryKeyForTag_(r);if(i){var o=e.parseQueryKey_(i),a=o.path,s=o.queryId,u=q.relativePath(a,t),c=st.fromObject(n),l=new lt(ot.forServerTaggedQuery(s),u,c);return this.applyTaggedOperation_(a,l)}return[]},e.prototype.applyTaggedListenComplete=function(t,n){var r=this.queryKeyForTag_(n);if(r){var i=e.parseQueryKey_(r),o=i.path,a=i.queryId,s=q.relativePath(o,t),u=new ut(ot.forServerTaggedQuery(a),s);return this.applyTaggedOperation_(o,u)}return[]},e.prototype.addEventRegistration=function(t,n){var r=t.path,i=null,o=!1;this.syncPointTree_.foreachOnPath(r,(function(e,t){var n=q.relativePath(e,r);i=i||t.getCompleteServerCache(n),o=o||t.hasCompleteView()}));var a,s=this.syncPointTree_.get(r);(s?(o=o||s.hasCompleteView(),i=i||s.getCompleteServerCache(q.Empty)):(s=new Et,this.syncPointTree_=this.syncPointTree_.set(r,s)),null!=i)?a=!0:(a=!1,i=Ve.EMPTY_NODE,this.syncPointTree_.subtree(r).foreachChild((function(e,t){var n=t.getCompleteServerCache(q.Empty);n&&(i=i.updateImmediateChild(e,n))})));var c=s.viewExistsForQuery(t);if(!c&&!t.getQueryParams().loadsAllData()){var l=e.makeQueryKey_(t);u.assert(!this.queryToTagMap.has(l),"View does not exist, but we have a tag");var f=e.getNextQueryTag_();this.queryToTagMap.set(l,f),this.tagToQueryMap.set(f,l)}var h=this.pendingWriteTree_.childWrites(r),p=s.addEventRegistration(t,n,h,i,a);if(!c&&!o){var d=s.viewForQuery(t);p=p.concat(this.setupListener_(t,d))}return p},e.prototype.removeEventRegistration=function(t,n,r){var i=this,o=t.path,a=this.syncPointTree_.get(o),s=[];if(a&&("default"===t.queryIdentifier()||a.viewExistsForQuery(t))){var u=a.removeEventRegistration(t,n,r);a.isEmpty()&&(this.syncPointTree_=this.syncPointTree_.remove(o));var c=u.removed;s=u.events;var l=-1!==c.findIndex((function(e){return e.getQueryParams().loadsAllData()})),f=this.syncPointTree_.findOnPath(o,(function(e,t){return t.hasCompleteView()}));if(l&&!f){var h=this.syncPointTree_.subtree(o);if(!h.isEmpty())for(var p=this.collectDistinctViewsForSubTree_(h),d=0;d<p.length;++d){var v=p[d],y=v.getQuery(),g=this.createListenerForView_(v);this.listenProvider_.startListening(e.queryForListening_(y),this.tagForQuery_(y),g.hashFn,g.onComplete)}}if(!f&&c.length>0&&!r)if(l){this.listenProvider_.stopListening(e.queryForListening_(t),null)}else c.forEach((function(t){var n=i.queryToTagMap.get(e.makeQueryKey_(t));i.listenProvider_.stopListening(e.queryForListening_(t),n)}));this.removeTags_(c)}return s},e.prototype.calcCompleteEventCache=function(e,t){var n=this.pendingWriteTree_,r=this.syncPointTree_.findOnPath(e,(function(t,n){var r=q.relativePath(t,e),i=n.getCompleteServerCache(r);if(i)return i}));return n.calcCompleteEventCache(e,r,t,!0)},e.prototype.collectDistinctViewsForSubTree_=function(e){return e.fold((function(e,t,n){if(t&&t.hasCompleteView())return[t.getCompleteView()];var r=[];return t&&(r=t.getQueryViews()),L(n,(function(e,t){r=r.concat(t)})),r}))},e.prototype.removeTags_=function(t){for(var n=0;n<t.length;++n){var r=t[n];if(!r.getQueryParams().loadsAllData()){var i=e.makeQueryKey_(r),o=this.queryToTagMap.get(i);this.queryToTagMap.delete(i),this.tagToQueryMap.delete(o)}}},e.queryForListening_=function(e){return e.getQueryParams().loadsAllData()&&!e.getQueryParams().isDefault()?e.getRef():e},e.prototype.setupListener_=function(t,n){var r=t.path,i=this.tagForQuery_(t),o=this.createListenerForView_(n),a=this.listenProvider_.startListening(e.queryForListening_(t),i,o.hashFn,o.onComplete),s=this.syncPointTree_.subtree(r);if(i)u.assert(!s.value.hasCompleteView(),"If we're adding a query, it shouldn't be shadowed");else for(var c=s.fold((function(e,t,n){if(!e.isEmpty()&&t&&t.hasCompleteView())return[t.getCompleteView().getQuery()];var r=[];return t&&(r=r.concat(t.getQueryViews().map((function(e){return e.getQuery()})))),L(n,(function(e,t){r=r.concat(t)})),r})),l=0;l<c.length;++l){var f=c[l];this.listenProvider_.stopListening(e.queryForListening_(f),this.tagForQuery_(f))}return a},e.prototype.createListenerForView_=function(e){var t=this,n=e.getQuery(),r=this.tagForQuery_(n);return{hashFn:function(){return(e.getServerCache()||Ve.EMPTY_NODE).hash()},onComplete:function(e){if("ok"===e)return r?t.applyTaggedListenComplete(n.path,r):t.applyListenComplete(n.path);var i=function(e,t){var n="Unknown Error";"too_big"===e?n="The data requested exceeds the maximum size that can be accessed with a single request.":"permission_denied"===e?n="Client doesn't have permission to access the desired data.":"unavailable"===e&&(n="The service is unavailable");var r=new Error(e+" at "+t.path.toString()+": "+n);return r.code=e.toUpperCase(),r}(e,n);return t.removeEventRegistration(n,null,i)}}},e.makeQueryKey_=function(e){return e.path.toString()+"$"+e.queryIdentifier()},e.parseQueryKey_=function(e){var t=e.indexOf("$");return u.assert(-1!==t&&t<e.length-1,"Bad queryKey."),{queryId:e.substr(t+1),path:new q(e.substr(0,t))}},e.prototype.queryKeyForTag_=function(e){return this.tagToQueryMap.get(e)},e.prototype.tagForQuery_=function(t){var n=e.makeQueryKey_(t);return this.queryToTagMap.get(n)},e.getNextQueryTag_=function(){return e.nextQueryTag_++},e.prototype.applyTaggedOperation_=function(e,t){var n=this.syncPointTree_.get(e);u.assert(n,"Missing sync point for query tag that we're tracking");var r=this.pendingWriteTree_.childWrites(e);return n.applyOperation(t,r,null)},e.prototype.applyOperationToSyncPoints_=function(e){return this.applyOperationHelper_(e,this.syncPointTree_,null,this.pendingWriteTree_.childWrites(q.Empty))},e.prototype.applyOperationHelper_=function(e,t,n,r){if(e.path.isEmpty())return this.applyOperationDescendantsHelper_(e,t,n,r);var i=t.get(q.Empty);null==n&&null!=i&&(n=i.getCompleteServerCache(q.Empty));var o=[],a=e.path.getFront(),s=e.operationForChild(a),u=t.children.get(a);if(u&&s){var c=n?n.getImmediateChild(a):null,l=r.child(a);o=o.concat(this.applyOperationHelper_(s,u,c,l))}return i&&(o=o.concat(i.applyOperation(e,r,n))),o},e.prototype.applyOperationDescendantsHelper_=function(e,t,n,r){var i=this,o=t.get(q.Empty);null==n&&null!=o&&(n=o.getCompleteServerCache(q.Empty));var a=[];return t.children.inorderTraversal((function(t,o){var s=n?n.getImmediateChild(t):null,u=r.child(t),c=e.operationForChild(t);c&&(a=a.concat(i.applyOperationDescendantsHelper_(c,o,s,u)))})),o&&(a=a.concat(o.applyOperation(e,r,n))),a},e.nextQueryTag_=1,e}(),xt=function(){function e(){this.rootNode_=Ve.EMPTY_NODE}return e.prototype.getNode=function(e){return this.rootNode_.getChild(e)},e.prototype.updateSnapshot=function(e,t){this.rootNode_=this.rootNode_.updateChild(e,t)},e}(),It=function(){function e(e,t){var n=this;this.app_=e,this.authProvider_=t,this.auth_=null,this.auth_=t.getImmediate({optional:!0}),this.auth_||t.get().then((function(e){return n.auth_=e}))}return e.prototype.getToken=function(e){return this.auth_?this.auth_.getToken(e).catch((function(e){return e&&"auth/token-not-initialized"===e.code?(S("Got auth/token-not-initialized error.  Treating as null token."),null):Promise.reject(e)})):Promise.resolve(null)},e.prototype.addTokenChangeListener=function(e){this.auth_?this.auth_.addAuthTokenListener(e):(setTimeout((function(){return e(null)}),0),this.authProvider_.get().then((function(t){return t.addAuthTokenListener(e)})))},e.prototype.removeTokenChangeListener=function(e){this.authProvider_.get().then((function(t){return t.removeAuthTokenListener(e)}))},e.prototype.notifyForInvalidToken=function(){var e='Provided authentication credentials for the app named "'+this.app_.name+'" are invalid. This usually indicates your app was not initialized correctly. ';"credential"in this.app_.options?e+='Make sure the "credential" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':"serviceAccount"in this.app_.options?e+='Make sure the "serviceAccount" property provided to initializeApp() is authorized to access the specified "databaseURL" and is from the correct project.':e+='Make sure the "apiKey" and "databaseURL" properties provided to initializeApp() match the values provided for your app at https://console.firebase.google.com/.',x(e)},e}(),Pt=function(){function e(){this.counters_={}}return e.prototype.incrementCounter=function(e,t){void 0===t&&(t=1),u.contains(this.counters_,e)||(this.counters_[e]=0),this.counters_[e]+=t},e.prototype.get=function(){return u.deepCopy(this.counters_)},e}(),Ot=function(){function e(){}return e.getCollection=function(e){var t=e.toString();return this.collections_[t]||(this.collections_[t]=new Pt),this.collections_[t]},e.getOrCreateReporter=function(e,t){var n=e.toString();return this.reporters_[n]||(this.reporters_[n]=t()),this.reporters_[n]},e.collections_={},e.reporters_={},e}(),Nt=function(){function e(e){this.collection_=e,this.last_=null}return e.prototype.get=function(){var e=this.collection_.get(),t=s.__assign({},e);return this.last_&&L(this.last_,(function(e,n){t[e]=t[e]-n})),this.last_=e,t},e}(),At=function(){function e(e,t){this.server_=t,this.statsToReport_={},this.statsListener_=new Nt(e);var n=1e4+2e4*Math.random();V(this.reportStats_.bind(this),Math.floor(n))}return e.prototype.includeStat=function(e){this.statsToReport_[e]=!0},e.prototype.reportStats_=function(){var e=this,t=this.statsListener_.get(),n={},r=!1;L(t,(function(t,i){i>0&&u.contains(e.statsToReport_,t)&&(n[t]=i,r=!0)})),r&&this.server_.reportStats(n),V(this.reportStats_.bind(this),Math.floor(2*Math.random()*3e5))},e}(),Rt=function(){function e(){this.eventLists_=[],this.recursionDepth_=0}return e.prototype.queueEvents=function(e){for(var t=null,n=0;n<e.length;n++){var r=e[n],i=r.getPath();null===t||i.equals(t.getPath())||(this.eventLists_.push(t),t=null),null===t&&(t=new Dt(i)),t.add(r)}t&&this.eventLists_.push(t)},e.prototype.raiseEventsAtPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_((function(t){return t.equals(e)}))},e.prototype.raiseEventsForChangedPath=function(e,t){this.queueEvents(t),this.raiseQueuedEventsMatchingPredicate_((function(t){return t.contains(e)||e.contains(t)}))},e.prototype.raiseQueuedEventsMatchingPredicate_=function(e){this.recursionDepth_++;for(var t=!0,n=0;n<this.eventLists_.length;n++){var r=this.eventLists_[n];if(r)e(r.getPath())?(this.eventLists_[n].raise(),this.eventLists_[n]=null):t=!1}t&&(this.eventLists_=[]),this.recursionDepth_--},e}(),Dt=function(){function e(e){this.path_=e,this.events_=[]}return e.prototype.add=function(e){this.events_.push(e)},e.prototype.raise=function(){for(var e=0;e<this.events_.length;e++){var t=this.events_[e];if(null!==t){this.events_[e]=null;var n=t.getEventRunner();_&&S("event: "+t.toString()),W(n)}}},e.prototype.getPath=function(){return this.path_},e}(),Mt=function(){function e(e){this.allowedEvents_=e,this.listeners_={},u.assert(Array.isArray(e)&&e.length>0,"Requires a non-empty array")}return e.prototype.trigger=function(e){for(var t=[],n=1;n<arguments.length;n++)t[n-1]=arguments[n];if(Array.isArray(this.listeners_[e]))for(var r=s.__spread(this.listeners_[e]),i=0;i<r.length;i++)r[i].callback.apply(r[i].context,t)},e.prototype.on=function(e,t,n){this.validateEventType_(e),this.listeners_[e]=this.listeners_[e]||[],this.listeners_[e].push({callback:t,context:n});var r=this.getInitialEvent(e);r&&t.apply(n,r)},e.prototype.off=function(e,t,n){this.validateEventType_(e);for(var r=this.listeners_[e]||[],i=0;i<r.length;i++)if(r[i].callback===t&&(!n||n===r[i].context))return void r.splice(i,1)},e.prototype.validateEventType_=function(e){u.assert(this.allowedEvents_.find((function(t){return t===e})),"Unknown event: "+e)},e}(),Lt=function(e){function t(){var t,n,r=e.call(this,["visible"])||this;return"undefined"!=typeof document&&void 0!==document.addEventListener&&(void 0!==document.hidden?(n="visibilitychange",t="hidden"):void 0!==document.mozHidden?(n="mozvisibilitychange",t="mozHidden"):void 0!==document.msHidden?(n="msvisibilitychange",t="msHidden"):void 0!==document.webkitHidden&&(n="webkitvisibilitychange",t="webkitHidden")),r.visible_=!0,n&&document.addEventListener(n,(function(){var e=!document[t];e!==r.visible_&&(r.visible_=e,r.trigger("visible",e))}),!1),r}return s.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return u.assert("visible"===e,"Unknown event type: "+e),[this.visible_]},t}(Mt),Ft=function(e){function t(){var t=e.call(this,["online"])||this;return t.online_=!0,"undefined"==typeof window||void 0===window.addEventListener||u.isMobileCordova()||(window.addEventListener("online",(function(){t.online_||(t.online_=!0,t.trigger("online",!0))}),!1),window.addEventListener("offline",(function(){t.online_&&(t.online_=!1,t.trigger("online",!1))}),!1)),t}return s.__extends(t,e),t.getInstance=function(){return new t},t.prototype.getInitialEvent=function(e){return u.assert("online"===e,"Unknown event type: "+e),[this.online_]},t.prototype.currentlyOnline=function(){return this.online_},t}(Mt),jt=function(){function e(e){this.onMessage_=e,this.pendingResponses=[],this.currentResponseNum=0,this.closeAfterResponse=-1,this.onClose=null}return e.prototype.closeAfter=function(e,t){this.closeAfterResponse=e,this.onClose=t,this.closeAfterResponse<this.currentResponseNum&&(this.onClose(),this.onClose=null)},e.prototype.handleResponse=function(e,t){var n=this;this.pendingResponses[e]=t;for(var r=function(){var e=i.pendingResponses[i.currentResponseNum];delete i.pendingResponses[i.currentResponseNum];for(var t=function(t){e[t]&&W((function(){n.onMessage_(e[t])}))},r=0;r<e.length;++r)t(r);if(i.currentResponseNum===i.closeAfterResponse)return i.onClose&&(i.onClose(),i.onClose=null),"break";i.currentResponseNum++},i=this;this.pendingResponses[this.currentResponseNum];){if("break"===r())break}},e}(),Ut=function(){function e(e,t,n,r){this.connId=e,this.repoInfo=t,this.transportSessionId=n,this.lastSessionId=r,this.bytesSent=0,this.bytesReceived=0,this.everConnected_=!1,this.log_=C(e),this.stats_=Ot.getCollection(t),this.urlFn=function(e){return t.connectionURL("long_polling",e)}}return e.prototype.open=function(e,t){var n=this;this.curSegmentNum=0,this.onDisconnect_=t,this.myPacketOrderer=new jt(e),this.isClosed_=!1,this.connectTimeoutTimer_=setTimeout((function(){n.log_("Timed out trying to connect."),n.onClosed_(),n.connectTimeoutTimer_=null}),Math.floor(3e4)),function(e){if(u.isNodeSdk()||"complete"===document.readyState)e();else{var t=!1,n=function(){document.body?t||(t=!0,e()):setTimeout(n,Math.floor(10))};document.addEventListener?(document.addEventListener("DOMContentLoaded",n,!1),window.addEventListener("load",n,!1)):document.attachEvent&&(document.attachEvent("onreadystatechange",(function(){"complete"===document.readyState&&n()})),window.attachEvent("onload",n))}}((function(){if(!n.isClosed_){n.scriptTagHolder=new Wt((function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.__read(e,5),i=r[0],o=r[1],a=r[2];r[3],r[4];if(n.incrementIncomingBytes_(e),n.scriptTagHolder)if(n.connectTimeoutTimer_&&(clearTimeout(n.connectTimeoutTimer_),n.connectTimeoutTimer_=null),n.everConnected_=!0,"start"===i)n.id=o,n.password=a;else{if("close"!==i)throw new Error("Unrecognized command received: "+i);o?(n.scriptTagHolder.sendNewPolls=!1,n.myPacketOrderer.closeAfter(o,(function(){n.onClosed_()}))):n.onClosed_()}}),(function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var r=s.__read(e,2),i=r[0],o=r[1];n.incrementIncomingBytes_(e),n.myPacketOrderer.handleResponse(i,o)}),(function(){n.onClosed_()}),n.urlFn);var e={start:"t"};e.ser=Math.floor(1e8*Math.random()),n.scriptTagHolder.uniqueCallbackIdentifier&&(e.cb=n.scriptTagHolder.uniqueCallbackIdentifier),e.v="5",n.transportSessionId&&(e.s=n.transportSessionId),n.lastSessionId&&(e.ls=n.lastSessionId),"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(e.r="f");var t=n.urlFn(e);n.log_("Connecting via long-poll to "+t),n.scriptTagHolder.addTag(t,(function(){}))}}))},e.prototype.start=function(){this.scriptTagHolder.startLongPoll(this.id,this.password),this.addDisconnectPingFrame(this.id,this.password)},e.forceAllow=function(){e.forceAllow_=!0},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){return!u.isNodeSdk()&&(!!e.forceAllow_||!(e.forceDisallow_||"undefined"==typeof document||null==document.createElement||"object"==typeof window&&window.chrome&&window.chrome.extension&&!/^chrome/.test(window.location.href)||"object"==typeof Windows&&"object"==typeof Windows.UI))},e.prototype.markConnectionHealthy=function(){},e.prototype.shutdown_=function(){this.isClosed_=!0,this.scriptTagHolder&&(this.scriptTagHolder.close(),this.scriptTagHolder=null),this.myDisconnFrame&&(document.body.removeChild(this.myDisconnFrame),this.myDisconnFrame=null),this.connectTimeoutTimer_&&(clearTimeout(this.connectTimeoutTimer_),this.connectTimeoutTimer_=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("Longpoll is closing itself"),this.shutdown_(),this.onDisconnect_&&(this.onDisconnect_(this.everConnected_),this.onDisconnect_=null))},e.prototype.close=function(){this.isClosed_||(this.log_("Longpoll is being closed."),this.shutdown_())},e.prototype.send=function(e){var t=u.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);for(var n=u.base64Encode(t),r=M(n,1840),i=0;i<r.length;i++)this.scriptTagHolder.enqueueSegment(this.curSegmentNum,r.length,r[i]),this.curSegmentNum++},e.prototype.addDisconnectPingFrame=function(e,t){if(!u.isNodeSdk()){this.myDisconnFrame=document.createElement("iframe");var n={dframe:"t"};n.id=e,n.pw=t,this.myDisconnFrame.src=this.urlFn(n),this.myDisconnFrame.style.display="none",document.body.appendChild(this.myDisconnFrame)}},e.prototype.incrementIncomingBytes_=function(e){var t=u.stringify(e).length;this.bytesReceived+=t,this.stats_.incrementCounter("bytes_received",t)},e}(),Wt=function(){function e(t,n,r,i){if(this.onDisconnect=r,this.urlFn=i,this.outstandingRequests=new Set,this.pendingSegs=[],this.currentSerial=Math.floor(1e8*Math.random()),this.sendNewPolls=!0,u.isNodeSdk())this.commandCB=t,this.onMessageCB=n;else{this.uniqueCallbackIdentifier=g(),window["pLPCommand"+this.uniqueCallbackIdentifier]=t,window["pRTLPCB"+this.uniqueCallbackIdentifier]=n,this.myIFrame=e.createIFrame_();var o="";if(this.myIFrame.src&&"javascript:"===this.myIFrame.src.substr(0,"javascript:".length))o='<script>document.domain="'+document.domain+'";<\/script>';var a="<html><body>"+o+"</body></html>";try{this.myIFrame.doc.open(),this.myIFrame.doc.write(a),this.myIFrame.doc.close()}catch(e){S("frame writing exception"),e.stack&&S(e.stack),S(e)}}}return e.createIFrame_=function(){var e=document.createElement("iframe");if(e.style.display="none",!document.body)throw"Document body has not initialized. Wait to initialize Firebase until after the document is ready.";document.body.appendChild(e);try{e.contentWindow.document||S("No IE domain setting required")}catch(n){var t=document.domain;e.src="javascript:void((function(){document.open();document.domain='"+t+"';document.close();})())"}return e.contentDocument?e.doc=e.contentDocument:e.contentWindow?e.doc=e.contentWindow.document:e.document&&(e.doc=e.document),e},e.prototype.close=function(){var e=this;this.alive=!1,this.myIFrame&&(this.myIFrame.doc.body.innerHTML="",setTimeout((function(){null!==e.myIFrame&&(document.body.removeChild(e.myIFrame),e.myIFrame=null)}),Math.floor(0)));var t=this.onDisconnect;t&&(this.onDisconnect=null,t())},e.prototype.startLongPoll=function(e,t){for(this.myID=e,this.myPW=t,this.alive=!0;this.newRequest_(););},e.prototype.newRequest_=function(){if(this.alive&&this.sendNewPolls&&this.outstandingRequests.size<(this.pendingSegs.length>0?2:1)){this.currentSerial++;var e={};e.id=this.myID,e.pw=this.myPW,e.ser=this.currentSerial;for(var t=this.urlFn(e),n="",r=0;this.pendingSegs.length>0;){if(!(this.pendingSegs[0].d.length+30+n.length<=1870))break;var i=this.pendingSegs.shift();n=n+"&seg"+r+"="+i.seg+"&ts"+r+"="+i.ts+"&d"+r+"="+i.d,r++}return t+=n,this.addLongPollTag_(t,this.currentSerial),!0}return!1},e.prototype.enqueueSegment=function(e,t,n){this.pendingSegs.push({seg:e,ts:t,d:n}),this.alive&&this.newRequest_()},e.prototype.addLongPollTag_=function(e,t){var n=this;this.outstandingRequests.add(t);var r=function(){n.outstandingRequests.delete(t),n.newRequest_()},i=setTimeout(r,Math.floor(25e3));this.addTag(e,(function(){clearTimeout(i),r()}))},e.prototype.addTag=function(e,t){var n=this;u.isNodeSdk()?this.doNodeLongPoll(e,t):setTimeout((function(){try{if(!n.sendNewPolls)return;var r=n.myIFrame.doc.createElement("script");r.type="text/javascript",r.async=!0,r.src=e,r.onload=r.onreadystatechange=function(){var e=r.readyState;e&&"loaded"!==e&&"complete"!==e||(r.onload=r.onreadystatechange=null,r.parentNode&&r.parentNode.removeChild(r),t())},r.onerror=function(){S("Long-poll script failed to load: "+e),n.sendNewPolls=!1,n.close()},n.myIFrame.doc.body.appendChild(r)}catch(e){}}),Math.floor(1))},e}(),Vt="";
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var qt=null;"undefined"!=typeof MozWebSocket?qt=MozWebSocket:"undefined"!=typeof WebSocket&&(qt=WebSocket);var Bt=function(){function e(t,n,r,i){this.connId=t,this.keepaliveTimer=null,this.frames=null,this.totalFrames=0,this.bytesSent=0,this.bytesReceived=0,this.log_=C(this.connId),this.stats_=Ot.getCollection(n),this.connURL=e.connectionURL_(n,r,i)}return e.connectionURL_=function(e,t,n){var r={v:"5"};return!u.isNodeSdk()&&"undefined"!=typeof location&&location.href&&-1!==location.href.indexOf("firebaseio.com")&&(r.r="f"),t&&(r.s=t),n&&(r.ls=n),e.connectionURL("websocket",r)},e.prototype.open=function(e,t){var n=this;this.onDisconnect=t,this.onMessage=e,this.log_("Websocket connecting to "+this.connURL),this.everConnected_=!1,d.set("previous_websocket_failure",!0);try{if(u.isNodeSdk()){var i=u.CONSTANTS.NODE_ADMIN?"AdminNode":"Node",o={headers:{"User-Agent":"Firebase/5/"+Vt+"/"+r.platform+"/"+i}},a=r.env,s=0===this.connURL.indexOf("wss://")?a.HTTPS_PROXY||a.https_proxy:a.HTTP_PROXY||a.http_proxy;s&&(o.proxy={origin:s}),this.mySock=new qt(this.connURL,[],o)}else this.mySock=new qt(this.connURL)}catch(e){this.log_("Error instantiating WebSocket.");var c=e.message||e.data;return c&&this.log_(c),void this.onClosed_()}this.mySock.onopen=function(){n.log_("Websocket connected."),n.everConnected_=!0},this.mySock.onclose=function(){n.log_("Websocket connection was disconnected."),n.mySock=null,n.onClosed_()},this.mySock.onmessage=function(e){n.handleIncomingFrame(e)},this.mySock.onerror=function(e){n.log_("WebSocket error.  Closing connection.");var t=e.message||e.data;t&&n.log_(t),n.onClosed_()}},e.prototype.start=function(){},e.forceDisallow=function(){e.forceDisallow_=!0},e.isAvailable=function(){var t=!1;if("undefined"!=typeof navigator&&navigator.userAgent){var n=navigator.userAgent.match(/Android ([0-9]{0,}\.[0-9]{0,})/);n&&n.length>1&&parseFloat(n[1])<4.4&&(t=!0)}return!t&&null!==qt&&!e.forceDisallow_},e.previouslyFailed=function(){return d.isInMemoryStorage||!0===d.get("previous_websocket_failure")},e.prototype.markConnectionHealthy=function(){d.remove("previous_websocket_failure")},e.prototype.appendFrame_=function(e){if(this.frames.push(e),this.frames.length===this.totalFrames){var t=this.frames.join("");this.frames=null;var n=u.jsonEval(t);this.onMessage(n)}},e.prototype.handleNewFrameCount_=function(e){this.totalFrames=e,this.frames=[]},e.prototype.extractFrameCount_=function(e){if(u.assert(null===this.frames,"We already have a frame buffer"),e.length<=6){var t=Number(e);if(!isNaN(t))return this.handleNewFrameCount_(t),null}return this.handleNewFrameCount_(1),e},e.prototype.handleIncomingFrame=function(e){if(null!==this.mySock){var t=e.data;if(this.bytesReceived+=t.length,this.stats_.incrementCounter("bytes_received",t.length),this.resetKeepAlive(),null!==this.frames)this.appendFrame_(t);else{var n=this.extractFrameCount_(t);null!==n&&this.appendFrame_(n)}}},e.prototype.send=function(e){this.resetKeepAlive();var t=u.stringify(e);this.bytesSent+=t.length,this.stats_.incrementCounter("bytes_sent",t.length);var n=M(t,16384);n.length>1&&this.sendString_(String(n.length));for(var r=0;r<n.length;r++)this.sendString_(n[r])},e.prototype.shutdown_=function(){this.isClosed_=!0,this.keepaliveTimer&&(clearInterval(this.keepaliveTimer),this.keepaliveTimer=null),this.mySock&&(this.mySock.close(),this.mySock=null)},e.prototype.onClosed_=function(){this.isClosed_||(this.log_("WebSocket is closing itself"),this.shutdown_(),this.onDisconnect&&(this.onDisconnect(this.everConnected_),this.onDisconnect=null))},e.prototype.close=function(){this.isClosed_||(this.log_("WebSocket is being closed"),this.shutdown_())},e.prototype.resetKeepAlive=function(){var e=this;clearInterval(this.keepaliveTimer),this.keepaliveTimer=setInterval((function(){e.mySock&&e.sendString_("0"),e.resetKeepAlive()}),Math.floor(45e3))},e.prototype.sendString_=function(e){try{this.mySock.send(e)}catch(e){this.log_("Exception thrown from WebSocket.send():",e.message||e.data,"Closing connection."),setTimeout(this.onClosed_.bind(this),0)}},e.responsesRequiredToBeHealthy=2,e.healthyTimeout=3e4,e}(),Ht=function(){function e(e){this.initTransports_(e)}return Object.defineProperty(e,"ALL_TRANSPORTS",{get:function(){return[Ut,Bt]},enumerable:!0,configurable:!0}),e.prototype.initTransports_=function(t){var n,r,i=Bt&&Bt.isAvailable(),o=i&&!Bt.previouslyFailed();if(t.webSocketOnly&&(i||x("wss:// URL used, but browser isn't known to support websockets.  Trying anyway."),o=!0),o)this.transports_=[Bt];else{var a=this.transports_=[];try{for(var u=s.__values(e.ALL_TRANSPORTS),c=u.next();!c.done;c=u.next()){var l=c.value;l&&l.isAvailable()&&a.push(l)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}},e.prototype.initialTransport=function(){if(this.transports_.length>0)return this.transports_[0];throw new Error("No transports available")},e.prototype.upgradeTransport=function(){return this.transports_.length>1?this.transports_[1]:null},e}(),zt=function(){function e(e,t,n,r,i,o,a){this.id=e,this.repoInfo_=t,this.onMessage_=n,this.onReady_=r,this.onDisconnect_=i,this.onKill_=o,this.lastSessionId=a,this.connectionCount=0,this.pendingDataMessages=[],this.state_=0,this.log_=C("c:"+this.id+":"),this.transportManager_=new Ht(t),this.log_("Connection created"),this.start_()}return e.prototype.start_=function(){var e=this,t=this.transportManager_.initialTransport();this.conn_=new t(this.nextTransportId_(),this.repoInfo_,void 0,this.lastSessionId),this.primaryResponsesRequired_=t.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.conn_),r=this.disconnReceiver_(this.conn_);this.tx_=this.conn_,this.rx_=this.conn_,this.secondaryConn_=null,this.isHealthy_=!1,setTimeout((function(){e.conn_&&e.conn_.open(n,r)}),Math.floor(0));var i=t.healthyTimeout||0;i>0&&(this.healthyTimeout_=V((function(){e.healthyTimeout_=null,e.isHealthy_||(e.conn_&&e.conn_.bytesReceived>102400?(e.log_("Connection exceeded healthy timeout but has received "+e.conn_.bytesReceived+" bytes.  Marking connection healthy."),e.isHealthy_=!0,e.conn_.markConnectionHealthy()):e.conn_&&e.conn_.bytesSent>10240?e.log_("Connection exceeded healthy timeout but has sent "+e.conn_.bytesSent+" bytes.  Leaving connection alive."):(e.log_("Closing unhealthy connection after timeout."),e.close()))}),Math.floor(i)))},e.prototype.nextTransportId_=function(){return"c:"+this.id+":"+this.connectionCount++},e.prototype.disconnReceiver_=function(e){var t=this;return function(n){e===t.conn_?t.onConnectionLost_(n):e===t.secondaryConn_?(t.log_("Secondary connection lost."),t.onSecondaryConnectionLost_()):t.log_("closing an old connection")}},e.prototype.connReceiver_=function(e){var t=this;return function(n){2!==t.state_&&(e===t.rx_?t.onPrimaryMessageReceived_(n):e===t.secondaryConn_?t.onSecondaryMessageReceived_(n):t.log_("message on old connection"))}},e.prototype.sendRequest=function(e){var t={t:"d",d:e};this.sendData_(t)},e.prototype.tryCleanupConnection=function(){this.tx_===this.secondaryConn_&&this.rx_===this.secondaryConn_&&(this.log_("cleaning up and promoting a connection: "+this.secondaryConn_.connId),this.conn_=this.secondaryConn_,this.secondaryConn_=null)},e.prototype.onSecondaryControl_=function(e){if("t"in e){var t=e.t;"a"===t?this.upgradeIfSecondaryHealthy_():"r"===t?(this.log_("Got a reset on secondary, closing it"),this.secondaryConn_.close(),this.tx_!==this.secondaryConn_&&this.rx_!==this.secondaryConn_||this.close()):"o"===t&&(this.log_("got pong on secondary."),this.secondaryResponsesRequired_--,this.upgradeIfSecondaryHealthy_())}},e.prototype.onSecondaryMessageReceived_=function(e){var t=R("t",e),n=R("d",e);if("c"===t)this.onSecondaryControl_(n);else{if("d"!==t)throw new Error("Unknown protocol layer: "+t);this.pendingDataMessages.push(n)}},e.prototype.upgradeIfSecondaryHealthy_=function(){this.secondaryResponsesRequired_<=0?(this.log_("Secondary connection is healthy."),this.isHealthy_=!0,this.secondaryConn_.markConnectionHealthy(),this.proceedWithUpgrade_()):(this.log_("sending ping on secondary."),this.secondaryConn_.send({t:"c",d:{t:"p",d:{}}}))},e.prototype.proceedWithUpgrade_=function(){this.secondaryConn_.start(),this.log_("sending client ack on secondary"),this.secondaryConn_.send({t:"c",d:{t:"a",d:{}}}),this.log_("Ending transmission on primary"),this.conn_.send({t:"c",d:{t:"n",d:{}}}),this.tx_=this.secondaryConn_,this.tryCleanupConnection()},e.prototype.onPrimaryMessageReceived_=function(e){var t=R("t",e),n=R("d",e);"c"===t?this.onControl_(n):"d"===t&&this.onDataMessage_(n)},e.prototype.onDataMessage_=function(e){this.onPrimaryResponse_(),this.onMessage_(e)},e.prototype.onPrimaryResponse_=function(){this.isHealthy_||(this.primaryResponsesRequired_--,this.primaryResponsesRequired_<=0&&(this.log_("Primary connection is healthy."),this.isHealthy_=!0,this.conn_.markConnectionHealthy()))},e.prototype.onControl_=function(e){var t=R("t",e);if("d"in e){var n=e.d;if("h"===t)this.onHandshake_(n);else if("n"===t){this.log_("recvd end transmission on primary"),this.rx_=this.secondaryConn_;for(var r=0;r<this.pendingDataMessages.length;++r)this.onDataMessage_(this.pendingDataMessages[r]);this.pendingDataMessages=[],this.tryCleanupConnection()}else"s"===t?this.onConnectionShutdown_(n):"r"===t?this.onReset_(n):"e"===t?T("Server Error: "+n):"o"===t?(this.log_("got pong on primary."),this.onPrimaryResponse_(),this.sendPingOnPrimaryIfNecessary_()):T("Unknown control packet command: "+t)}},e.prototype.onHandshake_=function(e){var t=e.ts,n=e.v,r=e.h;this.sessionId=e.s,this.repoInfo_.updateHost(r),0===this.state_&&(this.conn_.start(),this.onConnectionEstablished_(this.conn_,t),"5"!==n&&x("Protocol version mismatch detected"),this.tryStartUpgrade_())},e.prototype.tryStartUpgrade_=function(){var e=this.transportManager_.upgradeTransport();e&&this.startUpgrade_(e)},e.prototype.startUpgrade_=function(e){var t=this;this.secondaryConn_=new e(this.nextTransportId_(),this.repoInfo_,this.sessionId),this.secondaryResponsesRequired_=e.responsesRequiredToBeHealthy||0;var n=this.connReceiver_(this.secondaryConn_),r=this.disconnReceiver_(this.secondaryConn_);this.secondaryConn_.open(n,r),V((function(){t.secondaryConn_&&(t.log_("Timed out trying to upgrade."),t.secondaryConn_.close())}),Math.floor(6e4))},e.prototype.onReset_=function(e){this.log_("Reset packet received.  New host: "+e),this.repoInfo_.updateHost(e),1===this.state_?this.close():(this.closeConnections_(),this.start_())},e.prototype.onConnectionEstablished_=function(e,t){var n=this;this.log_("Realtime connection established."),this.conn_=e,this.state_=1,this.onReady_&&(this.onReady_(t,this.sessionId),this.onReady_=null),0===this.primaryResponsesRequired_?(this.log_("Primary connection is healthy."),this.isHealthy_=!0):V((function(){n.sendPingOnPrimaryIfNecessary_()}),Math.floor(5e3))},e.prototype.sendPingOnPrimaryIfNecessary_=function(){this.isHealthy_||1!==this.state_||(this.log_("sending ping on primary."),this.sendData_({t:"c",d:{t:"p",d:{}}}))},e.prototype.onSecondaryConnectionLost_=function(){var e=this.secondaryConn_;this.secondaryConn_=null,this.tx_!==e&&this.rx_!==e||this.close()},e.prototype.onConnectionLost_=function(e){this.conn_=null,e||0!==this.state_?1===this.state_&&this.log_("Realtime connection lost."):(this.log_("Realtime connection failed."),this.repoInfo_.isCacheableHost()&&(d.remove("host:"+this.repoInfo_.host),this.repoInfo_.internalHost=this.repoInfo_.host)),this.close()},e.prototype.onConnectionShutdown_=function(e){this.log_("Connection shutdown command received. Shutting down..."),this.onKill_&&(this.onKill_(e),this.onKill_=null),this.onDisconnect_=null,this.close()},e.prototype.sendData_=function(e){if(1!==this.state_)throw"Connection is not connected";this.tx_.send(e)},e.prototype.close=function(){2!==this.state_&&(this.log_("Closing realtime connection."),this.state_=2,this.closeConnections_(),this.onDisconnect_&&(this.onDisconnect_(),this.onDisconnect_=null))},e.prototype.closeConnections_=function(){this.log_("Shutting down all connections"),this.conn_&&(this.conn_.close(),this.conn_=null),this.secondaryConn_&&(this.secondaryConn_.close(),this.secondaryConn_=null),this.healthyTimeout_&&(clearTimeout(this.healthyTimeout_),this.healthyTimeout_=null)},e}(),Qt=function(){function e(){}return e.prototype.put=function(e,t,n,r){},e.prototype.merge=function(e,t,n,r){},e.prototype.refreshAuthToken=function(e){},e.prototype.onDisconnectPut=function(e,t,n){},e.prototype.onDisconnectMerge=function(e,t,n){},e.prototype.onDisconnectCancel=function(e,t){},e.prototype.reportStats=function(e){},e}(),Kt=function(e){function t(n,r,i,o,a,s){var c=e.call(this)||this;if(c.repoInfo_=n,c.onDataUpdate_=r,c.onConnectStatus_=i,c.onServerInfoUpdate_=o,c.authTokenProvider_=a,c.authOverride_=s,c.id=t.nextPersistentConnectionId_++,c.log_=C("p:"+c.id+":"),c.interruptReasons_={},c.listens=new Map,c.outstandingPuts_=[],c.outstandingPutCount_=0,c.onDisconnectRequestQueue_=[],c.connected_=!1,c.reconnectDelay_=1e3,c.maxReconnectDelay_=3e5,c.securityDebugCallback_=null,c.lastSessionId=null,c.establishConnectionTimer_=null,c.visible_=!1,c.requestCBHash_={},c.requestNumber_=0,c.realtime_=null,c.authToken_=null,c.forceTokenRefresh_=!1,c.invalidAuthTokenCount_=0,c.firstConnection_=!0,c.lastConnectionAttemptTime_=null,c.lastConnectionEstablishedTime_=null,s&&!u.isNodeSdk())throw new Error("Auth override specified in options, but not supported on non Node.js platforms");return c.scheduleConnect_(0),Lt.getInstance().on("visible",c.onVisible_,c),-1===n.host.indexOf("fblocal")&&Ft.getInstance().on("online",c.onOnline_,c),c}return s.__extends(t,e),t.prototype.sendRequest=function(e,t,n){var r=++this.requestNumber_,i={r:r,a:e,b:t};this.log_(u.stringify(i)),u.assert(this.connected_,"sendRequest call when we're not connected not allowed."),this.realtime_.sendRequest(i),n&&(this.requestCBHash_[r]=n)},t.prototype.listen=function(e,t,n,r){var i=e.queryIdentifier(),o=e.path.toString();this.log_("Listen called for "+o+" "+i),this.listens.has(o)||this.listens.set(o,new Map),u.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"listen() called for non-default but complete query"),u.assert(!this.listens.get(o).has(i),"listen() called twice for same path/queryId.");var a={onComplete:r,hashFn:t,query:e,tag:n};this.listens.get(o).set(i,a),this.connected_&&this.sendListen_(a)},t.prototype.sendListen_=function(e){var n=this,r=e.query,i=r.path.toString(),o=r.queryIdentifier();this.log_("Listen on "+i+" for "+o);var a={p:i};e.tag&&(a.q=r.queryObject(),a.t=e.tag),a.h=e.hashFn(),this.sendRequest("q",a,(function(a){var s=a.d,u=a.s;t.warnOnListenWarnings_(s,r),(n.listens.get(i)&&n.listens.get(i).get(o))===e&&(n.log_("listen response",a),"ok"!==u&&n.removeListen_(i,o),e.onComplete&&e.onComplete(u,s))}))},t.warnOnListenWarnings_=function(e,t){if(e&&"object"==typeof e&&u.contains(e,"w")){var n=u.safeGet(e,"w");if(Array.isArray(n)&&~n.indexOf("no_index")){var r='".indexOn": "'+t.getQueryParams().getIndex().toString()+'"',i=t.path.toString();x("Using an unspecified index. Your data will be downloaded and filtered on the client. Consider adding "+r+" at "+i+" to your security rules for better performance.")}}},t.prototype.refreshAuthToken=function(e){this.authToken_=e,this.log_("Auth token refreshed"),this.authToken_?this.tryAuth():this.connected_&&this.sendRequest("unauth",{},(function(){})),this.reduceReconnectDelayIfAdminCredential_(e)},t.prototype.reduceReconnectDelayIfAdminCredential_=function(e){(e&&40===e.length||u.isAdmin(e))&&(this.log_("Admin auth credential detected.  Reducing max reconnect time."),this.maxReconnectDelay_=3e4)},t.prototype.tryAuth=function(){var e=this;if(this.connected_&&this.authToken_){var t=this.authToken_,n=u.isValidFormat(t)?"auth":"gauth",r={cred:t};null===this.authOverride_?r.noauth=!0:"object"==typeof this.authOverride_&&(r.authvar=this.authOverride_),this.sendRequest(n,r,(function(n){var r=n.s,i=n.d||"error";e.authToken_===t&&("ok"===r?e.invalidAuthTokenCount_=0:e.onAuthRevoked_(r,i))}))}},t.prototype.unlisten=function(e,t){var n=e.path.toString(),r=e.queryIdentifier();this.log_("Unlisten called for "+n+" "+r),u.assert(e.getQueryParams().isDefault()||!e.getQueryParams().loadsAllData(),"unlisten() called for non-default but complete query"),this.removeListen_(n,r)&&this.connected_&&this.sendUnlisten_(n,r,e.queryObject(),t)},t.prototype.sendUnlisten_=function(e,t,n,r){this.log_("Unlisten on "+e+" for "+t);var i={p:e};r&&(i.q=n,i.t=r),this.sendRequest("n",i)},t.prototype.onDisconnectPut=function(e,t,n){this.connected_?this.sendOnDisconnect_("o",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"o",data:t,onComplete:n})},t.prototype.onDisconnectMerge=function(e,t,n){this.connected_?this.sendOnDisconnect_("om",e,t,n):this.onDisconnectRequestQueue_.push({pathString:e,action:"om",data:t,onComplete:n})},t.prototype.onDisconnectCancel=function(e,t){this.connected_?this.sendOnDisconnect_("oc",e,null,t):this.onDisconnectRequestQueue_.push({pathString:e,action:"oc",data:null,onComplete:t})},t.prototype.sendOnDisconnect_=function(e,t,n,r){var i={p:t,d:n};this.log_("onDisconnect "+e,i),this.sendRequest(e,i,(function(e){r&&setTimeout((function(){r(e.s,e.d)}),Math.floor(0))}))},t.prototype.put=function(e,t,n,r){this.putInternal("p",e,t,n,r)},t.prototype.merge=function(e,t,n,r){this.putInternal("m",e,t,n,r)},t.prototype.putInternal=function(e,t,n,r,i){var o={p:t,d:n};void 0!==i&&(o.h=i),this.outstandingPuts_.push({action:e,request:o,onComplete:r}),this.outstandingPutCount_++;var a=this.outstandingPuts_.length-1;this.connected_?this.sendPut_(a):this.log_("Buffering put: "+t)},t.prototype.sendPut_=function(e){var t=this,n=this.outstandingPuts_[e].action,r=this.outstandingPuts_[e].request,i=this.outstandingPuts_[e].onComplete;this.outstandingPuts_[e].queued=this.connected_,this.sendRequest(n,r,(function(r){t.log_(n+" response",r),delete t.outstandingPuts_[e],t.outstandingPutCount_--,0===t.outstandingPutCount_&&(t.outstandingPuts_=[]),i&&i(r.s,r.d)}))},t.prototype.reportStats=function(e){var t=this;if(this.connected_){var n={c:e};this.log_("reportStats",n),this.sendRequest("s",n,(function(e){if("ok"!==e.s){var n=e.d;t.log_("reportStats","Error sending stats: "+n)}}))}},t.prototype.onDataMessage_=function(e){if("r"in e){this.log_("from server: "+u.stringify(e));var t=e.r,n=this.requestCBHash_[t];n&&(delete this.requestCBHash_[t],n(e.b))}else{if("error"in e)throw"A server-side error has occurred: "+e.error;"a"in e&&this.onDataPush_(e.a,e.b)}},t.prototype.onDataPush_=function(e,t){this.log_("handleServerMessage",e,t),"d"===e?this.onDataUpdate_(t.p,t.d,!1,t.t):"m"===e?this.onDataUpdate_(t.p,t.d,!0,t.t):"c"===e?this.onListenRevoked_(t.p,t.q):"ac"===e?this.onAuthRevoked_(t.s,t.d):"sd"===e?this.onSecurityDebugPacket_(t):T("Unrecognized action received from server: "+u.stringify(e)+"\nAre you using the latest client?")},t.prototype.onReady_=function(e,t){this.log_("connection ready"),this.connected_=!0,this.lastConnectionEstablishedTime_=(new Date).getTime(),this.handleTimestamp_(e),this.lastSessionId=t,this.firstConnection_&&this.sendConnectStats_(),this.restoreState_(),this.firstConnection_=!1,this.onConnectStatus_(!0)},t.prototype.scheduleConnect_=function(e){var t=this;u.assert(!this.realtime_,"Scheduling a connect when we're already connected/ing?"),this.establishConnectionTimer_&&clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=setTimeout((function(){t.establishConnectionTimer_=null,t.establishConnection_()}),Math.floor(e))},t.prototype.onVisible_=function(e){e&&!this.visible_&&this.reconnectDelay_===this.maxReconnectDelay_&&(this.log_("Window became visible.  Reducing delay."),this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0)),this.visible_=e},t.prototype.onOnline_=function(e){e?(this.log_("Browser went online."),this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0)):(this.log_("Browser went offline.  Killing connection."),this.realtime_&&this.realtime_.close())},t.prototype.onRealtimeDisconnect_=function(){if(this.log_("data client disconnected"),this.connected_=!1,this.realtime_=null,this.cancelSentTransactions_(),this.requestCBHash_={},this.shouldReconnect_()){if(this.visible_){if(this.lastConnectionEstablishedTime_){(new Date).getTime()-this.lastConnectionEstablishedTime_>3e4&&(this.reconnectDelay_=1e3),this.lastConnectionEstablishedTime_=null}}else this.log_("Window isn't visible.  Delaying reconnect."),this.reconnectDelay_=this.maxReconnectDelay_,this.lastConnectionAttemptTime_=(new Date).getTime();var e=(new Date).getTime()-this.lastConnectionAttemptTime_,t=Math.max(0,this.reconnectDelay_-e);t=Math.random()*t,this.log_("Trying to reconnect in "+t+"ms"),this.scheduleConnect_(t),this.reconnectDelay_=Math.min(this.maxReconnectDelay_,1.3*this.reconnectDelay_)}this.onConnectStatus_(!1)},t.prototype.establishConnection_=function(){if(this.shouldReconnect_()){this.log_("Making a connection attempt"),this.lastConnectionAttemptTime_=(new Date).getTime(),this.lastConnectionEstablishedTime_=null;var e=this.onDataMessage_.bind(this),n=this.onReady_.bind(this),r=this.onRealtimeDisconnect_.bind(this),i=this.id+":"+t.nextConnectionId_++,o=this,a=this.lastSessionId,s=!1,c=null,l=function(){c?c.close():(s=!0,r())};this.realtime_={close:l,sendRequest:function(e){u.assert(c,"sendRequest call when we're not connected not allowed."),c.sendRequest(e)}};var f=this.forceTokenRefresh_;this.forceTokenRefresh_=!1,this.authTokenProvider_.getToken(f).then((function(t){s?S("getToken() completed but was canceled"):(S("getToken() completed. Creating connection."),o.authToken_=t&&t.accessToken,c=new zt(i,o.repoInfo_,e,n,r,(function(e){x(e+" ("+o.repoInfo_.toString()+")"),o.interrupt("server_kill")}),a))})).then(null,(function(e){o.log_("Failed to get token: "+e),s||(u.CONSTANTS.NODE_ADMIN&&x(e),l())}))}},t.prototype.interrupt=function(e){S("Interrupting connection for reason: "+e),this.interruptReasons_[e]=!0,this.realtime_?this.realtime_.close():(this.establishConnectionTimer_&&(clearTimeout(this.establishConnectionTimer_),this.establishConnectionTimer_=null),this.connected_&&this.onRealtimeDisconnect_())},t.prototype.resume=function(e){S("Resuming connection for reason: "+e),delete this.interruptReasons_[e],u.isEmpty(this.interruptReasons_)&&(this.reconnectDelay_=1e3,this.realtime_||this.scheduleConnect_(0))},t.prototype.handleTimestamp_=function(e){var t=e-(new Date).getTime();this.onServerInfoUpdate_({serverTimeOffset:t})},t.prototype.cancelSentTransactions_=function(){for(var e=0;e<this.outstandingPuts_.length;e++){var t=this.outstandingPuts_[e];t&&"h"in t.request&&t.queued&&(t.onComplete&&t.onComplete("disconnect"),delete this.outstandingPuts_[e],this.outstandingPutCount_--)}0===this.outstandingPutCount_&&(this.outstandingPuts_=[])},t.prototype.onListenRevoked_=function(e,t){var n;n=t?t.map((function(e){return D(e)})).join("$"):"default";var r=this.removeListen_(e,n);r&&r.onComplete&&r.onComplete("permission_denied")},t.prototype.removeListen_=function(e,t){var n,r=new q(e).toString();if(this.listens.has(r)){var i=this.listens.get(r);n=i.get(t),i.delete(t),0===i.size&&this.listens.delete(r)}else n=void 0;return n},t.prototype.onAuthRevoked_=function(e,t){S("Auth token revoked: "+e+"/"+t),this.authToken_=null,this.forceTokenRefresh_=!0,this.realtime_.close(),"invalid_token"!==e&&"permission_denied"!==e||(this.invalidAuthTokenCount_++,this.invalidAuthTokenCount_>=3&&(this.reconnectDelay_=3e4,this.authTokenProvider_.notifyForInvalidToken()))},t.prototype.onSecurityDebugPacket_=function(e){this.securityDebugCallback_?this.securityDebugCallback_(e):"msg"in e&&console.log("FIREBASE: "+e.msg.replace("\n","\nFIREBASE: "))},t.prototype.restoreState_=function(){var e,t,n,r;this.tryAuth();try{for(var i=s.__values(this.listens.values()),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,s.__values(a.values())),c=u.next();!c.done;c=u.next()){var l=c.value;this.sendListen_(l)}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}for(var f=0;f<this.outstandingPuts_.length;f++)this.outstandingPuts_[f]&&this.sendPut_(f);for(;this.onDisconnectRequestQueue_.length;){var h=this.onDisconnectRequestQueue_.shift();this.sendOnDisconnect_(h.action,h.pathString,h.data,h.onComplete)}},t.prototype.sendConnectStats_=function(){var e={},t="js";u.CONSTANTS.NODE_ADMIN?t="admin_node":u.CONSTANTS.NODE_CLIENT&&(t="node"),e["sdk."+t+"."+Vt.replace(/\./g,"-")]=1,u.isMobileCordova()?e["framework.cordova"]=1:u.isReactNative()&&(e["framework.reactnative"]=1),this.reportStats(e)},t.prototype.shouldReconnect_=function(){var e=Ft.getInstance().currentlyOnline();return u.isEmpty(this.interruptReasons_)&&e},t.nextPersistentConnectionId_=0,t.nextConnectionId_=0,t}(Qt),Gt=function(e){function t(t,n,r){var i=e.call(this)||this;return i.repoInfo_=t,i.onDataUpdate_=n,i.authTokenProvider_=r,i.log_=C("p:rest:"),i.listens_={},i}return s.__extends(t,e),t.prototype.reportStats=function(e){throw new Error("Method not implemented.")},t.getListenId_=function(e,t){return void 0!==t?"tag$"+t:(u.assert(e.getQueryParams().isDefault(),"should have a tag if it's not a default query."),e.path.toString())},t.prototype.listen=function(e,n,r,i){var o=this,a=e.path.toString();this.log_("Listen called for "+a+" "+e.queryIdentifier());var s=t.getListenId_(e,r),c={};this.listens_[s]=c;var l=e.getQueryParams().toRestQueryStringParameters();this.restRequest_(a+".json",l,(function(e,t){var n=t;(404===e&&(n=null,e=null),null===e&&o.onDataUpdate_(a,n,!1,r),u.safeGet(o.listens_,s)===c)&&i(e?401===e?"permission_denied":"rest_error:"+e:"ok",null)}))},t.prototype.unlisten=function(e,n){var r=t.getListenId_(e,n);delete this.listens_[r]},t.prototype.refreshAuthToken=function(e){},t.prototype.restRequest_=function(e,t,n){var r=this;void 0===t&&(t={}),t.format="export",this.authTokenProvider_.getToken(!1).then((function(i){var o=i&&i.accessToken;o&&(t.auth=o);var a=(r.repoInfo_.secure?"https://":"http://")+r.repoInfo_.host+e+"?ns="+r.repoInfo_.namespace+u.querystring(t);r.log_("Sending REST request for "+a);var s=new XMLHttpRequest;s.onreadystatechange=function(){if(n&&4===s.readyState){r.log_("REST Response for "+a+" received. status:",s.status,"response:",s.responseText);var e=null;if(s.status>=200&&s.status<300){try{e=u.jsonEval(s.responseText)}catch(e){x("Failed to parse JSON response for "+a+": "+s.responseText)}n(null,e)}else 401!==s.status&&404!==s.status&&x("Got unsuccessful REST response for "+a+" Status: "+s.status),n(s.status);n=null}},s.open("GET",a,!0),s.send()}))},t}(Qt),Yt=function(){function e(e,t,n,r){var i=this;this.repoInfo_=e,this.app=n,this.dataUpdateCount=0,this.statsListener_=null,this.eventQueue_=new Rt,this.nextWriteId_=1,this.interceptServerDataCallback_=null,this.onDisconnect_=new et,this.persistentConnection_=null;var o=new It(n,r);if(this.stats_=Ot.getCollection(e),t||("object"==typeof window&&window.navigator&&window.navigator.userAgent||"").search(/googlebot|google webmaster tools|bingbot|yahoo! slurp|baiduspider|yandexbot|duckduckbot/i)>=0)this.server_=new Gt(this.repoInfo_,this.onDataUpdate_.bind(this),o),setTimeout(this.onConnectStatus_.bind(this,!0),0);else{var a=n.options.databaseAuthVariableOverride;if(null!=a){if("object"!=typeof a)throw new Error("Only objects are supported for option databaseAuthVariableOverride");try{u.stringify(a)}catch(e){throw new Error("Invalid authOverride provided: "+e)}}this.persistentConnection_=new Kt(this.repoInfo_,this.onDataUpdate_.bind(this),this.onConnectStatus_.bind(this),this.onServerInfoUpdate_.bind(this),o,a),this.server_=this.persistentConnection_}o.addTokenChangeListener((function(e){i.server_.refreshAuthToken(e)})),this.statsReporter_=Ot.getOrCreateReporter(e,(function(){return new At(i.stats_,i.server_)})),this.transactionsInit_(),this.infoData_=new xt,this.infoSyncTree_=new kt({startListening:function(e,t,n,r){var o=[],a=i.infoData_.getNode(e.path);return a.isEmpty()||(o=i.infoSyncTree_.applyServerOverwrite(e.path,a),setTimeout((function(){r("ok")}),0)),o},stopListening:function(){}}),this.updateInfo_("connected",!1),this.serverSyncTree_=new kt({startListening:function(e,t,n,r){return i.server_.listen(e,n,t,(function(t,n){var o=r(t,n);i.eventQueue_.raiseEventsForChangedPath(e.path,o)})),[]},stopListening:function(e,t){i.server_.unlisten(e,t)}})}return e.prototype.toString=function(){return(this.repoInfo_.secure?"https://":"http://")+this.repoInfo_.host},e.prototype.name=function(){return this.repoInfo_.namespace},e.prototype.serverTime=function(){var e=this.infoData_.getNode(new q(".info/serverTimeOffset")).val()||0;return(new Date).getTime()+e},e.prototype.generateServerValues=function(){return(e=(e={timestamp:this.serverTime()})||{}).timestamp=e.timestamp||(new Date).getTime(),e;var e},e.prototype.onDataUpdate_=function(e,t,n,r){this.dataUpdateCount++;var i=new q(e);t=this.interceptServerDataCallback_?this.interceptServerDataCallback_(e,t):t;var o=[];if(r)if(n){var a=u.map(t,(function(e){return Be(e)}));o=this.serverSyncTree_.applyTaggedQueryMerge(i,a,r)}else{var s=Be(t);o=this.serverSyncTree_.applyTaggedQueryOverwrite(i,s,r)}else if(n){var c=u.map(t,(function(e){return Be(e)}));o=this.serverSyncTree_.applyServerMerge(i,c)}else{var l=Be(t);o=this.serverSyncTree_.applyServerOverwrite(i,l)}var f=i;o.length>0&&(f=this.rerunTransactions_(i)),this.eventQueue_.raiseEventsForChangedPath(f,o)},e.prototype.interceptServerData_=function(e){this.interceptServerDataCallback_=e},e.prototype.onConnectStatus_=function(e){this.updateInfo_("connected",e),!1===e&&this.runOnDisconnectEvents_()},e.prototype.onServerInfoUpdate_=function(e){var t=this;L(e,(function(e,n){t.updateInfo_(e,n)}))},e.prototype.updateInfo_=function(e,t){var n=new q("/.info/"+e),r=Be(t);this.infoData_.updateSnapshot(n,r);var i=this.infoSyncTree_.applyServerOverwrite(n,r);this.eventQueue_.raiseEventsForChangedPath(n,i)},e.prototype.getNextWriteId_=function(){return this.nextWriteId_++},e.prototype.setWithPriority=function(e,t,n,r){var i=this;this.log_("set",{path:e.toString(),value:t,priority:n});var o=this.generateServerValues(),a=Be(t,n),s=nt(a,o),u=this.getNextWriteId_(),c=this.serverSyncTree_.applyUserOverwrite(e,s,u,!0);this.eventQueue_.queueEvents(c),this.server_.put(e.toString(),a.val(!0),(function(t,n){var o="ok"===t;o||x("set at "+e+" failed: "+t);var a=i.serverSyncTree_.ackUserWrite(u,!o);i.eventQueue_.raiseEventsForChangedPath(e,a),i.callOnCompleteCallback(r,t,n)}));var l=this.abortTransactions_(e);this.rerunTransactions_(l),this.eventQueue_.raiseEventsForChangedPath(l,[])},e.prototype.update=function(e,t,n){var r=this;this.log_("update",{path:e.toString(),value:t});var i=!0,o=this.generateServerValues(),a={};if(L(t,(function(e,t){i=!1;var n=Be(t);a[e]=nt(n,o)})),i)S("update() called with empty data.  Don't do anything."),this.callOnCompleteCallback(n,"ok");else{var s=this.getNextWriteId_(),u=this.serverSyncTree_.applyUserMerge(e,a,s);this.eventQueue_.queueEvents(u),this.server_.merge(e.toString(),t,(function(t,i){var o="ok"===t;o||x("update at "+e+" failed: "+t);var a=r.serverSyncTree_.ackUserWrite(s,!o),u=a.length>0?r.rerunTransactions_(e):e;r.eventQueue_.raiseEventsForChangedPath(u,a),r.callOnCompleteCallback(n,t,i)})),L(t,(function(t){var n=r.abortTransactions_(e.child(t));r.rerunTransactions_(n)})),this.eventQueue_.raiseEventsForChangedPath(e,[])}},e.prototype.runOnDisconnectEvents_=function(){var e=this;this.log_("onDisconnectEvents");var t=this.generateServerValues(),n=function(e,t){var n=new et;return e.forEachTree(new q(""),(function(e,r){n.remember(e,nt(r,t))})),n}(this.onDisconnect_,t),r=[];n.forEachTree(q.Empty,(function(t,n){r=r.concat(e.serverSyncTree_.applyServerOverwrite(t,n));var i=e.abortTransactions_(t);e.rerunTransactions_(i)})),this.onDisconnect_=new et,this.eventQueue_.raiseEventsForChangedPath(q.Empty,r)},e.prototype.onDisconnectCancel=function(e,t){var n=this;this.server_.onDisconnectCancel(e.toString(),(function(r,i){"ok"===r&&n.onDisconnect_.forget(e),n.callOnCompleteCallback(t,r,i)}))},e.prototype.onDisconnectSet=function(e,t,n){var r=this,i=Be(t);this.server_.onDisconnectPut(e.toString(),i.val(!0),(function(t,o){"ok"===t&&r.onDisconnect_.remember(e,i),r.callOnCompleteCallback(n,t,o)}))},e.prototype.onDisconnectSetWithPriority=function(e,t,n,r){var i=this,o=Be(t,n);this.server_.onDisconnectPut(e.toString(),o.val(!0),(function(t,n){"ok"===t&&i.onDisconnect_.remember(e,o),i.callOnCompleteCallback(r,t,n)}))},e.prototype.onDisconnectUpdate=function(e,t,n){var r=this;if(u.isEmpty(t))return S("onDisconnect().update() called with empty data.  Don't do anything."),void this.callOnCompleteCallback(n,"ok");this.server_.onDisconnectMerge(e.toString(),t,(function(i,o){"ok"===i&&L(t,(function(t,n){var i=Be(n);r.onDisconnect_.remember(e.child(t),i)})),r.callOnCompleteCallback(n,i,o)}))},e.prototype.addEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.addEventRegistration(e,t):this.serverSyncTree_.addEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.removeEventCallbackForQuery=function(e,t){var n;n=".info"===e.path.getFront()?this.infoSyncTree_.removeEventRegistration(e,t):this.serverSyncTree_.removeEventRegistration(e,t),this.eventQueue_.raiseEventsAtPath(e.path,n)},e.prototype.interrupt=function(){this.persistentConnection_&&this.persistentConnection_.interrupt("repo_interrupt")},e.prototype.resume=function(){this.persistentConnection_&&this.persistentConnection_.resume("repo_interrupt")},e.prototype.stats=function(e){if(void 0===e&&(e=!1),"undefined"!=typeof console){var t;e?(this.statsListener_||(this.statsListener_=new Nt(this.stats_)),t=this.statsListener_.get()):t=this.stats_.get();var n=Object.keys(t).reduce((function(e,t){return Math.max(t.length,e)}),0);L(t,(function(e,t){for(var r=e,i=e.length;i<n+2;i++)r+=" ";console.log(r+t)}))}},e.prototype.statsIncrementCounter=function(e){this.stats_.incrementCounter(e),this.statsReporter_.includeStat(e)},e.prototype.log_=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n="";this.persistentConnection_&&(n=this.persistentConnection_.id+":"),S.apply(void 0,s.__spread([n],e))},e.prototype.callOnCompleteCallback=function(e,t,n){e&&W((function(){if("ok"===t)e(null);else{var r=(t||"error").toUpperCase(),i=r;n&&(i+=": "+n);var o=new Error(i);o.code=r,e(o)}}))},Object.defineProperty(e.prototype,"database",{get:function(){return this.__database||(this.__database=new an(this))},enumerable:!0,configurable:!0}),e}(),$t=function(){function e(t){this.indexedFilter_=new dt(t.getIndex()),this.index_=t.getIndex(),this.startPost_=e.getStartPost_(t),this.endPost_=e.getEndPost_(t)}return e.prototype.getStartPost=function(){return this.startPost_},e.prototype.getEndPost=function(){return this.endPost_},e.prototype.matches=function(e){return this.index_.compare(this.getStartPost(),e)<=0&&this.index_.compare(e,this.getEndPost())<=0},e.prototype.updateChild=function(e,t,n,r,i,o){return this.matches(new ge(t,n))||(n=Ve.EMPTY_NODE),this.indexedFilter_.updateChild(e,t,n,r,i,o)},e.prototype.updateFullNode=function(e,t,n){t.isLeafNode()&&(t=Ve.EMPTY_NODE);var r=t.withIndex(this.index_);r=r.updatePriority(Ve.EMPTY_NODE);var i=this;return t.forEachChild(Pe,(function(e,t){i.matches(new ge(e,t))||(r=r.updateImmediateChild(e,Ve.EMPTY_NODE))})),this.indexedFilter_.updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.indexedFilter_},e.prototype.getIndex=function(){return this.index_},e.getStartPost_=function(e){if(e.hasStart()){var t=e.getIndexStartName();return e.getIndex().makePost(e.getIndexStartValue(),t)}return e.getIndex().minPost()},e.getEndPost_=function(e){if(e.hasEnd()){var t=e.getIndexEndName();return e.getIndex().makePost(e.getIndexEndValue(),t)}return e.getIndex().maxPost()},e}(),Xt=function(){function e(e){this.rangedFilter_=new $t(e),this.index_=e.getIndex(),this.limit_=e.getLimit(),this.reverse_=!e.isViewFromLeft()}return e.prototype.updateChild=function(e,t,n,r,i,o){return this.rangedFilter_.matches(new ge(t,n))||(n=Ve.EMPTY_NODE),e.getImmediateChild(t).equals(n)?e:e.numChildren()<this.limit_?this.rangedFilter_.getIndexedFilter().updateChild(e,t,n,r,i,o):this.fullLimitUpdateChild_(e,t,n,i,o)},e.prototype.updateFullNode=function(e,t,n){var r;if(t.isLeafNode()||t.isEmpty())r=Ve.EMPTY_NODE.withIndex(this.index_);else if(2*this.limit_<t.numChildren()&&t.isIndexed(this.index_)){r=Ve.EMPTY_NODE.withIndex(this.index_);var i=void 0;i=this.reverse_?t.getReverseIteratorFrom(this.rangedFilter_.getEndPost(),this.index_):t.getIteratorFrom(this.rangedFilter_.getStartPost(),this.index_);for(var o=0;i.hasNext()&&o<this.limit_;){var a=i.getNext();if(!(this.reverse_?this.index_.compare(this.rangedFilter_.getStartPost(),a)<=0:this.index_.compare(a,this.rangedFilter_.getEndPost())<=0))break;r=r.updateImmediateChild(a.name,a.node),o++}}else{r=(r=t.withIndex(this.index_)).updatePriority(Ve.EMPTY_NODE);var s=void 0,u=void 0,c=void 0;i=void 0;if(this.reverse_){i=r.getReverseIterator(this.index_),s=this.rangedFilter_.getEndPost(),u=this.rangedFilter_.getStartPost();var l=this.index_.getCompare();c=function(e,t){return l(t,e)}}else i=r.getIterator(this.index_),s=this.rangedFilter_.getStartPost(),u=this.rangedFilter_.getEndPost(),c=this.index_.getCompare();o=0;for(var f=!1;i.hasNext();){a=i.getNext();!f&&c(s,a)<=0&&(f=!0),f&&o<this.limit_&&c(a,u)<=0?o++:r=r.updateImmediateChild(a.name,Ve.EMPTY_NODE)}}return this.rangedFilter_.getIndexedFilter().updateFullNode(e,r,n)},e.prototype.updatePriority=function(e,t){return e},e.prototype.filtersNodes=function(){return!0},e.prototype.getIndexedFilter=function(){return this.rangedFilter_.getIndexedFilter()},e.prototype.getIndex=function(){return this.index_},e.prototype.fullLimitUpdateChild_=function(e,t,n,r,i){var o;if(this.reverse_){var a=this.index_.getCompare();o=function(e,t){return a(t,e)}}else o=this.index_.getCompare();var s=e;u.assert(s.numChildren()===this.limit_,"");var c=new ge(t,n),l=this.reverse_?s.getFirstChild(this.index_):s.getLastChild(this.index_),f=this.rangedFilter_.matches(c);if(s.hasChild(t)){for(var h=s.getImmediateChild(t),p=r.getChildAfterChild(this.index_,l,this.reverse_);null!=p&&(p.name===t||s.hasChild(p.name));)p=r.getChildAfterChild(this.index_,p,this.reverse_);var d=null==p?1:o(p,c);if(f&&!n.isEmpty()&&d>=0)return null!=i&&i.trackChildChange(pt.childChangedChange(t,n,h)),s.updateImmediateChild(t,n);null!=i&&i.trackChildChange(pt.childRemovedChange(t,h));var v=s.updateImmediateChild(t,Ve.EMPTY_NODE);return null!=p&&this.rangedFilter_.matches(p)?(null!=i&&i.trackChildChange(pt.childAddedChange(p.name,p.node)),v.updateImmediateChild(p.name,p.node)):v}return n.isEmpty()?e:f&&o(l,c)>=0?(null!=i&&(i.trackChildChange(pt.childRemovedChange(l.name,l.node)),i.trackChildChange(pt.childAddedChange(t,n))),s.updateImmediateChild(t,n).updateImmediateChild(l.name,Ve.EMPTY_NODE)):e},e}(),Jt=function(){function e(){this.limitSet_=!1,this.startSet_=!1,this.startNameSet_=!1,this.endSet_=!1,this.endNameSet_=!1,this.limit_=0,this.viewFrom_="",this.indexStartValue_=null,this.indexStartName_="",this.indexEndValue_=null,this.indexEndName_="",this.index_=Pe}return e.prototype.hasStart=function(){return this.startSet_},e.prototype.isViewFromLeft=function(){return""===this.viewFrom_?this.startSet_:this.viewFrom_===e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT},e.prototype.getIndexStartValue=function(){return u.assert(this.startSet_,"Only valid if start has been set"),this.indexStartValue_},e.prototype.getIndexStartName=function(){return u.assert(this.startSet_,"Only valid if start has been set"),this.startNameSet_?this.indexStartName_:P},e.prototype.hasEnd=function(){return this.endSet_},e.prototype.getIndexEndValue=function(){return u.assert(this.endSet_,"Only valid if end has been set"),this.indexEndValue_},e.prototype.getIndexEndName=function(){return u.assert(this.endSet_,"Only valid if end has been set"),this.endNameSet_?this.indexEndName_:O},e.prototype.hasLimit=function(){return this.limitSet_},e.prototype.hasAnchoredLimit=function(){return this.limitSet_&&""!==this.viewFrom_},e.prototype.getLimit=function(){return u.assert(this.limitSet_,"Only valid if limit has been set"),this.limit_},e.prototype.getIndex=function(){return this.index_},e.prototype.copy_=function(){var t=new e;return t.limitSet_=this.limitSet_,t.limit_=this.limit_,t.startSet_=this.startSet_,t.indexStartValue_=this.indexStartValue_,t.startNameSet_=this.startNameSet_,t.indexStartName_=this.indexStartName_,t.endSet_=this.endSet_,t.indexEndValue_=this.indexEndValue_,t.endNameSet_=this.endNameSet_,t.indexEndName_=this.indexEndName_,t.index_=this.index_,t.viewFrom_=this.viewFrom_,t},e.prototype.limit=function(e){var t=this.copy_();return t.limitSet_=!0,t.limit_=e,t.viewFrom_="",t},e.prototype.limitToFirst=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_LEFT,n},e.prototype.limitToLast=function(t){var n=this.copy_();return n.limitSet_=!0,n.limit_=t,n.viewFrom_=e.WIRE_PROTOCOL_CONSTANTS_.VIEW_FROM_RIGHT,n},e.prototype.startAt=function(e,t){var n=this.copy_();return n.startSet_=!0,void 0===e&&(e=null),n.indexStartValue_=e,null!=t?(n.startNameSet_=!0,n.indexStartName_=t):(n.startNameSet_=!1,n.indexStartName_=""),n},e.prototype.endAt=function(e,t){var n=this.copy_();return n.endSet_=!0,void 0===e&&(e=null),n.indexEndValue_=e,void 0!==t?(n.endNameSet_=!0,n.indexEndName_=t):(n.endNameSet_=!1,n.indexEndName_=""),n},e.prototype.orderBy=function(e){var t=this.copy_();return t.index_=e,t},e.prototype.getQueryObject=function(){var t=e.WIRE_PROTOCOL_CONSTANTS_,n={};if(this.startSet_&&(n[t.INDEX_START_VALUE]=this.indexStartValue_,this.startNameSet_&&(n[t.INDEX_START_NAME]=this.indexStartName_)),this.endSet_&&(n[t.INDEX_END_VALUE]=this.indexEndValue_,this.endNameSet_&&(n[t.INDEX_END_NAME]=this.indexEndName_)),this.limitSet_){n[t.LIMIT]=this.limit_;var r=this.viewFrom_;""===r&&(r=this.isViewFromLeft()?t.VIEW_FROM_LEFT:t.VIEW_FROM_RIGHT),n[t.VIEW_FROM]=r}return this.index_!==Pe&&(n[t.INDEX]=this.index_.toString()),n},e.prototype.loadsAllData=function(){return!(this.startSet_||this.endSet_||this.limitSet_)},e.prototype.isDefault=function(){return this.loadsAllData()&&this.index_===Pe},e.prototype.getNodeFilter=function(){return this.loadsAllData()?new dt(this.getIndex()):this.hasLimit()?new Xt(this):new $t(this)},e.prototype.toRestQueryStringParameters=function(){var t,n=e.REST_QUERY_CONSTANTS_,r={};return this.isDefault()?r:(this.index_===Pe?t=n.PRIORITY_INDEX:this.index_===Qe?t=n.VALUE_INDEX:this.index_===_e?t=n.KEY_INDEX:(u.assert(this.index_ instanceof Ke,"Unrecognized index type!"),t=this.index_.toString()),r[n.ORDER_BY]=u.stringify(t),this.startSet_&&(r[n.START_AT]=u.stringify(this.indexStartValue_),this.startNameSet_&&(r[n.START_AT]+=","+u.stringify(this.indexStartName_))),this.endSet_&&(r[n.END_AT]=u.stringify(this.indexEndValue_),this.endNameSet_&&(r[n.END_AT]+=","+u.stringify(this.indexEndName_))),this.limitSet_&&(this.isViewFromLeft()?r[n.LIMIT_TO_FIRST]=this.limit_:r[n.LIMIT_TO_LAST]=this.limit_),r)},e.WIRE_PROTOCOL_CONSTANTS_={INDEX_START_VALUE:"sp",INDEX_START_NAME:"sn",INDEX_END_VALUE:"ep",INDEX_END_NAME:"en",LIMIT:"l",VIEW_FROM:"vf",VIEW_FROM_LEFT:"l",VIEW_FROM_RIGHT:"r",INDEX:"i"},e.REST_QUERY_CONSTANTS_={ORDER_BY:"orderBy",PRIORITY_INDEX:"$priority",VALUE_INDEX:"$value",KEY_INDEX:"$key",START_AT:"startAt",END_AT:"endAt",LIMIT_TO_FIRST:"limitToFirst",LIMIT_TO_LAST:"limitToLast"},e.DEFAULT=new e,e}(),Zt=function(e){function t(t,n){if(!(t instanceof Yt))throw new Error("new Reference() no longer supported - use app.database().");return e.call(this,t,n,Jt.DEFAULT,!1)||this}return s.__extends(t,e),t.prototype.getKey=function(){return u.validateArgCount("Reference.key",0,0,arguments.length),this.path.isEmpty()?null:this.path.getBack()},t.prototype.child=function(e){return u.validateArgCount("Reference.child",1,1,arguments.length),"number"==typeof e?e=String(e):e instanceof q||(null===this.path.getFront()?le("Reference.child",1,e,!1):ce("Reference.child",1,e,!1)),new t(this.repo,this.path.child(e))},t.prototype.getParent=function(){u.validateArgCount("Reference.parent",0,0,arguments.length);var e=this.path.parent();return null===e?null:new t(this.repo,e)},t.prototype.getRoot=function(){u.validateArgCount("Reference.root",0,0,arguments.length);for(var e=this;null!==e.getParent();)e=e.getParent();return e},t.prototype.databaseProp=function(){return this.repo.database},t.prototype.set=function(e,t){u.validateArgCount("Reference.set",1,2,arguments.length),fe("Reference.set",this.path),re("Reference.set",1,e,this.path,!1),u.validateCallback("Reference.set",2,t,!0);var n=new u.Deferred;return this.repo.setWithPriority(this.path,e,null,n.wrapCallback(t)),n.promise},t.prototype.update=function(e,t){if(u.validateArgCount("Reference.update",1,2,arguments.length),fe("Reference.update",this.path),Array.isArray(e)){for(var n={},r=0;r<e.length;++r)n[""+r]=e[r];e=n,x("Passing an Array to Firebase.update() is deprecated. Use set() if you want to overwrite the existing data, or an Object with integer keys if you really do want to only update some of the children.")}oe("Reference.update",1,e,this.path,!1),u.validateCallback("Reference.update",2,t,!0);var i=new u.Deferred;return this.repo.update(this.path,e,i.wrapCallback(t)),i.promise},t.prototype.setWithPriority=function(e,t,n){if(u.validateArgCount("Reference.setWithPriority",2,3,arguments.length),fe("Reference.setWithPriority",this.path),re("Reference.setWithPriority",1,e,this.path,!1),ae("Reference.setWithPriority",2,t,!1),u.validateCallback("Reference.setWithPriority",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.setWithPriority failed: "+this.getKey()+" is a read-only object.";var r=new u.Deferred;return this.repo.setWithPriority(this.path,e,t,r.wrapCallback(n)),r.promise},t.prototype.remove=function(e){return u.validateArgCount("Reference.remove",0,1,arguments.length),fe("Reference.remove",this.path),u.validateCallback("Reference.remove",1,e,!0),this.set(null,e)},t.prototype.transaction=function(e,t,n){if(u.validateArgCount("Reference.transaction",1,3,arguments.length),fe("Reference.transaction",this.path),u.validateCallback("Reference.transaction",1,e,!1),u.validateCallback("Reference.transaction",2,t,!0),pe("Reference.transaction",3,n,!0),".length"===this.getKey()||".keys"===this.getKey())throw"Reference.transaction failed: "+this.getKey()+" is a read-only object.";void 0===n&&(n=!0);var r=new u.Deferred;"function"==typeof t&&r.promise.catch((function(){}));var i=function(e,n,i){e?r.reject(e):r.resolve(new ve(n,i)),"function"==typeof t&&t(e,n,i)};return this.repo.startTransaction(this.path,e,i,n),r.promise},t.prototype.setPriority=function(e,t){u.validateArgCount("Reference.setPriority",1,2,arguments.length),fe("Reference.setPriority",this.path),ae("Reference.setPriority",1,e,!1),u.validateCallback("Reference.setPriority",2,t,!0);var n=new u.Deferred;return this.repo.setWithPriority(this.path.child(".priority"),e,null,n.wrapCallback(t)),n.promise},t.prototype.push=function(e,t){u.validateArgCount("Reference.push",0,2,arguments.length),fe("Reference.push",this.path),re("Reference.push",1,e,this.path,!0),u.validateCallback("Reference.push",2,t,!0);var n,r=this.repo.serverTime(),i=ye(r),o=this.child(i),a=this.child(i);return n=null!=e?o.set(e,t).then((function(){return a})):Promise.resolve(a),o.then=n.then.bind(n),o.catch=n.then.bind(n,void 0),"function"==typeof t&&n.catch((function(){})),o},t.prototype.onDisconnect=function(){return fe("Reference.onDisconnect",this.path),new de(this.repo,this.path)},Object.defineProperty(t.prototype,"database",{get:function(){return this.databaseProp()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"key",{get:function(){return this.getKey()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"parent",{get:function(){return this.getParent()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"root",{get:function(){return this.getRoot()},enumerable:!0,configurable:!0}),t}(Ze);
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */Ze.__referenceConstructor=Zt,Et.__referenceConstructor=Zt;
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var en,tn=function(){this.children={},this.childCount=0,this.value=null},nn=function(){function e(e,t,n){void 0===e&&(e=""),void 0===t&&(t=null),void 0===n&&(n=new tn),this.name_=e,this.parent_=t,this.node_=n}return e.prototype.subTree=function(t){for(var n=t instanceof q?t:new q(t),r=this,i=n.getFront();null!==i;){r=new e(i,r,u.safeGet(r.node_.children,i)||new tn),i=(n=n.popFront()).getFront()}return r},e.prototype.getValue=function(){return this.node_.value},e.prototype.setValue=function(e){u.assert(void 0!==e,"Cannot set value to undefined"),this.node_.value=e,this.updateParents_()},e.prototype.clear=function(){this.node_.value=null,this.node_.children={},this.node_.childCount=0,this.updateParents_()},e.prototype.hasChildren=function(){return this.node_.childCount>0},e.prototype.isEmpty=function(){return null===this.getValue()&&!this.hasChildren()},e.prototype.forEachChild=function(t){var n=this;L(this.node_.children,(function(r,i){t(new e(r,n,i))}))},e.prototype.forEachDescendant=function(e,t,n){t&&!n&&e(this),this.forEachChild((function(t){t.forEachDescendant(e,!0,n)})),t&&n&&e(this)},e.prototype.forEachAncestor=function(e,t){for(var n=t?this:this.parent();null!==n;){if(e(n))return!0;n=n.parent()}return!1},e.prototype.forEachImmediateDescendantWithValue=function(e){this.forEachChild((function(t){null!==t.getValue()?e(t):t.forEachImmediateDescendantWithValue(e)}))},e.prototype.path=function(){return new q(null===this.parent_?this.name_:this.parent_.path()+"/"+this.name_)},e.prototype.name=function(){return this.name_},e.prototype.parent=function(){return this.parent_},e.prototype.updateParents_=function(){null!==this.parent_&&this.parent_.updateChild_(this.name_,this)},e.prototype.updateChild_=function(e,t){var n=t.isEmpty(),r=u.contains(this.node_.children,e);n&&r?(delete this.node_.children[e],this.node_.childCount--,this.updateParents_()):n||r||(this.node_.children[e]=t.node_,this.node_.childCount++,this.updateParents_())},e}();!function(e){e[e.RUN=0]="RUN",e[e.SENT=1]="SENT",e[e.COMPLETED=2]="COMPLETED",e[e.SENT_NEEDS_ABORT=3]="SENT_NEEDS_ABORT",e[e.NEEDS_ABORT=4]="NEEDS_ABORT"}(en||(en={})),Yt.MAX_TRANSACTION_RETRIES_=25,Yt.prototype.transactionsInit_=function(){this.transactionQueueTree_=new nn},Yt.prototype.startTransaction=function(e,t,n,r){this.log_("transaction on "+e);var i=function(){},o=new Zt(this,e);o.on("value",i);var a={path:e,update:t,onComplete:n,status:null,order:g(),applyLocally:r,retryCount:0,unwatcher:function(){o.off("value",i)},abortReason:null,currentWriteId:null,currentInputSnapshot:null,currentOutputSnapshotRaw:null,currentOutputSnapshotResolved:null},s=this.getLatestState_(e);a.currentInputSnapshot=s;var c=a.update(s.val());if(void 0===c){if(a.unwatcher(),a.currentOutputSnapshotRaw=null,a.currentOutputSnapshotResolved=null,a.onComplete){var l=new Ge(a.currentInputSnapshot,new Zt(this,a.path),Pe);a.onComplete(null,!1,l)}}else{ie("transaction failed: Data returned ",c,a.path),a.status=en.RUN;var f=this.transactionQueueTree_.subTree(e),h=f.getValue()||[];h.push(a),f.setValue(h);var p=void 0;if("object"==typeof c&&null!==c&&u.contains(c,".priority"))p=u.safeGet(c,".priority"),u.assert(ne(p),"Invalid priority returned by transaction. Priority must be a valid string, finite number, server value, or null.");else p=(this.serverSyncTree_.calcCompleteEventCache(e)||Ve.EMPTY_NODE).getPriority().val();p=p;var d=this.generateServerValues(),v=Be(c,p),y=nt(v,d);a.currentOutputSnapshotRaw=v,a.currentOutputSnapshotResolved=y,a.currentWriteId=this.getNextWriteId_();var m=this.serverSyncTree_.applyUserOverwrite(e,y,a.currentWriteId,a.applyLocally);this.eventQueue_.raiseEventsForChangedPath(e,m),this.sendReadyTransactions_()}},Yt.prototype.getLatestState_=function(e,t){return this.serverSyncTree_.calcCompleteEventCache(e,t)||Ve.EMPTY_NODE},Yt.prototype.sendReadyTransactions_=function(e){var t=this;if(void 0===e&&(e=this.transactionQueueTree_),e||this.pruneCompletedTransactionsBelowNode_(e),null!==e.getValue()){var n=this.buildTransactionQueue_(e);u.assert(n.length>0,"Sending zero length transaction queue"),n.every((function(e){return e.status===en.RUN}))&&this.sendTransactionQueue_(e.path(),n)}else e.hasChildren()&&e.forEachChild((function(e){t.sendReadyTransactions_(e)}))},Yt.prototype.sendTransactionQueue_=function(e,t){for(var n=this,r=t.map((function(e){return e.currentWriteId})),i=this.getLatestState_(e,r),o=i,a=i.hash(),s=0;s<t.length;s++){var c=t[s];u.assert(c.status===en.RUN,"tryToSendTransactionQueue_: items in queue should all be run."),c.status=en.SENT,c.retryCount++;var l=q.relativePath(e,c.path);o=o.updateChild(l,c.currentOutputSnapshotRaw)}var f=o.val(!0),h=e;this.server_.put(h.toString(),f,(function(r){n.log_("transaction put response",{path:h.toString(),status:r});var i=[];if("ok"===r){for(var o=[],a=0;a<t.length;a++){if(t[a].status=en.COMPLETED,i=i.concat(n.serverSyncTree_.ackUserWrite(t[a].currentWriteId)),t[a].onComplete){var s=t[a].currentOutputSnapshotResolved,u=new Zt(n,t[a].path),c=new Ge(s,u,Pe);o.push(t[a].onComplete.bind(null,null,!0,c))}t[a].unwatcher()}n.pruneCompletedTransactionsBelowNode_(n.transactionQueueTree_.subTree(e)),n.sendReadyTransactions_(),n.eventQueue_.raiseEventsForChangedPath(e,i);for(a=0;a<o.length;a++)W(o[a])}else{if("datastale"===r)for(a=0;a<t.length;a++)t[a].status===en.SENT_NEEDS_ABORT?t[a].status=en.NEEDS_ABORT:t[a].status=en.RUN;else{x("transaction at "+h.toString()+" failed: "+r);for(a=0;a<t.length;a++)t[a].status=en.NEEDS_ABORT,t[a].abortReason=r}n.rerunTransactions_(e)}}),a)},Yt.prototype.rerunTransactions_=function(e){var t=this.getAncestorTransactionNode_(e),n=t.path(),r=this.buildTransactionQueue_(t);return this.rerunTransactionQueue_(r,n),n},Yt.prototype.rerunTransactionQueue_=function(e,t){if(0!==e.length){for(var n,r=[],i=[],o=e.filter((function(e){return e.status===en.RUN})).map((function(e){return e.currentWriteId})),a=0;a<e.length;a++){var s=e[a],c=q.relativePath(t,s.path),l=!1,f=void 0;if(u.assert(null!==c,"rerunTransactionsUnderNode_: relativePath should not be null."),s.status===en.NEEDS_ABORT)l=!0,f=s.abortReason,i=i.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else if(s.status===en.RUN)if(s.retryCount>=Yt.MAX_TRANSACTION_RETRIES_)l=!0,f="maxretry",i=i.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0));else{var h=this.getLatestState_(s.path,o);s.currentInputSnapshot=h;var p=e[a].update(h.val());if(void 0!==p){ie("transaction failed: Data returned ",p,s.path);var d=Be(p);"object"==typeof p&&null!=p&&u.contains(p,".priority")||(d=d.updatePriority(h.getPriority()));var v=s.currentWriteId,y=this.generateServerValues(),g=nt(d,y);s.currentOutputSnapshotRaw=d,s.currentOutputSnapshotResolved=g,s.currentWriteId=this.getNextWriteId_(),o.splice(o.indexOf(v),1),i=(i=i.concat(this.serverSyncTree_.applyUserOverwrite(s.path,g,s.currentWriteId,s.applyLocally))).concat(this.serverSyncTree_.ackUserWrite(v,!0))}else l=!0,f="nodata",i=i.concat(this.serverSyncTree_.ackUserWrite(s.currentWriteId,!0))}if(this.eventQueue_.raiseEventsForChangedPath(t,i),i=[],l&&(e[a].status=en.COMPLETED,n=e[a].unwatcher,setTimeout(n,Math.floor(0)),e[a].onComplete))if("nodata"===f){var m=new Zt(this,e[a].path),b=e[a].currentInputSnapshot,_=new Ge(b,m,Pe);r.push(e[a].onComplete.bind(null,null,!1,_))}else r.push(e[a].onComplete.bind(null,new Error(f),!1,null))}this.pruneCompletedTransactionsBelowNode_(this.transactionQueueTree_);for(a=0;a<r.length;a++)W(r[a]);this.sendReadyTransactions_()}},Yt.prototype.getAncestorTransactionNode_=function(e){var t,n=this.transactionQueueTree_;for(t=e.getFront();null!==t&&null===n.getValue();)n=n.subTree(t),t=(e=e.popFront()).getFront();return n},Yt.prototype.buildTransactionQueue_=function(e){var t=[];return this.aggregateTransactionQueuesForNode_(e,t),t.sort((function(e,t){return e.order-t.order})),t},Yt.prototype.aggregateTransactionQueuesForNode_=function(e,t){var n=this,r=e.getValue();if(null!==r)for(var i=0;i<r.length;i++)t.push(r[i]);e.forEachChild((function(e){n.aggregateTransactionQueuesForNode_(e,t)}))},Yt.prototype.pruneCompletedTransactionsBelowNode_=function(e){var t=this,n=e.getValue();if(n){for(var r=0,i=0;i<n.length;i++)n[i].status!==en.COMPLETED&&(n[r]=n[i],r++);n.length=r,e.setValue(n.length>0?n:null)}e.forEachChild((function(e){t.pruneCompletedTransactionsBelowNode_(e)}))},Yt.prototype.abortTransactions_=function(e){var t=this,n=this.getAncestorTransactionNode_(e).path(),r=this.transactionQueueTree_.subTree(e);return r.forEachAncestor((function(e){t.abortTransactionsOnNode_(e)})),this.abortTransactionsOnNode_(r),r.forEachDescendant((function(e){t.abortTransactionsOnNode_(e)})),n},Yt.prototype.abortTransactionsOnNode_=function(e){var t=e.getValue();if(null!==t){for(var n=[],r=[],i=-1,o=0;o<t.length;o++)if(t[o].status===en.SENT_NEEDS_ABORT);else if(t[o].status===en.SENT)u.assert(i===o-1,"All SENT items should be at beginning of queue."),i=o,t[o].status=en.SENT_NEEDS_ABORT,t[o].abortReason="set";else if(u.assert(t[o].status===en.RUN,"Unexpected transaction status in abort"),t[o].unwatcher(),r=r.concat(this.serverSyncTree_.ackUserWrite(t[o].currentWriteId,!0)),t[o].onComplete){n.push(t[o].onComplete.bind(null,new Error("set"),!1,null))}-1===i?e.setValue(null):t.length=i+1,this.eventQueue_.raiseEventsForChangedPath(e.path(),r);for(o=0;o<n.length;o++)W(n[o])}};
/**
 * @license
 * Copyright 2017 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var rn,on=function(){function e(){this.repos_={},this.useRestClient_=!1}return e.getInstance=function(){return rn||(rn=new e),rn},e.prototype.interrupt=function(){var e,t,n,r;try{for(var i=s.__values(Object.keys(this.repos_)),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,s.__values(Object.keys(this.repos_[a]))),c=u.next();!c.done;c=u.next()){var l=c.value;this.repos_[a][l].interrupt()}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}},e.prototype.resume=function(){var e,t,n,r;try{for(var i=s.__values(Object.keys(this.repos_)),o=i.next();!o.done;o=i.next()){var a=o.value;try{for(var u=(n=void 0,s.__values(Object.keys(this.repos_[a]))),c=u.next();!c.done;c=u.next()){var l=c.value;this.repos_[a][l].resume()}}catch(e){n={error:e}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}}}catch(t){e={error:t}}finally{try{o&&!o.done&&(t=i.return)&&t.call(i)}finally{if(e)throw e.error}}},e.prototype.databaseFromApp=function(e,t,n){var i=n||e.options.databaseURL;void 0===i&&k("Can't determine Firebase Database URL.  Be sure to include databaseURL option when calling firebase.initializeApp().");var o=$(i),a=o.repoInfo,s=void 0;return void 0!==r&&(s=r.env.FIREBASE_DATABASE_EMULATOR_HOST),s&&(i="http://"+s+"?ns="+a.namespace,a=(o=$(i)).repoInfo),he("Invalid Firebase Database URL",1,o),o.path.isEmpty()||k("Database URL must point to the root of a Firebase Database (not including a child path)."),this.createRepo(a,e,t).database},e.prototype.deleteRepo=function(e){var t=u.safeGet(this.repos_,e.app.name);t&&u.safeGet(t,e.repoInfo_.toURLString())===e||k("Database "+e.app.name+"("+e.repoInfo_+") has already been deleted."),e.interrupt(),delete t[e.repoInfo_.toURLString()]},e.prototype.createRepo=function(e,t,n){var r=u.safeGet(this.repos_,t.name);r||(r={},this.repos_[t.name]=r);var i=u.safeGet(r,e.toURLString());return i&&k("Database initialized multiple times. Please make sure the format of the database URL matches with each database() call."),i=new Yt(e,this.useRestClient_,t,n),r[e.toURLString()]=i,i},e.prototype.forceRestClient=function(e){this.useRestClient_=e},e}(),an=function(){function e(e){this.repo_=e,e instanceof Yt||k("Don't call new Database() directly - please use firebase.database()."),this.root_=new Zt(e,q.Empty),this.INTERNAL=new sn(this)}return Object.defineProperty(e.prototype,"app",{get:function(){return this.repo_.app},enumerable:!0,configurable:!0}),e.prototype.ref=function(e){return this.checkDeleted_("ref"),u.validateArgCount("database.ref",0,1,arguments.length),e instanceof Zt?this.refFromURL(e.toString()):void 0!==e?this.root_.child(e):this.root_},e.prototype.refFromURL=function(e){var t="database.refFromURL";this.checkDeleted_(t),u.validateArgCount(t,1,1,arguments.length);var n=$(e);he(t,1,n);var r=n.repoInfo;return r.host!==this.repo_.repoInfo_.host&&k(t+": Host name does not match the current database: (found "+r.host+" but expected "+this.repo_.repoInfo_.host+")"),this.ref(n.path.toString())},e.prototype.checkDeleted_=function(e){null===this.repo_&&k("Cannot call "+e+" on a deleted database.")},e.prototype.goOffline=function(){u.validateArgCount("database.goOffline",0,0,arguments.length),this.checkDeleted_("goOffline"),this.repo_.interrupt()},e.prototype.goOnline=function(){u.validateArgCount("database.goOnline",0,0,arguments.length),this.checkDeleted_("goOnline"),this.repo_.resume()},e.ServerValue={TIMESTAMP:{".sv":"timestamp"}},e}(),sn=function(){function e(e){this.database=e}return e.prototype.delete=function(){return s.__awaiter(this,void 0,void 0,(function(){return s.__generator(this,(function(e){return this.database.checkDeleted_("delete"),on.getInstance().deleteRepo(this.database.repo_),this.database.repo_=null,this.database.root_=null,this.database.INTERNAL=null,this.database=null,[2]}))}))},e}(),un=Object.freeze({__proto__:null,forceLongPolling:function(){Bt.forceDisallow(),Ut.forceAllow()},forceWebSockets:function(){Ut.forceDisallow()},isWebSocketsAvailable:function(){return Bt.isAvailable()},setSecurityDebugCallback:function(e,t){e.repo.persistentConnection_.securityDebugCallback_=t},stats:function(e,t){e.repo.stats(t)},statsIncrementCounter:function(e,t){e.repo.statsIncrementCounter(t)},dataUpdateCount:function(e){return e.repo.dataUpdateCount},interceptServerData:function(e,t){return e.repo.interceptServerData_(t)}}),cn=Kt;Kt.prototype.simpleListen=function(e,t){this.sendRequest("q",{p:e},t)},Kt.prototype.echo=function(e,t){this.sendRequest("echo",{d:e},t)};var ln=zt,fn=H,hn=Object.freeze({__proto__:null,DataConnection:cn,RealTimeConnection:ln,hijackHash:function(e){var t=Kt.prototype.put;return Kt.prototype.put=function(n,r,i,o){void 0!==o&&(o=e()),t.call(this,n,r,i,o)},function(){Kt.prototype.put=t}},ConnectionTarget:fn,queryIdentifier:function(e){return e.queryIdentifier()},forceRestClient:function(e){on.getInstance().forceRestClient(e)}}),pn=an.ServerValue;function dn(t){!function(e){Vt=e}(t.SDK_VERSION);var n=t.INTERNAL.registerComponent(new l.Component("database",(function(e,t){var n=e.getProvider("app").getImmediate(),r=e.getProvider("auth-internal");return on.getInstance().databaseFromApp(n,r,t)}),"PUBLIC").setServiceProps({Reference:Zt,Query:Ze,Database:an,DataSnapshot:Ge,enableLogging:E,INTERNAL:un,ServerValue:pn,TEST_ACCESS:hn}).setMultipleInstances(!0));t.registerVersion("@firebase/database","0.5.18"),u.isNodeSdk()&&(e.exports=n)}dn(a),t.DataSnapshot=Ge,t.Database=an,t.OnDisconnect=de,t.Query=Ze,t.Reference=Zt,t.ServerValue=pn,t.enableLogging=E,t.registerDatabase=dn}).call(this,n(377))},function(e,t){var n,r,i=e.exports={};function o(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===o||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:o}catch(e){n=o}try{r="function"==typeof clearTimeout?clearTimeout:a}catch(e){r=a}}();var u,c=[],l=!1,f=-1;function h(){l&&u&&(l=!1,u.length?c=u.concat(c):f=-1,c.length&&p())}function p(){if(!l){var e=s(h);l=!0;for(var t=c.length;t;){for(u=c,c=[];++f<t;)u&&u[f].run();f=-1,t=c.length}u=null,l=!1,function(e){if(r===clearTimeout)return clearTimeout(e);if((r===a||!r)&&clearTimeout)return r=clearTimeout,clearTimeout(e);try{r(e)}catch(t){try{return r.call(null,e)}catch(t){return r.call(this,e)}}}(e)}}function d(e,t){this.fun=e,this.array=t}function v(){}i.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new d(e,t)),1!==c.length||l||s(p)},d.prototype.run=function(){this.fun.apply(null,this.array)},i.title="browser",i.browser=!0,i.env={},i.argv=[],i.version="",i.versions={},i.on=v,i.addListener=v,i.once=v,i.off=v,i.removeListener=v,i.removeAllListeners=v,i.emit=v,i.prependListener=v,i.prependOnceListener=v,i.listeners=function(e){return[]},i.binding=function(e){throw new Error("process.binding is not supported")},i.cwd=function(){return"/"},i.chdir=function(e){throw new Error("process.chdir is not supported")},i.umask=function(){return 0}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r};t.default=function(e){return o.default.createElement("div",null,"Dashboard Page Content")}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r},a=n(62);t.default=function(){return o.default.createElement("div",null,"404! - ",o.default.createElement(a.Link,{to:"/"},"Back to home page"))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PrivateRoute=void 0;var r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i=u(n(1)),o=n(61),a=n(62),s=u(n(381));function u(e){return e&&e.__esModule?e:{default:e}}var c=function(e){var t=e.isAuthentificated,n=e.component,o=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["isAuthentificated","component"]);return i.default.createElement(a.Route,r({},o,{component:function(e){return t?i.default.createElement("div",null,i.default.createElement(s.default,null),i.default.createElement(n,e)):i.default.createElement(a.Redirect,{to:"/"})}}))};t.PrivateRoute=c;t.default=(0,o.connect)((function(e){return{isAuthentificated:!!e.auth.uid}}))(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Header=void 0;var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r},a=n(62),s=n(61),u=n(109);var c=t.Header=function(e){var t=e.startLogout;return o.default.createElement("header",{className:"header"},o.default.createElement("div",{className:"content-container"},o.default.createElement("div",{className:"header__content"},o.default.createElement(a.Link,{className:"header__title",to:"/dashboard"},o.default.createElement("h1",null,"Boilerplate")),o.default.createElement("button",{onClick:t,className:"btn btn--link"},"Logout"))))};t.default=(0,s.connect)(void 0,(function(e){return{startLogout:function(){return e((0,u.startLogout)())}}}))(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.PublicRoute=void 0;var r,i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},o=n(1),a=(r=o)&&r.__esModule?r:{default:r},s=n(61),u=n(62);var c=function(e){var t=e.isAuthentificated,n=e.component,r=function(e,t){var n={};for(var r in e)t.indexOf(r)>=0||Object.prototype.hasOwnProperty.call(e,r)&&(n[r]=e[r]);return n}(e,["isAuthentificated","component"]);return a.default.createElement(u.Route,i({},r,{component:function(e){return t?a.default.createElement(u.Redirect,{to:"/dashboard"}):a.default.createElement(n,e)}}))};t.PublicRoute=c;t.default=(0,s.connect)((function(e){return{isAuthentificated:!!e.auth.uid}}))(c)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(111),i=a(n(384)),o=a(n(385));function a(e){return e&&e.__esModule?e:{default:e}}var s=window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__||r.compose;t.default=function(){return(0,r.createStore)((0,r.combineReducers)({auth:o.default}),s((0,r.applyMiddleware)(i.default)))}},function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(i){return"function"==typeof i?i(n,r,e):t(i)}}}}n.r(t);var i=r();i.withExtraArgument=r,t.default=i},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=arguments[1];switch(t.type){case"LOGIN":return{uid:t.uid};case"LOGOUT":return{};default:return e}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,i=n(1),o=(r=i)&&r.__esModule?r:{default:r};t.default=function(){return o.default.createElement("div",{className:"loader"},o.default.createElement("img",{className:"loader__image",src:"/images/loader.gif",alt:""}))}},function(e,t){},,function(e,t){},function(e,t){}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,